
TrafficIntersectionFreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007e04  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  08007f94  08007f94  00008f94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008084  08008084  0000a010  2**0
                  CONTENTS
  4 .ARM          00000008  08008084  08008084  00009084  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800808c  0800808c  0000a010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800808c  0800808c  0000908c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008090  08008090  00009090  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08008094  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ac4  20000010  080080a4  0000a010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001ad4  080080a4  0000aad4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d04d  00000000  00000000  0000a040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004547  00000000  00000000  0002708d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019d0  00000000  00000000  0002b5d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000013e8  00000000  00000000  0002cfa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a5c0  00000000  00000000  0002e390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020a02  00000000  00000000  00058950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ff0fa  00000000  00000000  00079352  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0017844c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006a94  00000000  00000000  00178490  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  0017ef24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007f7c 	.word	0x08007f7c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08007f7c 	.word	0x08007f7c

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b96a 	b.w	80004bc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	460c      	mov	r4, r1
 8000208:	2b00      	cmp	r3, #0
 800020a:	d14e      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020c:	4694      	mov	ip, r2
 800020e:	458c      	cmp	ip, r1
 8000210:	4686      	mov	lr, r0
 8000212:	fab2 f282 	clz	r2, r2
 8000216:	d962      	bls.n	80002de <__udivmoddi4+0xde>
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0320 	rsb	r3, r2, #32
 800021e:	4091      	lsls	r1, r2
 8000220:	fa20 f303 	lsr.w	r3, r0, r3
 8000224:	fa0c fc02 	lsl.w	ip, ip, r2
 8000228:	4319      	orrs	r1, r3
 800022a:	fa00 fe02 	lsl.w	lr, r0, r2
 800022e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000232:	fa1f f68c 	uxth.w	r6, ip
 8000236:	fbb1 f4f7 	udiv	r4, r1, r7
 800023a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800023e:	fb07 1114 	mls	r1, r7, r4, r1
 8000242:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000246:	fb04 f106 	mul.w	r1, r4, r6
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f104 30ff 	add.w	r0, r4, #4294967295
 8000256:	f080 8112 	bcs.w	800047e <__udivmoddi4+0x27e>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 810f 	bls.w	800047e <__udivmoddi4+0x27e>
 8000260:	3c02      	subs	r4, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a59      	subs	r1, r3, r1
 8000266:	fa1f f38e 	uxth.w	r3, lr
 800026a:	fbb1 f0f7 	udiv	r0, r1, r7
 800026e:	fb07 1110 	mls	r1, r7, r0, r1
 8000272:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000276:	fb00 f606 	mul.w	r6, r0, r6
 800027a:	429e      	cmp	r6, r3
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x94>
 800027e:	eb1c 0303 	adds.w	r3, ip, r3
 8000282:	f100 31ff 	add.w	r1, r0, #4294967295
 8000286:	f080 80fc 	bcs.w	8000482 <__udivmoddi4+0x282>
 800028a:	429e      	cmp	r6, r3
 800028c:	f240 80f9 	bls.w	8000482 <__udivmoddi4+0x282>
 8000290:	4463      	add	r3, ip
 8000292:	3802      	subs	r0, #2
 8000294:	1b9b      	subs	r3, r3, r6
 8000296:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029a:	2100      	movs	r1, #0
 800029c:	b11d      	cbz	r5, 80002a6 <__udivmoddi4+0xa6>
 800029e:	40d3      	lsrs	r3, r2
 80002a0:	2200      	movs	r2, #0
 80002a2:	e9c5 3200 	strd	r3, r2, [r5]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d905      	bls.n	80002ba <__udivmoddi4+0xba>
 80002ae:	b10d      	cbz	r5, 80002b4 <__udivmoddi4+0xb4>
 80002b0:	e9c5 0100 	strd	r0, r1, [r5]
 80002b4:	2100      	movs	r1, #0
 80002b6:	4608      	mov	r0, r1
 80002b8:	e7f5      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002ba:	fab3 f183 	clz	r1, r3
 80002be:	2900      	cmp	r1, #0
 80002c0:	d146      	bne.n	8000350 <__udivmoddi4+0x150>
 80002c2:	42a3      	cmp	r3, r4
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xcc>
 80002c6:	4290      	cmp	r0, r2
 80002c8:	f0c0 80f0 	bcc.w	80004ac <__udivmoddi4+0x2ac>
 80002cc:	1a86      	subs	r6, r0, r2
 80002ce:	eb64 0303 	sbc.w	r3, r4, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	2d00      	cmp	r5, #0
 80002d6:	d0e6      	beq.n	80002a6 <__udivmoddi4+0xa6>
 80002d8:	e9c5 6300 	strd	r6, r3, [r5]
 80002dc:	e7e3      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002de:	2a00      	cmp	r2, #0
 80002e0:	f040 8090 	bne.w	8000404 <__udivmoddi4+0x204>
 80002e4:	eba1 040c 	sub.w	r4, r1, ip
 80002e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002ec:	fa1f f78c 	uxth.w	r7, ip
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb4 f6f8 	udiv	r6, r4, r8
 80002f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fa:	fb08 4416 	mls	r4, r8, r6, r4
 80002fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000302:	fb07 f006 	mul.w	r0, r7, r6
 8000306:	4298      	cmp	r0, r3
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x11c>
 800030a:	eb1c 0303 	adds.w	r3, ip, r3
 800030e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x11a>
 8000314:	4298      	cmp	r0, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 800031a:	4626      	mov	r6, r4
 800031c:	1a1c      	subs	r4, r3, r0
 800031e:	fa1f f38e 	uxth.w	r3, lr
 8000322:	fbb4 f0f8 	udiv	r0, r4, r8
 8000326:	fb08 4410 	mls	r4, r8, r0, r4
 800032a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032e:	fb00 f707 	mul.w	r7, r0, r7
 8000332:	429f      	cmp	r7, r3
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x148>
 8000336:	eb1c 0303 	adds.w	r3, ip, r3
 800033a:	f100 34ff 	add.w	r4, r0, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x146>
 8000340:	429f      	cmp	r7, r3
 8000342:	f200 80b0 	bhi.w	80004a6 <__udivmoddi4+0x2a6>
 8000346:	4620      	mov	r0, r4
 8000348:	1bdb      	subs	r3, r3, r7
 800034a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0x9c>
 8000350:	f1c1 0620 	rsb	r6, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 f706 	lsr.w	r7, r2, r6
 800035a:	431f      	orrs	r7, r3
 800035c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000360:	fa04 f301 	lsl.w	r3, r4, r1
 8000364:	ea43 030c 	orr.w	r3, r3, ip
 8000368:	40f4      	lsrs	r4, r6
 800036a:	fa00 f801 	lsl.w	r8, r0, r1
 800036e:	0c38      	lsrs	r0, r7, #16
 8000370:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000374:	fbb4 fef0 	udiv	lr, r4, r0
 8000378:	fa1f fc87 	uxth.w	ip, r7
 800037c:	fb00 441e 	mls	r4, r0, lr, r4
 8000380:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000384:	fb0e f90c 	mul.w	r9, lr, ip
 8000388:	45a1      	cmp	r9, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	d90a      	bls.n	80003a6 <__udivmoddi4+0x1a6>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000396:	f080 8084 	bcs.w	80004a2 <__udivmoddi4+0x2a2>
 800039a:	45a1      	cmp	r9, r4
 800039c:	f240 8081 	bls.w	80004a2 <__udivmoddi4+0x2a2>
 80003a0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a4:	443c      	add	r4, r7
 80003a6:	eba4 0409 	sub.w	r4, r4, r9
 80003aa:	fa1f f983 	uxth.w	r9, r3
 80003ae:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b2:	fb00 4413 	mls	r4, r0, r3, r4
 80003b6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d907      	bls.n	80003d2 <__udivmoddi4+0x1d2>
 80003c2:	193c      	adds	r4, r7, r4
 80003c4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c8:	d267      	bcs.n	800049a <__udivmoddi4+0x29a>
 80003ca:	45a4      	cmp	ip, r4
 80003cc:	d965      	bls.n	800049a <__udivmoddi4+0x29a>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003d6:	fba0 9302 	umull	r9, r3, r0, r2
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	429c      	cmp	r4, r3
 80003e0:	46ce      	mov	lr, r9
 80003e2:	469c      	mov	ip, r3
 80003e4:	d351      	bcc.n	800048a <__udivmoddi4+0x28a>
 80003e6:	d04e      	beq.n	8000486 <__udivmoddi4+0x286>
 80003e8:	b155      	cbz	r5, 8000400 <__udivmoddi4+0x200>
 80003ea:	ebb8 030e 	subs.w	r3, r8, lr
 80003ee:	eb64 040c 	sbc.w	r4, r4, ip
 80003f2:	fa04 f606 	lsl.w	r6, r4, r6
 80003f6:	40cb      	lsrs	r3, r1
 80003f8:	431e      	orrs	r6, r3
 80003fa:	40cc      	lsrs	r4, r1
 80003fc:	e9c5 6400 	strd	r6, r4, [r5]
 8000400:	2100      	movs	r1, #0
 8000402:	e750      	b.n	80002a6 <__udivmoddi4+0xa6>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f103 	lsr.w	r1, r0, r3
 800040c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000410:	fa24 f303 	lsr.w	r3, r4, r3
 8000414:	4094      	lsls	r4, r2
 8000416:	430c      	orrs	r4, r1
 8000418:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800041c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000420:	fa1f f78c 	uxth.w	r7, ip
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3110 	mls	r1, r8, r0, r3
 800042c:	0c23      	lsrs	r3, r4, #16
 800042e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000432:	fb00 f107 	mul.w	r1, r0, r7
 8000436:	4299      	cmp	r1, r3
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x24c>
 800043a:	eb1c 0303 	adds.w	r3, ip, r3
 800043e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000442:	d22c      	bcs.n	800049e <__udivmoddi4+0x29e>
 8000444:	4299      	cmp	r1, r3
 8000446:	d92a      	bls.n	800049e <__udivmoddi4+0x29e>
 8000448:	3802      	subs	r0, #2
 800044a:	4463      	add	r3, ip
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb3 f1f8 	udiv	r1, r3, r8
 8000454:	fb08 3311 	mls	r3, r8, r1, r3
 8000458:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800045c:	fb01 f307 	mul.w	r3, r1, r7
 8000460:	42a3      	cmp	r3, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x276>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f101 36ff 	add.w	r6, r1, #4294967295
 800046c:	d213      	bcs.n	8000496 <__udivmoddi4+0x296>
 800046e:	42a3      	cmp	r3, r4
 8000470:	d911      	bls.n	8000496 <__udivmoddi4+0x296>
 8000472:	3902      	subs	r1, #2
 8000474:	4464      	add	r4, ip
 8000476:	1ae4      	subs	r4, r4, r3
 8000478:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800047c:	e739      	b.n	80002f2 <__udivmoddi4+0xf2>
 800047e:	4604      	mov	r4, r0
 8000480:	e6f0      	b.n	8000264 <__udivmoddi4+0x64>
 8000482:	4608      	mov	r0, r1
 8000484:	e706      	b.n	8000294 <__udivmoddi4+0x94>
 8000486:	45c8      	cmp	r8, r9
 8000488:	d2ae      	bcs.n	80003e8 <__udivmoddi4+0x1e8>
 800048a:	ebb9 0e02 	subs.w	lr, r9, r2
 800048e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000492:	3801      	subs	r0, #1
 8000494:	e7a8      	b.n	80003e8 <__udivmoddi4+0x1e8>
 8000496:	4631      	mov	r1, r6
 8000498:	e7ed      	b.n	8000476 <__udivmoddi4+0x276>
 800049a:	4603      	mov	r3, r0
 800049c:	e799      	b.n	80003d2 <__udivmoddi4+0x1d2>
 800049e:	4630      	mov	r0, r6
 80004a0:	e7d4      	b.n	800044c <__udivmoddi4+0x24c>
 80004a2:	46d6      	mov	lr, sl
 80004a4:	e77f      	b.n	80003a6 <__udivmoddi4+0x1a6>
 80004a6:	4463      	add	r3, ip
 80004a8:	3802      	subs	r0, #2
 80004aa:	e74d      	b.n	8000348 <__udivmoddi4+0x148>
 80004ac:	4606      	mov	r6, r0
 80004ae:	4623      	mov	r3, r4
 80004b0:	4608      	mov	r0, r1
 80004b2:	e70f      	b.n	80002d4 <__udivmoddi4+0xd4>
 80004b4:	3e02      	subs	r6, #2
 80004b6:	4463      	add	r3, ip
 80004b8:	e730      	b.n	800031c <__udivmoddi4+0x11c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <updateCarState>:

#define RED4_BIT_MASK         0x08  // Red for lane 2 (byte 1, bit 0)
#define YELLOW4_BIT_MASK      0x10  // Yellow for lane 2 (byte 1, bit 1)
#define GREEN4_BIT_MASK       0x20  // Green for lane 2 (byte 1, bit 2)

void updateCarState(CarSignalState *s) {
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
	switch (s->currentState) {
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	795b      	ldrb	r3, [r3, #5]
 80004cc:	2b02      	cmp	r3, #2
 80004ce:	f000 8085 	beq.w	80005dc <updateCarState+0x11c>
 80004d2:	2b02      	cmp	r3, #2
 80004d4:	f300 80c2 	bgt.w	800065c <updateCarState+0x19c>
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d002      	beq.n	80004e2 <updateCarState+0x22>
 80004dc:	2b01      	cmp	r3, #1
 80004de:	d02c      	beq.n	800053a <updateCarState+0x7a>
 80004e0:	e0bc      	b.n	800065c <updateCarState+0x19c>
		case VERTICAL_GREEN:
			clearHorizontalLanes(s);
 80004e2:	6878      	ldr	r0, [r7, #4]
 80004e4:	f000 f8c6 	bl	8000674 <clearHorizontalLanes>
			s->data[2] |= RED1_BIT_MASK;
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	3302      	adds	r3, #2
 80004ee:	781a      	ldrb	r2, [r3, #0]
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	3302      	adds	r3, #2
 80004f6:	f042 0201 	orr.w	r2, r2, #1
 80004fa:	b2d2      	uxtb	r2, r2
 80004fc:	701a      	strb	r2, [r3, #0]
			s->data[1] |= GREEN2_BIT_MASK;
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	3301      	adds	r3, #1
 8000504:	781a      	ldrb	r2, [r3, #0]
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	3301      	adds	r3, #1
 800050c:	f042 0204 	orr.w	r2, r2, #4
 8000510:	b2d2      	uxtb	r2, r2
 8000512:	701a      	strb	r2, [r3, #0]
			s->data[0] |= RED3_BIT_MASK;
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	781a      	ldrb	r2, [r3, #0]
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	f042 0201 	orr.w	r2, r2, #1
 8000522:	b2d2      	uxtb	r2, r2
 8000524:	701a      	strb	r2, [r3, #0]
			s->data[0] |= GREEN4_BIT_MASK;
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	781a      	ldrb	r2, [r3, #0]
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	f042 0220 	orr.w	r2, r2, #32
 8000534:	b2d2      	uxtb	r2, r2
 8000536:	701a      	strb	r2, [r3, #0]
			break;
 8000538:	e090      	b.n	800065c <updateCarState+0x19c>

		case YELLOW:
			s->data[2] &= ~GREEN1_BIT_MASK;
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	3302      	adds	r3, #2
 8000540:	781a      	ldrb	r2, [r3, #0]
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	3302      	adds	r3, #2
 8000548:	f022 0204 	bic.w	r2, r2, #4
 800054c:	b2d2      	uxtb	r2, r2
 800054e:	701a      	strb	r2, [r3, #0]
			s->data[1] &= ~GREEN2_BIT_MASK;
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	3301      	adds	r3, #1
 8000556:	781a      	ldrb	r2, [r3, #0]
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	3301      	adds	r3, #1
 800055e:	f022 0204 	bic.w	r2, r2, #4
 8000562:	b2d2      	uxtb	r2, r2
 8000564:	701a      	strb	r2, [r3, #0]
			s->data[0] &= ~GREEN3_BIT_MASK;
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	781a      	ldrb	r2, [r3, #0]
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	f022 0204 	bic.w	r2, r2, #4
 8000574:	b2d2      	uxtb	r2, r2
 8000576:	701a      	strb	r2, [r3, #0]
			s->data[0] &= ~GREEN4_BIT_MASK;
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	781a      	ldrb	r2, [r3, #0]
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	f022 0220 	bic.w	r2, r2, #32
 8000586:	b2d2      	uxtb	r2, r2
 8000588:	701a      	strb	r2, [r3, #0]

			s->data[2] |= YELLOW1_BIT_MASK;
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	3302      	adds	r3, #2
 8000590:	781a      	ldrb	r2, [r3, #0]
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	3302      	adds	r3, #2
 8000598:	f042 0202 	orr.w	r2, r2, #2
 800059c:	b2d2      	uxtb	r2, r2
 800059e:	701a      	strb	r2, [r3, #0]
			s->data[1] |= YELLOW2_BIT_MASK;
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	3301      	adds	r3, #1
 80005a6:	781a      	ldrb	r2, [r3, #0]
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	3301      	adds	r3, #1
 80005ae:	f042 0202 	orr.w	r2, r2, #2
 80005b2:	b2d2      	uxtb	r2, r2
 80005b4:	701a      	strb	r2, [r3, #0]
			s->data[0] |= YELLOW3_BIT_MASK;
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	781a      	ldrb	r2, [r3, #0]
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	f042 0202 	orr.w	r2, r2, #2
 80005c4:	b2d2      	uxtb	r2, r2
 80005c6:	701a      	strb	r2, [r3, #0]
			s->data[0] |= YELLOW4_BIT_MASK;
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	781a      	ldrb	r2, [r3, #0]
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	f042 0210 	orr.w	r2, r2, #16
 80005d6:	b2d2      	uxtb	r2, r2
 80005d8:	701a      	strb	r2, [r3, #0]
			break;
 80005da:	e03f      	b.n	800065c <updateCarState+0x19c>

		case VERTICAL_RED:
			clearVerticalLanes(s);
 80005dc:	6878      	ldr	r0, [r7, #4]
 80005de:	f000 f872 	bl	80006c6 <clearVerticalLanes>
			s->data[2] |= GREEN1_BIT_MASK;
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	3302      	adds	r3, #2
 80005e8:	781a      	ldrb	r2, [r3, #0]
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	3302      	adds	r3, #2
 80005f0:	f042 0204 	orr.w	r2, r2, #4
 80005f4:	b2d2      	uxtb	r2, r2
 80005f6:	701a      	strb	r2, [r3, #0]
			s->data[1] |= RED2_BIT_MASK;
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	3301      	adds	r3, #1
 80005fe:	781a      	ldrb	r2, [r3, #0]
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	3301      	adds	r3, #1
 8000606:	f042 0201 	orr.w	r2, r2, #1
 800060a:	b2d2      	uxtb	r2, r2
 800060c:	701a      	strb	r2, [r3, #0]
			s->data[0] |= GREEN3_BIT_MASK;
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	781a      	ldrb	r2, [r3, #0]
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	f042 0204 	orr.w	r2, r2, #4
 800061c:	b2d2      	uxtb	r2, r2
 800061e:	701a      	strb	r2, [r3, #0]
			s->data[0] |= RED4_BIT_MASK;
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	781a      	ldrb	r2, [r3, #0]
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	f042 0208 	orr.w	r2, r2, #8
 800062e:	b2d2      	uxtb	r2, r2
 8000630:	701a      	strb	r2, [r3, #0]

			s->data[1] &= ~YELLOW2_BIT_MASK;
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	3301      	adds	r3, #1
 8000638:	781a      	ldrb	r2, [r3, #0]
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	3301      	adds	r3, #1
 8000640:	f022 0202 	bic.w	r2, r2, #2
 8000644:	b2d2      	uxtb	r2, r2
 8000646:	701a      	strb	r2, [r3, #0]
			s->data[0] &= ~YELLOW4_BIT_MASK;
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	781a      	ldrb	r2, [r3, #0]
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	f022 0210 	bic.w	r2, r2, #16
 8000656:	b2d2      	uxtb	r2, r2
 8000658:	701a      	strb	r2, [r3, #0]
			break;
 800065a:	bf00      	nop
	}
	transmitData(s->data, s->sizeOfData);
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	681a      	ldr	r2, [r3, #0]
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	791b      	ldrb	r3, [r3, #4]
 8000664:	4619      	mov	r1, r3
 8000666:	4610      	mov	r0, r2
 8000668:	f000 fede 	bl	8001428 <transmitData>
}
 800066c:	bf00      	nop
 800066e:	3708      	adds	r7, #8
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}

08000674 <clearHorizontalLanes>:

void clearHorizontalLanes(CarSignalState *s) {
 8000674:	b480      	push	{r7}
 8000676:	b083      	sub	sp, #12
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
		s->data[2] &= ~(RED1_BIT_MASK | YELLOW1_BIT_MASK | GREEN1_BIT_MASK);
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	3302      	adds	r3, #2
 8000682:	781a      	ldrb	r2, [r3, #0]
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	3302      	adds	r3, #2
 800068a:	f022 0207 	bic.w	r2, r2, #7
 800068e:	b2d2      	uxtb	r2, r2
 8000690:	701a      	strb	r2, [r3, #0]
		s->data[1] &= ~(RED2_BIT_MASK | YELLOW2_BIT_MASK | GREEN2_BIT_MASK);
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	3301      	adds	r3, #1
 8000698:	781a      	ldrb	r2, [r3, #0]
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	3301      	adds	r3, #1
 80006a0:	f022 0207 	bic.w	r2, r2, #7
 80006a4:	b2d2      	uxtb	r2, r2
 80006a6:	701a      	strb	r2, [r3, #0]
		s->data[0] &= ~(RED3_BIT_MASK | YELLOW3_BIT_MASK | GREEN3_BIT_MASK
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	781a      	ldrb	r2, [r3, #0]
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 80006b6:	b2d2      	uxtb	r2, r2
 80006b8:	701a      	strb	r2, [r3, #0]
			| RED4_BIT_MASK | YELLOW4_BIT_MASK | GREEN4_BIT_MASK);
}
 80006ba:	bf00      	nop
 80006bc:	370c      	adds	r7, #12
 80006be:	46bd      	mov	sp, r7
 80006c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c4:	4770      	bx	lr

080006c6 <clearVerticalLanes>:

void clearVerticalLanes(CarSignalState *s) {
 80006c6:	b480      	push	{r7}
 80006c8:	b083      	sub	sp, #12
 80006ca:	af00      	add	r7, sp, #0
 80006cc:	6078      	str	r0, [r7, #4]
		s->data[2] &= ~(RED1_BIT_MASK | YELLOW1_BIT_MASK | GREEN1_BIT_MASK);
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	3302      	adds	r3, #2
 80006d4:	781a      	ldrb	r2, [r3, #0]
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	3302      	adds	r3, #2
 80006dc:	f022 0207 	bic.w	r2, r2, #7
 80006e0:	b2d2      	uxtb	r2, r2
 80006e2:	701a      	strb	r2, [r3, #0]
		s->data[1] &= ~(RED2_BIT_MASK | YELLOW2_BIT_MASK | GREEN2_BIT_MASK);
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	3301      	adds	r3, #1
 80006ea:	781a      	ldrb	r2, [r3, #0]
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	3301      	adds	r3, #1
 80006f2:	f022 0207 	bic.w	r2, r2, #7
 80006f6:	b2d2      	uxtb	r2, r2
 80006f8:	701a      	strb	r2, [r3, #0]
		s->data[0] &= ~(RED3_BIT_MASK | YELLOW3_BIT_MASK | GREEN3_BIT_MASK
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	781a      	ldrb	r2, [r3, #0]
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8000708:	b2d2      	uxtb	r2, r2
 800070a:	701a      	strb	r2, [r3, #0]
			| RED4_BIT_MASK | YELLOW4_BIT_MASK | GREEN4_BIT_MASK);
}
 800070c:	bf00      	nop
 800070e:	370c      	adds	r7, #12
 8000710:	46bd      	mov	sp, r7
 8000712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000716:	4770      	bx	lr

08000718 <toggleIndicatorLight>:
#define LIGHT_INDICATOR_BIT_MASK     (1 << LIGHT_INDICATOR_BIT_POSITION)




void toggleIndicatorLight(PedestrianState *pedState) {
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
	pedState->data[pedState->id] ^= LIGHT_INDICATOR_BIT_MASK; // to be removed?
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	687a      	ldr	r2, [r7, #4]
 8000726:	7e12      	ldrb	r2, [r2, #24]
 8000728:	4413      	add	r3, r2
 800072a:	781a      	ldrb	r2, [r3, #0]
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	6879      	ldr	r1, [r7, #4]
 8000732:	7e09      	ldrb	r1, [r1, #24]
 8000734:	440b      	add	r3, r1
 8000736:	f082 0220 	eor.w	r2, r2, #32
 800073a:	b2d2      	uxtb	r2, r2
 800073c:	701a      	strb	r2, [r3, #0]
    transmitData(pedState->data, pedState->sizeOfData);
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	681a      	ldr	r2, [r3, #0]
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	791b      	ldrb	r3, [r3, #4]
 8000746:	4619      	mov	r1, r3
 8000748:	4610      	mov	r0, r2
 800074a:	f000 fe6d 	bl	8001428 <transmitData>
}
 800074e:	bf00      	nop
 8000750:	3708      	adds	r7, #8
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}

08000756 <updatePedestrianState>:



void updatePedestrianState(PedestrianState *pedState) {
 8000756:	b580      	push	{r7, lr}
 8000758:	b082      	sub	sp, #8
 800075a:	af00      	add	r7, sp, #0
 800075c:	6078      	str	r0, [r7, #4]
    switch (pedState->currentState) {
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	795b      	ldrb	r3, [r3, #5]
 8000762:	2b02      	cmp	r3, #2
 8000764:	d006      	beq.n	8000774 <updatePedestrianState+0x1e>
 8000766:	2b02      	cmp	r3, #2
 8000768:	dc7f      	bgt.n	800086a <updatePedestrianState+0x114>
 800076a:	2b00      	cmp	r3, #0
 800076c:	d04f      	beq.n	800080e <updatePedestrianState+0xb8>
 800076e:	2b01      	cmp	r3, #1
 8000770:	d02e      	beq.n	80007d0 <updatePedestrianState+0x7a>
 8000772:	e07a      	b.n	800086a <updatePedestrianState+0x114>
        case RED:
            pedState->data[pedState->id] |= LIGHT_RED_BIT_MASK;
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	687a      	ldr	r2, [r7, #4]
 800077a:	7e12      	ldrb	r2, [r2, #24]
 800077c:	4413      	add	r3, r2
 800077e:	781a      	ldrb	r2, [r3, #0]
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	6879      	ldr	r1, [r7, #4]
 8000786:	7e09      	ldrb	r1, [r1, #24]
 8000788:	440b      	add	r3, r1
 800078a:	f042 0208 	orr.w	r2, r2, #8
 800078e:	b2d2      	uxtb	r2, r2
 8000790:	701a      	strb	r2, [r3, #0]
            pedState->data[pedState->id] &= ~LIGHT_GREEN_BIT_MASK;
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	687a      	ldr	r2, [r7, #4]
 8000798:	7e12      	ldrb	r2, [r2, #24]
 800079a:	4413      	add	r3, r2
 800079c:	781a      	ldrb	r2, [r3, #0]
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	6879      	ldr	r1, [r7, #4]
 80007a4:	7e09      	ldrb	r1, [r1, #24]
 80007a6:	440b      	add	r3, r1
 80007a8:	f022 0210 	bic.w	r2, r2, #16
 80007ac:	b2d2      	uxtb	r2, r2
 80007ae:	701a      	strb	r2, [r3, #0]
            pedState->data[pedState->id] &= ~LIGHT_INDICATOR_BIT_MASK;
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	687a      	ldr	r2, [r7, #4]
 80007b6:	7e12      	ldrb	r2, [r2, #24]
 80007b8:	4413      	add	r3, r2
 80007ba:	781a      	ldrb	r2, [r3, #0]
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	6879      	ldr	r1, [r7, #4]
 80007c2:	7e09      	ldrb	r1, [r1, #24]
 80007c4:	440b      	add	r3, r1
 80007c6:	f022 0220 	bic.w	r2, r2, #32
 80007ca:	b2d2      	uxtb	r2, r2
 80007cc:	701a      	strb	r2, [r3, #0]
            break;
 80007ce:	e04c      	b.n	800086a <updatePedestrianState+0x114>

        case RED_WITH_INDICATOR:
            pedState->data[pedState->id] |= LIGHT_RED_BIT_MASK;
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	687a      	ldr	r2, [r7, #4]
 80007d6:	7e12      	ldrb	r2, [r2, #24]
 80007d8:	4413      	add	r3, r2
 80007da:	781a      	ldrb	r2, [r3, #0]
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	6879      	ldr	r1, [r7, #4]
 80007e2:	7e09      	ldrb	r1, [r1, #24]
 80007e4:	440b      	add	r3, r1
 80007e6:	f042 0208 	orr.w	r2, r2, #8
 80007ea:	b2d2      	uxtb	r2, r2
 80007ec:	701a      	strb	r2, [r3, #0]
            //  pedState->data[pedState->id] |= LIGHT_INDICATOR_BIT_MASK; // comment out / remove?
            pedState->data[pedState->id] &= ~LIGHT_GREEN_BIT_MASK;
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	687a      	ldr	r2, [r7, #4]
 80007f4:	7e12      	ldrb	r2, [r2, #24]
 80007f6:	4413      	add	r3, r2
 80007f8:	781a      	ldrb	r2, [r3, #0]
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	6879      	ldr	r1, [r7, #4]
 8000800:	7e09      	ldrb	r1, [r1, #24]
 8000802:	440b      	add	r3, r1
 8000804:	f022 0210 	bic.w	r2, r2, #16
 8000808:	b2d2      	uxtb	r2, r2
 800080a:	701a      	strb	r2, [r3, #0]
            break;
 800080c:	e02d      	b.n	800086a <updatePedestrianState+0x114>

        case GREEN:
            pedState->data[pedState->id] |= LIGHT_GREEN_BIT_MASK;
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	687a      	ldr	r2, [r7, #4]
 8000814:	7e12      	ldrb	r2, [r2, #24]
 8000816:	4413      	add	r3, r2
 8000818:	781a      	ldrb	r2, [r3, #0]
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	6879      	ldr	r1, [r7, #4]
 8000820:	7e09      	ldrb	r1, [r1, #24]
 8000822:	440b      	add	r3, r1
 8000824:	f042 0210 	orr.w	r2, r2, #16
 8000828:	b2d2      	uxtb	r2, r2
 800082a:	701a      	strb	r2, [r3, #0]
            pedState->data[pedState->id] &= ~LIGHT_RED_BIT_MASK;
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	687a      	ldr	r2, [r7, #4]
 8000832:	7e12      	ldrb	r2, [r2, #24]
 8000834:	4413      	add	r3, r2
 8000836:	781a      	ldrb	r2, [r3, #0]
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	6879      	ldr	r1, [r7, #4]
 800083e:	7e09      	ldrb	r1, [r1, #24]
 8000840:	440b      	add	r3, r1
 8000842:	f022 0208 	bic.w	r2, r2, #8
 8000846:	b2d2      	uxtb	r2, r2
 8000848:	701a      	strb	r2, [r3, #0]
            pedState->data[pedState->id] &= ~LIGHT_INDICATOR_BIT_MASK;
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	687a      	ldr	r2, [r7, #4]
 8000850:	7e12      	ldrb	r2, [r2, #24]
 8000852:	4413      	add	r3, r2
 8000854:	781a      	ldrb	r2, [r3, #0]
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	6879      	ldr	r1, [r7, #4]
 800085c:	7e09      	ldrb	r1, [r1, #24]
 800085e:	440b      	add	r3, r1
 8000860:	f022 0220 	bic.w	r2, r2, #32
 8000864:	b2d2      	uxtb	r2, r2
 8000866:	701a      	strb	r2, [r3, #0]
            break;
 8000868:	bf00      	nop
    }
    transmitData(pedState->data, pedState->sizeOfData);
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	681a      	ldr	r2, [r3, #0]
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	791b      	ldrb	r3, [r3, #4]
 8000872:	4619      	mov	r1, r3
 8000874:	4610      	mov	r0, r2
 8000876:	f000 fdd7 	bl	8001428 <transmitData>
}
 800087a:	bf00      	nop
 800087c:	3708      	adds	r7, #8
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}

08000882 <initTaskCarSignalState>:

uint8_t noCars(carLightState state);
uint8_t carInActiveLane(carLightState state);
uint8_t carInInertLane(carLightState state);

void initTaskCarSignalState(CarSignalState *carSignalState, uint8_t *data, uint8_t sizeOfData) {
 8000882:	b480      	push	{r7}
 8000884:	b085      	sub	sp, #20
 8000886:	af00      	add	r7, sp, #0
 8000888:	60f8      	str	r0, [r7, #12]
 800088a:	60b9      	str	r1, [r7, #8]
 800088c:	4613      	mov	r3, r2
 800088e:	71fb      	strb	r3, [r7, #7]
	carSignalState->data = data;
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	68ba      	ldr	r2, [r7, #8]
 8000894:	601a      	str	r2, [r3, #0]
	carSignalState->sizeOfData = sizeOfData;
 8000896:	68fb      	ldr	r3, [r7, #12]
 8000898:	79fa      	ldrb	r2, [r7, #7]
 800089a:	711a      	strb	r2, [r3, #4]
	carSignalState->currentState = VERTICAL_GREEN;
 800089c:	68fb      	ldr	r3, [r7, #12]
 800089e:	2200      	movs	r2, #0
 80008a0:	715a      	strb	r2, [r3, #5]
	carSignalState->nextState = VERTICAL_GREEN;
 80008a2:	68fb      	ldr	r3, [r7, #12]
 80008a4:	2200      	movs	r2, #0
 80008a6:	719a      	strb	r2, [r3, #6]
	carSignalState->previousState = VERTICAL_GREEN;
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	2200      	movs	r2, #0
 80008ac:	71da      	strb	r2, [r3, #7]
	carSignalState->stateStartTime = 0;
 80008ae:	68fb      	ldr	r3, [r7, #12]
 80008b0:	2200      	movs	r2, #0
 80008b2:	609a      	str	r2, [r3, #8]
	carSignalState->pedestrianRequestTime = 0;
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	2200      	movs	r2, #0
 80008b8:	60da      	str	r2, [r3, #12]
	carSignalState->carInertLaneArriveTime = 0;
 80008ba:	68fb      	ldr	r3, [r7, #12]
 80008bc:	2200      	movs	r2, #0
 80008be:	611a      	str	r2, [r3, #16]
	carSignalState->noCarsTime = 0;
 80008c0:	68fb      	ldr	r3, [r7, #12]
 80008c2:	2200      	movs	r2, #0
 80008c4:	615a      	str	r2, [r3, #20]
}
 80008c6:	bf00      	nop
 80008c8:	3714      	adds	r7, #20
 80008ca:	46bd      	mov	sp, r7
 80008cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d0:	4770      	bx	lr

080008d2 <noCars>:

uint8_t noCars(carLightState state) {
 80008d2:	b580      	push	{r7, lr}
 80008d4:	b082      	sub	sp, #8
 80008d6:	af00      	add	r7, sp, #0
 80008d8:	4603      	mov	r3, r0
 80008da:	71fb      	strb	r3, [r7, #7]
	return !carInActiveLane(state) && !carInInertLane(state);
 80008dc:	79fb      	ldrb	r3, [r7, #7]
 80008de:	4618      	mov	r0, r3
 80008e0:	f000 f812 	bl	8000908 <carInActiveLane>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d108      	bne.n	80008fc <noCars+0x2a>
 80008ea:	79fb      	ldrb	r3, [r7, #7]
 80008ec:	4618      	mov	r0, r3
 80008ee:	f000 f849 	bl	8000984 <carInInertLane>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d101      	bne.n	80008fc <noCars+0x2a>
 80008f8:	2301      	movs	r3, #1
 80008fa:	e000      	b.n	80008fe <noCars+0x2c>
 80008fc:	2300      	movs	r3, #0
 80008fe:	b2db      	uxtb	r3, r3
}
 8000900:	4618      	mov	r0, r3
 8000902:	3708      	adds	r7, #8
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}

08000908 <carInActiveLane>:

uint8_t carInActiveLane(carLightState state) {
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0
 800090e:	4603      	mov	r3, r0
 8000910:	71fb      	strb	r3, [r7, #7]
	switch (state) {
 8000912:	79fb      	ldrb	r3, [r7, #7]
 8000914:	2b00      	cmp	r3, #0
 8000916:	d002      	beq.n	800091e <carInActiveLane+0x16>
 8000918:	2b02      	cmp	r3, #2
 800091a:	d016      	beq.n	800094a <carInActiveLane+0x42>
 800091c:	e029      	b.n	8000972 <carInActiveLane+0x6a>
	case VERTICAL_GREEN:
		return (HAL_GPIO_ReadPin(TL2_Car_GPIO_Port, TL2_Car_Pin) == GPIO_PIN_RESET ||
 800091e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000922:	4816      	ldr	r0, [pc, #88]	@ (800097c <carInActiveLane+0x74>)
 8000924:	f001 f9f2 	bl	8001d0c <HAL_GPIO_ReadPin>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d008      	beq.n	8000940 <carInActiveLane+0x38>
				HAL_GPIO_ReadPin(TL4_Car_GPIO_Port, TL4_Car_Pin) == GPIO_PIN_RESET);
 800092e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000932:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000936:	f001 f9e9 	bl	8001d0c <HAL_GPIO_ReadPin>
 800093a:	4603      	mov	r3, r0
		return (HAL_GPIO_ReadPin(TL2_Car_GPIO_Port, TL2_Car_Pin) == GPIO_PIN_RESET ||
 800093c:	2b00      	cmp	r3, #0
 800093e:	d101      	bne.n	8000944 <carInActiveLane+0x3c>
 8000940:	2301      	movs	r3, #1
 8000942:	e000      	b.n	8000946 <carInActiveLane+0x3e>
 8000944:	2300      	movs	r3, #0
 8000946:	b2db      	uxtb	r3, r3
 8000948:	e014      	b.n	8000974 <carInActiveLane+0x6c>
	case VERTICAL_RED:
		return (HAL_GPIO_ReadPin(TL1_Car_GPIO_Port, TL1_Car_Pin) == GPIO_PIN_RESET ||
 800094a:	2110      	movs	r1, #16
 800094c:	480c      	ldr	r0, [pc, #48]	@ (8000980 <carInActiveLane+0x78>)
 800094e:	f001 f9dd 	bl	8001d0c <HAL_GPIO_ReadPin>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d007      	beq.n	8000968 <carInActiveLane+0x60>
				HAL_GPIO_ReadPin(TL3_Car_GPIO_Port, TL3_Car_Pin) == GPIO_PIN_RESET);
 8000958:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800095c:	4807      	ldr	r0, [pc, #28]	@ (800097c <carInActiveLane+0x74>)
 800095e:	f001 f9d5 	bl	8001d0c <HAL_GPIO_ReadPin>
 8000962:	4603      	mov	r3, r0
		return (HAL_GPIO_ReadPin(TL1_Car_GPIO_Port, TL1_Car_Pin) == GPIO_PIN_RESET ||
 8000964:	2b00      	cmp	r3, #0
 8000966:	d101      	bne.n	800096c <carInActiveLane+0x64>
 8000968:	2301      	movs	r3, #1
 800096a:	e000      	b.n	800096e <carInActiveLane+0x66>
 800096c:	2300      	movs	r3, #0
 800096e:	b2db      	uxtb	r3, r3
 8000970:	e000      	b.n	8000974 <carInActiveLane+0x6c>
	default:
		return 0;
 8000972:	2300      	movs	r3, #0
	}
}
 8000974:	4618      	mov	r0, r3
 8000976:	3708      	adds	r7, #8
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	48000400 	.word	0x48000400
 8000980:	48000800 	.word	0x48000800

08000984 <carInInertLane>:

uint8_t carInInertLane(carLightState state) {
 8000984:	b580      	push	{r7, lr}
 8000986:	b082      	sub	sp, #8
 8000988:	af00      	add	r7, sp, #0
 800098a:	4603      	mov	r3, r0
 800098c:	71fb      	strb	r3, [r7, #7]
	switch (state) {
 800098e:	79fb      	ldrb	r3, [r7, #7]
 8000990:	2b00      	cmp	r3, #0
 8000992:	d002      	beq.n	800099a <carInInertLane+0x16>
 8000994:	2b02      	cmp	r3, #2
 8000996:	d014      	beq.n	80009c2 <carInInertLane+0x3e>
 8000998:	e029      	b.n	80009ee <carInInertLane+0x6a>
	case VERTICAL_GREEN:
		return (HAL_GPIO_ReadPin(TL1_Car_GPIO_Port, TL1_Car_Pin) == GPIO_PIN_RESET ||
 800099a:	2110      	movs	r1, #16
 800099c:	4816      	ldr	r0, [pc, #88]	@ (80009f8 <carInInertLane+0x74>)
 800099e:	f001 f9b5 	bl	8001d0c <HAL_GPIO_ReadPin>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d007      	beq.n	80009b8 <carInInertLane+0x34>
				HAL_GPIO_ReadPin(TL3_Car_GPIO_Port, TL3_Car_Pin) == GPIO_PIN_RESET);
 80009a8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80009ac:	4813      	ldr	r0, [pc, #76]	@ (80009fc <carInInertLane+0x78>)
 80009ae:	f001 f9ad 	bl	8001d0c <HAL_GPIO_ReadPin>
 80009b2:	4603      	mov	r3, r0
		return (HAL_GPIO_ReadPin(TL1_Car_GPIO_Port, TL1_Car_Pin) == GPIO_PIN_RESET ||
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d101      	bne.n	80009bc <carInInertLane+0x38>
 80009b8:	2301      	movs	r3, #1
 80009ba:	e000      	b.n	80009be <carInInertLane+0x3a>
 80009bc:	2300      	movs	r3, #0
 80009be:	b2db      	uxtb	r3, r3
 80009c0:	e016      	b.n	80009f0 <carInInertLane+0x6c>
	case VERTICAL_RED:
		return (HAL_GPIO_ReadPin(TL2_Car_GPIO_Port, TL2_Car_Pin) == GPIO_PIN_RESET ||
 80009c2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009c6:	480d      	ldr	r0, [pc, #52]	@ (80009fc <carInInertLane+0x78>)
 80009c8:	f001 f9a0 	bl	8001d0c <HAL_GPIO_ReadPin>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d008      	beq.n	80009e4 <carInInertLane+0x60>
				HAL_GPIO_ReadPin(TL4_Car_GPIO_Port, TL4_Car_Pin) == GPIO_PIN_RESET);
 80009d2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80009d6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009da:	f001 f997 	bl	8001d0c <HAL_GPIO_ReadPin>
 80009de:	4603      	mov	r3, r0
		return (HAL_GPIO_ReadPin(TL2_Car_GPIO_Port, TL2_Car_Pin) == GPIO_PIN_RESET ||
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d101      	bne.n	80009e8 <carInInertLane+0x64>
 80009e4:	2301      	movs	r3, #1
 80009e6:	e000      	b.n	80009ea <carInInertLane+0x66>
 80009e8:	2300      	movs	r3, #0
 80009ea:	b2db      	uxtb	r3, r3
 80009ec:	e000      	b.n	80009f0 <carInInertLane+0x6c>
	default:
		return 0;
 80009ee:	2300      	movs	r3, #0
	}
}
 80009f0:	4618      	mov	r0, r3
 80009f2:	3708      	adds	r7, #8
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	48000800 	.word	0x48000800
 80009fc:	48000400 	.word	0x48000400

08000a00 <taskCarSignalLogic>:

void taskCarSignalLogic(CarSignalState *s, pedestrianLightState pedestrianStateVertical, pedestrianLightState pedestrianStateHorizontal) {
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b084      	sub	sp, #16
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
 8000a08:	460b      	mov	r3, r1
 8000a0a:	70fb      	strb	r3, [r7, #3]
 8000a0c:	4613      	mov	r3, r2
 8000a0e:	70bb      	strb	r3, [r7, #2]
	TickType_t currentTime = xTaskGetTickCount();
 8000a10:	f005 fdb6 	bl	8006580 <xTaskGetTickCount>
 8000a14:	60f8      	str	r0, [r7, #12]
	TickType_t elapsedTime = currentTime - s->stateStartTime;
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	689b      	ldr	r3, [r3, #8]
 8000a1a:	68fa      	ldr	r2, [r7, #12]
 8000a1c:	1ad3      	subs	r3, r2, r3
 8000a1e:	60bb      	str	r3, [r7, #8]

	switch (s->currentState) {
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	795b      	ldrb	r3, [r3, #5]
 8000a24:	2b02      	cmp	r3, #2
 8000a26:	f000 80a8 	beq.w	8000b7a <taskCarSignalLogic+0x17a>
 8000a2a:	2b02      	cmp	r3, #2
 8000a2c:	f300 812e 	bgt.w	8000c8c <taskCarSignalLogic+0x28c>
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d003      	beq.n	8000a3c <taskCarSignalLogic+0x3c>
 8000a34:	2b01      	cmp	r3, #1
 8000a36:	f000 8085 	beq.w	8000b44 <taskCarSignalLogic+0x144>
 8000a3a:	e127      	b.n	8000c8c <taskCarSignalLogic+0x28c>
		case VERTICAL_GREEN:
			if (pedestrianStateHorizontal == GREEN || pedestrianStateHorizontal == RED_WITH_INDICATOR)
 8000a3c:	78bb      	ldrb	r3, [r7, #2]
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	f000 8124 	beq.w	8000c8c <taskCarSignalLogic+0x28c>
 8000a44:	78bb      	ldrb	r3, [r7, #2]
 8000a46:	2b01      	cmp	r3, #1
 8000a48:	f000 8120 	beq.w	8000c8c <taskCarSignalLogic+0x28c>
				break;
			else if (pedestrianStateVertical == RED_WITH_INDICATOR) {
 8000a4c:	78fb      	ldrb	r3, [r7, #3]
 8000a4e:	2b01      	cmp	r3, #1
 8000a50:	d113      	bne.n	8000a7a <taskCarSignalLogic+0x7a>
				if (s->pedestrianRequestTime == 0)
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	68db      	ldr	r3, [r3, #12]
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d102      	bne.n	8000a60 <taskCarSignalLogic+0x60>
					s->pedestrianRequestTime = currentTime;
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	68fa      	ldr	r2, [r7, #12]
 8000a5e:	60da      	str	r2, [r3, #12]
				if (currentTime - s->pedestrianRequestTime < pdMS_TO_TICKS(pedestrianDelay) - pdMS_TO_TICKS(yellowDelay))
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	68db      	ldr	r3, [r3, #12]
 8000a64:	68fa      	ldr	r2, [r7, #12]
 8000a66:	1ad3      	subs	r3, r2, r3
 8000a68:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8000a6c:	4293      	cmp	r3, r2
 8000a6e:	f240 8106 	bls.w	8000c7e <taskCarSignalLogic+0x27e>
					break;
				s->pedestrianRequestTime = 0;
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	2200      	movs	r2, #0
 8000a76:	60da      	str	r2, [r3, #12]
 8000a78:	e054      	b.n	8000b24 <taskCarSignalLogic+0x124>
			}
			// R2.4
			else if (noCars(s->currentState)) {
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	795b      	ldrb	r3, [r3, #5]
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f7ff ff27 	bl	80008d2 <noCars>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d012      	beq.n	8000ab0 <taskCarSignalLogic+0xb0>
				s->carInertLaneArriveTime = 0;
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	611a      	str	r2, [r3, #16]
				if (s->noCarsTime == 0)
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	695b      	ldr	r3, [r3, #20]
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d102      	bne.n	8000a9e <taskCarSignalLogic+0x9e>
					s->noCarsTime = currentTime;
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	68fa      	ldr	r2, [r7, #12]
 8000a9c:	615a      	str	r2, [r3, #20]
				if (currentTime - s->noCarsTime < pdMS_TO_TICKS(greenDelay))
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	695b      	ldr	r3, [r3, #20]
 8000aa2:	68fa      	ldr	r2, [r7, #12]
 8000aa4:	1ad3      	subs	r3, r2, r3
 8000aa6:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000aaa:	4293      	cmp	r3, r2
 8000aac:	d83a      	bhi.n	8000b24 <taskCarSignalLogic+0x124>
					break;
 8000aae:	e0ed      	b.n	8000c8c <taskCarSignalLogic+0x28c>
			// R2.5
			} else if (carInActiveLane(s->currentState) && !carInInertLane(s->currentState)) {
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	795b      	ldrb	r3, [r3, #5]
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f7ff ff27 	bl	8000908 <carInActiveLane>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d00e      	beq.n	8000ade <taskCarSignalLogic+0xde>
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	795b      	ldrb	r3, [r3, #5]
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f7ff ff5d 	bl	8000984 <carInInertLane>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d106      	bne.n	8000ade <taskCarSignalLogic+0xde>
				s->carInertLaneArriveTime = 0;
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	611a      	str	r2, [r3, #16]
				s->noCarsTime = 0;
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	2200      	movs	r2, #0
 8000ada:	615a      	str	r2, [r3, #20]
				break;
 8000adc:	e0d6      	b.n	8000c8c <taskCarSignalLogic+0x28c>
			// R2.6
			} else if (carInInertLane(s->currentState) && carInActiveLane(s->currentState)) {
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	795b      	ldrb	r3, [r3, #5]
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f7ff ff4e 	bl	8000984 <carInInertLane>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d01a      	beq.n	8000b24 <taskCarSignalLogic+0x124>
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	795b      	ldrb	r3, [r3, #5]
 8000af2:	4618      	mov	r0, r3
 8000af4:	f7ff ff08 	bl	8000908 <carInActiveLane>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d012      	beq.n	8000b24 <taskCarSignalLogic+0x124>
				s->noCarsTime = 0;
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	2200      	movs	r2, #0
 8000b02:	615a      	str	r2, [r3, #20]
				if (s->carInertLaneArriveTime == 0)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	691b      	ldr	r3, [r3, #16]
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d102      	bne.n	8000b12 <taskCarSignalLogic+0x112>
					s->carInertLaneArriveTime = currentTime;
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	68fa      	ldr	r2, [r7, #12]
 8000b10:	611a      	str	r2, [r3, #16]
				if (currentTime - s->carInertLaneArriveTime < pdMS_TO_TICKS(redDelayMax))
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	691b      	ldr	r3, [r3, #16]
 8000b16:	68fa      	ldr	r2, [r7, #12]
 8000b18:	1ad3      	subs	r3, r2, r3
 8000b1a:	f241 3287 	movw	r2, #4999	@ 0x1387
 8000b1e:	4293      	cmp	r3, r2
 8000b20:	f240 80af 	bls.w	8000c82 <taskCarSignalLogic+0x282>
					break;
			} // IMPLICIT R2.7

			s->previousState = VERTICAL_GREEN;
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	2200      	movs	r2, #0
 8000b28:	71da      	strb	r2, [r3, #7]
			s->nextState = YELLOW;
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	719a      	strb	r2, [r3, #6]
			s->carInertLaneArriveTime = 0;
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	2200      	movs	r2, #0
 8000b34:	611a      	str	r2, [r3, #16]
			s->noCarsTime = 0;
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	2200      	movs	r2, #0
 8000b3a:	615a      	str	r2, [r3, #20]
			s->stateStartTime = currentTime;
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	68fa      	ldr	r2, [r7, #12]
 8000b40:	609a      	str	r2, [r3, #8]
		break;
 8000b42:	e0a3      	b.n	8000c8c <taskCarSignalLogic+0x28c>

		case YELLOW:
			if (elapsedTime >= pdMS_TO_TICKS(yellowDelay)) {
 8000b44:	68bb      	ldr	r3, [r7, #8]
 8000b46:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8000b4a:	4293      	cmp	r3, r2
 8000b4c:	d911      	bls.n	8000b72 <taskCarSignalLogic+0x172>
				if (s->previousState == VERTICAL_GREEN)
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	79db      	ldrb	r3, [r3, #7]
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d103      	bne.n	8000b5e <taskCarSignalLogic+0x15e>
					s->nextState = VERTICAL_RED;
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	2202      	movs	r2, #2
 8000b5a:	719a      	strb	r2, [r3, #6]
 8000b5c:	e002      	b.n	8000b64 <taskCarSignalLogic+0x164>
				else
					s->nextState = VERTICAL_GREEN;
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	2200      	movs	r2, #0
 8000b62:	719a      	strb	r2, [r3, #6]
				s->previousState = YELLOW;
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	2201      	movs	r2, #1
 8000b68:	71da      	strb	r2, [r3, #7]
				s->stateStartTime = currentTime;
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	68fa      	ldr	r2, [r7, #12]
 8000b6e:	609a      	str	r2, [r3, #8]
			} else
				s->nextState = YELLOW;
			break;
 8000b70:	e08c      	b.n	8000c8c <taskCarSignalLogic+0x28c>
				s->nextState = YELLOW;
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	2201      	movs	r2, #1
 8000b76:	719a      	strb	r2, [r3, #6]
			break;
 8000b78:	e088      	b.n	8000c8c <taskCarSignalLogic+0x28c>

		case VERTICAL_RED:
			if (pedestrianStateVertical == GREEN || pedestrianStateVertical == RED_WITH_INDICATOR)
 8000b7a:	78fb      	ldrb	r3, [r7, #3]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	f000 8085 	beq.w	8000c8c <taskCarSignalLogic+0x28c>
 8000b82:	78fb      	ldrb	r3, [r7, #3]
 8000b84:	2b01      	cmp	r3, #1
 8000b86:	f000 8081 	beq.w	8000c8c <taskCarSignalLogic+0x28c>
				break;
			else if (pedestrianStateHorizontal == RED_WITH_INDICATOR) {
 8000b8a:	78bb      	ldrb	r3, [r7, #2]
 8000b8c:	2b01      	cmp	r3, #1
 8000b8e:	d112      	bne.n	8000bb6 <taskCarSignalLogic+0x1b6>
				if (s->pedestrianRequestTime == 0)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	68db      	ldr	r3, [r3, #12]
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d102      	bne.n	8000b9e <taskCarSignalLogic+0x19e>
					s->pedestrianRequestTime = currentTime;
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	68fa      	ldr	r2, [r7, #12]
 8000b9c:	60da      	str	r2, [r3, #12]
				if (currentTime - s->pedestrianRequestTime < pdMS_TO_TICKS(pedestrianDelay) - pdMS_TO_TICKS(yellowDelay))
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	68db      	ldr	r3, [r3, #12]
 8000ba2:	68fa      	ldr	r2, [r7, #12]
 8000ba4:	1ad3      	subs	r3, r2, r3
 8000ba6:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8000baa:	4293      	cmp	r3, r2
 8000bac:	d96b      	bls.n	8000c86 <taskCarSignalLogic+0x286>
					break;
				s->pedestrianRequestTime = 0;
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	60da      	str	r2, [r3, #12]
 8000bb4:	e053      	b.n	8000c5e <taskCarSignalLogic+0x25e>
			}
			// R2.4
			else if (noCars(s->currentState)) {
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	795b      	ldrb	r3, [r3, #5]
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f7ff fe89 	bl	80008d2 <noCars>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d012      	beq.n	8000bec <taskCarSignalLogic+0x1ec>
				s->carInertLaneArriveTime = 0;
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	2200      	movs	r2, #0
 8000bca:	611a      	str	r2, [r3, #16]
				if (s->noCarsTime == 0)
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	695b      	ldr	r3, [r3, #20]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d102      	bne.n	8000bda <taskCarSignalLogic+0x1da>
					s->noCarsTime = currentTime;
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	68fa      	ldr	r2, [r7, #12]
 8000bd8:	615a      	str	r2, [r3, #20]
				if (currentTime - s->noCarsTime < pdMS_TO_TICKS(greenDelay))
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	695b      	ldr	r3, [r3, #20]
 8000bde:	68fa      	ldr	r2, [r7, #12]
 8000be0:	1ad3      	subs	r3, r2, r3
 8000be2:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000be6:	4293      	cmp	r3, r2
 8000be8:	d839      	bhi.n	8000c5e <taskCarSignalLogic+0x25e>
					break;
 8000bea:	e04f      	b.n	8000c8c <taskCarSignalLogic+0x28c>
			// R2.5
			} else if (carInActiveLane(s->currentState) && !carInInertLane(s->currentState)) {
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	795b      	ldrb	r3, [r3, #5]
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f7ff fe89 	bl	8000908 <carInActiveLane>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d00e      	beq.n	8000c1a <taskCarSignalLogic+0x21a>
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	795b      	ldrb	r3, [r3, #5]
 8000c00:	4618      	mov	r0, r3
 8000c02:	f7ff febf 	bl	8000984 <carInInertLane>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d106      	bne.n	8000c1a <taskCarSignalLogic+0x21a>
				s->carInertLaneArriveTime = 0;
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	2200      	movs	r2, #0
 8000c10:	611a      	str	r2, [r3, #16]
				s->noCarsTime = 0;
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	2200      	movs	r2, #0
 8000c16:	615a      	str	r2, [r3, #20]
				break;
 8000c18:	e038      	b.n	8000c8c <taskCarSignalLogic+0x28c>
			// R2.6
			} else if (carInInertLane(s->currentState) && carInActiveLane(s->currentState)) {
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	795b      	ldrb	r3, [r3, #5]
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f7ff feb0 	bl	8000984 <carInInertLane>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d019      	beq.n	8000c5e <taskCarSignalLogic+0x25e>
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	795b      	ldrb	r3, [r3, #5]
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f7ff fe6a 	bl	8000908 <carInActiveLane>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d011      	beq.n	8000c5e <taskCarSignalLogic+0x25e>
				s->noCarsTime = 0;
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	615a      	str	r2, [r3, #20]
				if (s->carInertLaneArriveTime == 0)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	691b      	ldr	r3, [r3, #16]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d102      	bne.n	8000c4e <taskCarSignalLogic+0x24e>
					s->carInertLaneArriveTime = currentTime;
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	68fa      	ldr	r2, [r7, #12]
 8000c4c:	611a      	str	r2, [r3, #16]
				if (currentTime - s->carInertLaneArriveTime < pdMS_TO_TICKS(redDelayMax))
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	691b      	ldr	r3, [r3, #16]
 8000c52:	68fa      	ldr	r2, [r7, #12]
 8000c54:	1ad3      	subs	r3, r2, r3
 8000c56:	f241 3287 	movw	r2, #4999	@ 0x1387
 8000c5a:	4293      	cmp	r3, r2
 8000c5c:	d915      	bls.n	8000c8a <taskCarSignalLogic+0x28a>
					break;
			} // IMPLICIT R2.7

			s->previousState = VERTICAL_RED;
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	2202      	movs	r2, #2
 8000c62:	71da      	strb	r2, [r3, #7]
			s->nextState = YELLOW;
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	2201      	movs	r2, #1
 8000c68:	719a      	strb	r2, [r3, #6]
			s->carInertLaneArriveTime = 0;
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	611a      	str	r2, [r3, #16]
			s->noCarsTime = 0;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	2200      	movs	r2, #0
 8000c74:	615a      	str	r2, [r3, #20]
			s->stateStartTime = currentTime;
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	68fa      	ldr	r2, [r7, #12]
 8000c7a:	609a      	str	r2, [r3, #8]
		break;
 8000c7c:	e006      	b.n	8000c8c <taskCarSignalLogic+0x28c>
					break;
 8000c7e:	bf00      	nop
 8000c80:	e004      	b.n	8000c8c <taskCarSignalLogic+0x28c>
					break;
 8000c82:	bf00      	nop
 8000c84:	e002      	b.n	8000c8c <taskCarSignalLogic+0x28c>
					break;
 8000c86:	bf00      	nop
 8000c88:	e000      	b.n	8000c8c <taskCarSignalLogic+0x28c>
					break;
 8000c8a:	bf00      	nop
	}
	updateCarState(s);
 8000c8c:	6878      	ldr	r0, [r7, #4]
 8000c8e:	f7ff fc17 	bl	80004c0 <updateCarState>
	s->currentState = s->nextState;
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	799a      	ldrb	r2, [r3, #6]
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	715a      	strb	r2, [r3, #5]
}
 8000c9a:	bf00      	nop
 8000c9c:	3710      	adds	r7, #16
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}

08000ca2 <initPedestrianState>:
#include <string.h>
#include "trafficTypes.h"
#include "FreeRTOS.h"
#include "task.h"

void initPedestrianState(PedestrianState *pedState, uint8_t *data, uint8_t sizeOfData, uint8_t id) {
 8000ca2:	b480      	push	{r7}
 8000ca4:	b085      	sub	sp, #20
 8000ca6:	af00      	add	r7, sp, #0
 8000ca8:	60f8      	str	r0, [r7, #12]
 8000caa:	60b9      	str	r1, [r7, #8]
 8000cac:	4611      	mov	r1, r2
 8000cae:	461a      	mov	r2, r3
 8000cb0:	460b      	mov	r3, r1
 8000cb2:	71fb      	strb	r3, [r7, #7]
 8000cb4:	4613      	mov	r3, r2
 8000cb6:	71bb      	strb	r3, [r7, #6]
	pedState->data = data;
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	68ba      	ldr	r2, [r7, #8]
 8000cbc:	601a      	str	r2, [r3, #0]
	pedState->sizeOfData = sizeOfData;
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	79fa      	ldrb	r2, [r7, #7]
 8000cc2:	711a      	strb	r2, [r3, #4]
	pedState->currentState = RED;
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	2202      	movs	r2, #2
 8000cc8:	715a      	strb	r2, [r3, #5]
	pedState->nextState = RED;
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	2202      	movs	r2, #2
 8000cce:	719a      	strb	r2, [r3, #6]
	pedState->carSignalState = NULL;
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	609a      	str	r2, [r3, #8]
	pedState->stateStartTime = 0;
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	2200      	movs	r2, #0
 8000cda:	60da      	str	r2, [r3, #12]
	pedState->lastToggleTime = pedState->stateStartTime;
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	68da      	ldr	r2, [r3, #12]
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	611a      	str	r2, [r3, #16]
	pedState->id = id;
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	79ba      	ldrb	r2, [r7, #6]
 8000ce8:	761a      	strb	r2, [r3, #24]
}
 8000cea:	bf00      	nop
 8000cec:	3714      	adds	r7, #20
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr
	...

08000cf8 <crossWalkButtonPressed>:

int crossWalkButtonPressed(uint8_t id) {
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b084      	sub	sp, #16
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	4603      	mov	r3, r0
 8000d00:	71fb      	strb	r3, [r7, #7]
	switch (id) {
 8000d02:	79fb      	ldrb	r3, [r7, #7]
 8000d04:	2b01      	cmp	r3, #1
 8000d06:	d002      	beq.n	8000d0e <crossWalkButtonPressed+0x16>
 8000d08:	2b02      	cmp	r3, #2
 8000d0a:	d014      	beq.n	8000d36 <crossWalkButtonPressed+0x3e>
 8000d0c:	e029      	b.n	8000d62 <crossWalkButtonPressed+0x6a>
		case 1:
			for (int x = 10000; x > 0; x--) {
 8000d0e:	f242 7310 	movw	r3, #10000	@ 0x2710
 8000d12:	60fb      	str	r3, [r7, #12]
 8000d14:	e00b      	b.n	8000d2e <crossWalkButtonPressed+0x36>
				if (HAL_GPIO_ReadPin(PL2_Switch_GPIO_Port, PL2_Switch_Pin) == GPIO_PIN_RESET) {
 8000d16:	2180      	movs	r1, #128	@ 0x80
 8000d18:	4814      	ldr	r0, [pc, #80]	@ (8000d6c <crossWalkButtonPressed+0x74>)
 8000d1a:	f000 fff7 	bl	8001d0c <HAL_GPIO_ReadPin>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d101      	bne.n	8000d28 <crossWalkButtonPressed+0x30>
					return 1;
 8000d24:	2301      	movs	r3, #1
 8000d26:	e01d      	b.n	8000d64 <crossWalkButtonPressed+0x6c>
			for (int x = 10000; x > 0; x--) {
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	3b01      	subs	r3, #1
 8000d2c:	60fb      	str	r3, [r7, #12]
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	dcf0      	bgt.n	8000d16 <crossWalkButtonPressed+0x1e>
				}
			}
			break;
 8000d34:	e015      	b.n	8000d62 <crossWalkButtonPressed+0x6a>
		case 2:
			for (int x = 10000; x > 0; x--) {
 8000d36:	f242 7310 	movw	r3, #10000	@ 0x2710
 8000d3a:	60bb      	str	r3, [r7, #8]
 8000d3c:	e00d      	b.n	8000d5a <crossWalkButtonPressed+0x62>
				if (HAL_GPIO_ReadPin(PL1_Switch_GPIO_Port, PL1_Switch_Pin) == GPIO_PIN_RESET) {
 8000d3e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000d42:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d46:	f000 ffe1 	bl	8001d0c <HAL_GPIO_ReadPin>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d101      	bne.n	8000d54 <crossWalkButtonPressed+0x5c>
					return 2;
 8000d50:	2302      	movs	r3, #2
 8000d52:	e007      	b.n	8000d64 <crossWalkButtonPressed+0x6c>
			for (int x = 10000; x > 0; x--) {
 8000d54:	68bb      	ldr	r3, [r7, #8]
 8000d56:	3b01      	subs	r3, #1
 8000d58:	60bb      	str	r3, [r7, #8]
 8000d5a:	68bb      	ldr	r3, [r7, #8]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	dcee      	bgt.n	8000d3e <crossWalkButtonPressed+0x46>
				}
			}
			break;
 8000d60:	bf00      	nop
	}
	return 0;
 8000d62:	2300      	movs	r3, #0
}
 8000d64:	4618      	mov	r0, r3
 8000d66:	3710      	adds	r7, #16
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	48000400 	.word	0x48000400

08000d70 <processPedestrianState>:

void processPedestrianState(PedestrianState *pedState, carLightState carState) {
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b084      	sub	sp, #16
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
 8000d78:	460b      	mov	r3, r1
 8000d7a:	70fb      	strb	r3, [r7, #3]
	TickType_t currentTime = xTaskGetTickCount();
 8000d7c:	f005 fc00 	bl	8006580 <xTaskGetTickCount>
 8000d80:	60f8      	str	r0, [r7, #12]
	TickType_t elapsedTime = currentTime - pedState->stateStartTime;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	68db      	ldr	r3, [r3, #12]
 8000d86:	68fa      	ldr	r2, [r7, #12]
 8000d88:	1ad3      	subs	r3, r2, r3
 8000d8a:	60bb      	str	r3, [r7, #8]

	switch (pedState->currentState) {
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	795b      	ldrb	r3, [r3, #5]
 8000d90:	2b02      	cmp	r3, #2
 8000d92:	d03f      	beq.n	8000e14 <processPedestrianState+0xa4>
 8000d94:	2b02      	cmp	r3, #2
 8000d96:	dc58      	bgt.n	8000e4a <processPedestrianState+0xda>
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d002      	beq.n	8000da2 <processPedestrianState+0x32>
 8000d9c:	2b01      	cmp	r3, #1
 8000d9e:	d00b      	beq.n	8000db8 <processPedestrianState+0x48>
 8000da0:	e053      	b.n	8000e4a <processPedestrianState+0xda>
		case GREEN:
			if (elapsedTime >= pdMS_TO_TICKS(walkingDelay)) {
 8000da2:	68bb      	ldr	r3, [r7, #8]
 8000da4:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 8000da8:	d356      	bcc.n	8000e58 <processPedestrianState+0xe8>
				pedState->nextState = RED;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	2202      	movs	r2, #2
 8000dae:	719a      	strb	r2, [r3, #6]
				pedState->stateStartTime = currentTime;
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	68fa      	ldr	r2, [r7, #12]
 8000db4:	60da      	str	r2, [r3, #12]
			}
			break;
 8000db6:	e04f      	b.n	8000e58 <processPedestrianState+0xe8>
		case RED_WITH_INDICATOR:
			if ((currentTime - pedState->lastToggleTime) >= pdMS_TO_TICKS(toggleFreq)) {
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	691b      	ldr	r3, [r3, #16]
 8000dbc:	68fa      	ldr	r2, [r7, #12]
 8000dbe:	1ad3      	subs	r3, r2, r3
 8000dc0:	f5b3 7faf 	cmp.w	r3, #350	@ 0x15e
 8000dc4:	d305      	bcc.n	8000dd2 <processPedestrianState+0x62>
				toggleIndicatorLight(pedState);
 8000dc6:	6878      	ldr	r0, [r7, #4]
 8000dc8:	f7ff fca6 	bl	8000718 <toggleIndicatorLight>
				pedState->lastToggleTime = currentTime;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	68fa      	ldr	r2, [r7, #12]
 8000dd0:	611a      	str	r2, [r3, #16]
			}
			if (elapsedTime >= pdMS_TO_TICKS(pedestrianDelay)) {
 8000dd2:	68bb      	ldr	r3, [r7, #8]
 8000dd4:	f241 726f 	movw	r2, #5999	@ 0x176f
 8000dd8:	4293      	cmp	r3, r2
 8000dda:	d93f      	bls.n	8000e5c <processPedestrianState+0xec>
				if (pedState->id == 1) {
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	7e1b      	ldrb	r3, [r3, #24]
 8000de0:	2b01      	cmp	r3, #1
 8000de2:	d109      	bne.n	8000df8 <processPedestrianState+0x88>
					if (carState == VERTICAL_RED) {
 8000de4:	78fb      	ldrb	r3, [r7, #3]
 8000de6:	2b02      	cmp	r3, #2
 8000de8:	d138      	bne.n	8000e5c <processPedestrianState+0xec>
						pedState->nextState = GREEN;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	2200      	movs	r2, #0
 8000dee:	719a      	strb	r2, [r3, #6]
						pedState->stateStartTime = currentTime;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	68fa      	ldr	r2, [r7, #12]
 8000df4:	60da      	str	r2, [r3, #12]
						pedState->nextState = GREEN;
						pedState->stateStartTime = currentTime;
					}
				}
			}
			break;
 8000df6:	e031      	b.n	8000e5c <processPedestrianState+0xec>
				} else if (pedState->id == 2) {
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	7e1b      	ldrb	r3, [r3, #24]
 8000dfc:	2b02      	cmp	r3, #2
 8000dfe:	d12d      	bne.n	8000e5c <processPedestrianState+0xec>
					if (carState == VERTICAL_GREEN) {
 8000e00:	78fb      	ldrb	r3, [r7, #3]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d12a      	bne.n	8000e5c <processPedestrianState+0xec>
						pedState->nextState = GREEN;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	2200      	movs	r2, #0
 8000e0a:	719a      	strb	r2, [r3, #6]
						pedState->stateStartTime = currentTime;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	68fa      	ldr	r2, [r7, #12]
 8000e10:	60da      	str	r2, [r3, #12]
			break;
 8000e12:	e023      	b.n	8000e5c <processPedestrianState+0xec>
		case RED:
			if (crossWalkButtonPressed(pedState->id) && *pedState->carSignalState != YELLOW) {
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	7e1b      	ldrb	r3, [r3, #24]
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f7ff ff6d 	bl	8000cf8 <crossWalkButtonPressed>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d00e      	beq.n	8000e42 <processPedestrianState+0xd2>
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	689b      	ldr	r3, [r3, #8]
 8000e28:	781b      	ldrb	r3, [r3, #0]
 8000e2a:	2b01      	cmp	r3, #1
 8000e2c:	d009      	beq.n	8000e42 <processPedestrianState+0xd2>
				pedState->nextState = RED_WITH_INDICATOR;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	2201      	movs	r2, #1
 8000e32:	719a      	strb	r2, [r3, #6]
				pedState->stateStartTime = currentTime;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	68fa      	ldr	r2, [r7, #12]
 8000e38:	60da      	str	r2, [r3, #12]
				pedState->lastToggleTime = currentTime;
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	68fa      	ldr	r2, [r7, #12]
 8000e3e:	611a      	str	r2, [r3, #16]
			} else
				pedState->nextState = RED;
			break;
 8000e40:	e00d      	b.n	8000e5e <processPedestrianState+0xee>
				pedState->nextState = RED;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	2202      	movs	r2, #2
 8000e46:	719a      	strb	r2, [r3, #6]
			break;
 8000e48:	e009      	b.n	8000e5e <processPedestrianState+0xee>
		default:
			pedState->nextState = RED;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	2202      	movs	r2, #2
 8000e4e:	719a      	strb	r2, [r3, #6]
			pedState->stateStartTime = currentTime;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	68fa      	ldr	r2, [r7, #12]
 8000e54:	60da      	str	r2, [r3, #12]
			break;
 8000e56:	e002      	b.n	8000e5e <processPedestrianState+0xee>
			break;
 8000e58:	bf00      	nop
 8000e5a:	e000      	b.n	8000e5e <processPedestrianState+0xee>
			break;
 8000e5c:	bf00      	nop
	}
	updatePedestrianState(pedState);
 8000e5e:	6878      	ldr	r0, [r7, #4]
 8000e60:	f7ff fc79 	bl	8000756 <updatePedestrianState>
	pedState->currentState = pedState->nextState;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	799a      	ldrb	r2, [r3, #6]
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	715a      	strb	r2, [r3, #5]
}
 8000e6c:	bf00      	nop
 8000e6e:	3710      	adds	r7, #16
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}

08000e74 <pedestrianLogic>:

void pedestrianLogic(PedestrianState *pedestrianStateVertical, PedestrianState *pedestrianStateHorizontal, carLightState *carState) {
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b084      	sub	sp, #16
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	60f8      	str	r0, [r7, #12]
 8000e7c:	60b9      	str	r1, [r7, #8]
 8000e7e:	607a      	str	r2, [r7, #4]
	processPedestrianState(pedestrianStateVertical, *carState);
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	4619      	mov	r1, r3
 8000e86:	68f8      	ldr	r0, [r7, #12]
 8000e88:	f7ff ff72 	bl	8000d70 <processPedestrianState>
	processPedestrianState(pedestrianStateHorizontal, *carState);
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	4619      	mov	r1, r3
 8000e92:	68b8      	ldr	r0, [r7, #8]
 8000e94:	f7ff ff6c 	bl	8000d70 <processPedestrianState>
}
 8000e98:	bf00      	nop
 8000e9a:	3710      	adds	r7, #16
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}

08000ea0 <MX_FREERTOS_Init>:
/**
	* @brief  FreeRTOS initialization
	* @param  None
	* @retval None
	*/
void MX_FREERTOS_Init(void) {
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Init */
		initializeRegisters();
 8000ea4:	f000 faa0 	bl	80013e8 <initializeRegisters>
		initIntersectionState(&intersection);
 8000ea8:	4811      	ldr	r0, [pc, #68]	@ (8000ef0 <MX_FREERTOS_Init+0x50>)
 8000eaa:	f000 f947 	bl	800113c <initIntersectionState>
	/* USER CODE END Init */

	/* USER CODE BEGIN RTOS_MUTEX */
	intersectionMutex = osMutexNew(NULL);
 8000eae:	2000      	movs	r0, #0
 8000eb0:	f003 ff69 	bl	8004d86 <osMutexNew>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	4a0f      	ldr	r2, [pc, #60]	@ (8000ef4 <MX_FREERTOS_Init+0x54>)
 8000eb8:	6013      	str	r3, [r2, #0]
		/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of defaultTask */
	defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000eba:	4a0f      	ldr	r2, [pc, #60]	@ (8000ef8 <MX_FREERTOS_Init+0x58>)
 8000ebc:	2100      	movs	r1, #0
 8000ebe:	480f      	ldr	r0, [pc, #60]	@ (8000efc <MX_FREERTOS_Init+0x5c>)
 8000ec0:	f003 feb4 	bl	8004c2c <osThreadNew>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	4a0e      	ldr	r2, [pc, #56]	@ (8000f00 <MX_FREERTOS_Init+0x60>)
 8000ec8:	6013      	str	r3, [r2, #0]

	/* creation of pedestrianTask */
	pedestrianTaskHandle = osThreadNew(pedestrianLogicTask, NULL, &pedestrianTask_attributes);
 8000eca:	4a0e      	ldr	r2, [pc, #56]	@ (8000f04 <MX_FREERTOS_Init+0x64>)
 8000ecc:	2100      	movs	r1, #0
 8000ece:	480e      	ldr	r0, [pc, #56]	@ (8000f08 <MX_FREERTOS_Init+0x68>)
 8000ed0:	f003 feac 	bl	8004c2c <osThreadNew>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	4a0d      	ldr	r2, [pc, #52]	@ (8000f0c <MX_FREERTOS_Init+0x6c>)
 8000ed8:	6013      	str	r3, [r2, #0]

	/* creation of carTask */
	carTaskHandle = osThreadNew(carLogicTask, NULL, &carTask_attributes);
 8000eda:	4a0d      	ldr	r2, [pc, #52]	@ (8000f10 <MX_FREERTOS_Init+0x70>)
 8000edc:	2100      	movs	r1, #0
 8000ede:	480d      	ldr	r0, [pc, #52]	@ (8000f14 <MX_FREERTOS_Init+0x74>)
 8000ee0:	f003 fea4 	bl	8004c2c <osThreadNew>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	4a0c      	ldr	r2, [pc, #48]	@ (8000f18 <MX_FREERTOS_Init+0x78>)
 8000ee8:	6013      	str	r3, [r2, #0]

	/* USER CODE BEGIN RTOS_EVENTS */
		/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

}
 8000eea:	bf00      	nop
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	20000030 	.word	0x20000030
 8000ef4:	2000002c 	.word	0x2000002c
 8000ef8:	08007fd0 	.word	0x08007fd0
 8000efc:	08000f1d 	.word	0x08000f1d
 8000f00:	20000084 	.word	0x20000084
 8000f04:	08007ff4 	.word	0x08007ff4
 8000f08:	08000f3d 	.word	0x08000f3d
 8000f0c:	20000088 	.word	0x20000088
 8000f10:	08008018 	.word	0x08008018
 8000f14:	08000f81 	.word	0x08000f81
 8000f18:	2000008c 	.word	0x2000008c

08000f1c <StartDefaultTask>:
		* @param  argument: Not used
		* @retval None
		*/
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartDefaultTask */
	/* Infinite loop */
	for(;;)
	{
	HAL_GPIO_TogglePin(GPIOB, LED26_Pin);
 8000f24:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000f28:	4803      	ldr	r0, [pc, #12]	@ (8000f38 <StartDefaultTask+0x1c>)
 8000f2a:	f000 ff1f 	bl	8001d6c <HAL_GPIO_TogglePin>
	osDelay(100);
 8000f2e:	2064      	movs	r0, #100	@ 0x64
 8000f30:	f003 ff0e 	bl	8004d50 <osDelay>
	HAL_GPIO_TogglePin(GPIOB, LED26_Pin);
 8000f34:	bf00      	nop
 8000f36:	e7f5      	b.n	8000f24 <StartDefaultTask+0x8>
 8000f38:	48000400 	.word	0x48000400

08000f3c <pedestrianLogicTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_pedestrianLogicTask */
void pedestrianLogicTask(void *argument)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN pedestrianLogicTask */
	/* Infinite loop */
	for(;;)
	{
		osMutexAcquire(intersectionMutex, osWaitForever);
 8000f44:	4b0a      	ldr	r3, [pc, #40]	@ (8000f70 <pedestrianLogicTask+0x34>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f04f 31ff 	mov.w	r1, #4294967295
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f003 ffa0 	bl	8004e92 <osMutexAcquire>
		pedestrianLogic(&intersection.pedestrianStateVertical,
 8000f52:	4a08      	ldr	r2, [pc, #32]	@ (8000f74 <pedestrianLogicTask+0x38>)
 8000f54:	4908      	ldr	r1, [pc, #32]	@ (8000f78 <pedestrianLogicTask+0x3c>)
 8000f56:	4809      	ldr	r0, [pc, #36]	@ (8000f7c <pedestrianLogicTask+0x40>)
 8000f58:	f7ff ff8c 	bl	8000e74 <pedestrianLogic>
			&intersection.pedestrianStateHorizontal,
			&intersection.carSignalState.currentState);
		osMutexRelease(intersectionMutex);
 8000f5c:	4b04      	ldr	r3, [pc, #16]	@ (8000f70 <pedestrianLogicTask+0x34>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4618      	mov	r0, r3
 8000f62:	f003 ffe1 	bl	8004f28 <osMutexRelease>
		osDelay(10);
 8000f66:	200a      	movs	r0, #10
 8000f68:	f003 fef2 	bl	8004d50 <osDelay>
		osMutexAcquire(intersectionMutex, osWaitForever);
 8000f6c:	bf00      	nop
 8000f6e:	e7e9      	b.n	8000f44 <pedestrianLogicTask+0x8>
 8000f70:	2000002c 	.word	0x2000002c
 8000f74:	20000071 	.word	0x20000071
 8000f78:	20000050 	.word	0x20000050
 8000f7c:	20000034 	.word	0x20000034

08000f80 <carLogicTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_carLogicTask */
void carLogicTask(void *argument)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN carLogicTask */
	/* Infinite loop */
	for(;;)
	{
		osMutexAcquire(intersectionMutex, osWaitForever);
 8000f88:	4b0c      	ldr	r3, [pc, #48]	@ (8000fbc <carLogicTask+0x3c>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f90:	4618      	mov	r0, r3
 8000f92:	f003 ff7e 	bl	8004e92 <osMutexAcquire>
		taskCarSignalLogic(&intersection.carSignalState, intersection.pedestrianStateVertical.currentState, intersection.pedestrianStateHorizontal.currentState);
 8000f96:	4b0a      	ldr	r3, [pc, #40]	@ (8000fc0 <carLogicTask+0x40>)
 8000f98:	7a5b      	ldrb	r3, [r3, #9]
 8000f9a:	4a09      	ldr	r2, [pc, #36]	@ (8000fc0 <carLogicTask+0x40>)
 8000f9c:	f892 2025 	ldrb.w	r2, [r2, #37]	@ 0x25
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	4808      	ldr	r0, [pc, #32]	@ (8000fc4 <carLogicTask+0x44>)
 8000fa4:	f7ff fd2c 	bl	8000a00 <taskCarSignalLogic>
		osMutexRelease(intersectionMutex);
 8000fa8:	4b04      	ldr	r3, [pc, #16]	@ (8000fbc <carLogicTask+0x3c>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4618      	mov	r0, r3
 8000fae:	f003 ffbb 	bl	8004f28 <osMutexRelease>
		osDelay(10);
 8000fb2:	200a      	movs	r0, #10
 8000fb4:	f003 fecc 	bl	8004d50 <osDelay>
		osMutexAcquire(intersectionMutex, osWaitForever);
 8000fb8:	bf00      	nop
 8000fba:	e7e5      	b.n	8000f88 <carLogicTask+0x8>
 8000fbc:	2000002c 	.word	0x2000002c
 8000fc0:	20000030 	.word	0x20000030
 8000fc4:	2000006c 	.word	0x2000006c

08000fc8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b08a      	sub	sp, #40	@ 0x28
 8000fcc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fce:	f107 0314 	add.w	r3, r7, #20
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	601a      	str	r2, [r3, #0]
 8000fd6:	605a      	str	r2, [r3, #4]
 8000fd8:	609a      	str	r2, [r3, #8]
 8000fda:	60da      	str	r2, [r3, #12]
 8000fdc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fde:	4b54      	ldr	r3, [pc, #336]	@ (8001130 <MX_GPIO_Init+0x168>)
 8000fe0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fe2:	4a53      	ldr	r2, [pc, #332]	@ (8001130 <MX_GPIO_Init+0x168>)
 8000fe4:	f043 0304 	orr.w	r3, r3, #4
 8000fe8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fea:	4b51      	ldr	r3, [pc, #324]	@ (8001130 <MX_GPIO_Init+0x168>)
 8000fec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fee:	f003 0304 	and.w	r3, r3, #4
 8000ff2:	613b      	str	r3, [r7, #16]
 8000ff4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ff6:	4b4e      	ldr	r3, [pc, #312]	@ (8001130 <MX_GPIO_Init+0x168>)
 8000ff8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ffa:	4a4d      	ldr	r2, [pc, #308]	@ (8001130 <MX_GPIO_Init+0x168>)
 8000ffc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001000:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001002:	4b4b      	ldr	r3, [pc, #300]	@ (8001130 <MX_GPIO_Init+0x168>)
 8001004:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001006:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800100a:	60fb      	str	r3, [r7, #12]
 800100c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800100e:	4b48      	ldr	r3, [pc, #288]	@ (8001130 <MX_GPIO_Init+0x168>)
 8001010:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001012:	4a47      	ldr	r2, [pc, #284]	@ (8001130 <MX_GPIO_Init+0x168>)
 8001014:	f043 0301 	orr.w	r3, r3, #1
 8001018:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800101a:	4b45      	ldr	r3, [pc, #276]	@ (8001130 <MX_GPIO_Init+0x168>)
 800101c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800101e:	f003 0301 	and.w	r3, r3, #1
 8001022:	60bb      	str	r3, [r7, #8]
 8001024:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001026:	4b42      	ldr	r3, [pc, #264]	@ (8001130 <MX_GPIO_Init+0x168>)
 8001028:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800102a:	4a41      	ldr	r2, [pc, #260]	@ (8001130 <MX_GPIO_Init+0x168>)
 800102c:	f043 0302 	orr.w	r3, r3, #2
 8001030:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001032:	4b3f      	ldr	r3, [pc, #252]	@ (8001130 <MX_GPIO_Init+0x168>)
 8001034:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001036:	f003 0302 	and.w	r3, r3, #2
 800103a:	607b      	str	r3, [r7, #4]
 800103c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|SPI3_RESET_Pin, GPIO_PIN_RESET);
 800103e:	2200      	movs	r2, #0
 8001040:	f44f 7108 	mov.w	r1, #544	@ 0x220
 8001044:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001048:	f000 fe78 	bl	8001d3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED25_Pin|SPI3_STCP_Pin|LED26_Pin, GPIO_PIN_RESET);
 800104c:	2200      	movs	r2, #0
 800104e:	f249 0104 	movw	r1, #36868	@ 0x9004
 8001052:	4838      	ldr	r0, [pc, #224]	@ (8001134 <MX_GPIO_Init+0x16c>)
 8001054:	f000 fe72 	bl	8001d3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_ENABLE_GPIO_Port, SPI3_ENABLE_Pin, GPIO_PIN_RESET);
 8001058:	2200      	movs	r2, #0
 800105a:	2180      	movs	r1, #128	@ 0x80
 800105c:	4836      	ldr	r0, [pc, #216]	@ (8001138 <MX_GPIO_Init+0x170>)
 800105e:	f000 fe6d 	bl	8001d3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001062:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001066:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001068:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800106c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106e:	2300      	movs	r3, #0
 8001070:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001072:	f107 0314 	add.w	r3, r7, #20
 8001076:	4619      	mov	r1, r3
 8001078:	482f      	ldr	r0, [pc, #188]	@ (8001138 <MX_GPIO_Init+0x170>)
 800107a:	f000 fc9d 	bl	80019b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|SPI3_RESET_Pin;
 800107e:	f44f 7308 	mov.w	r3, #544	@ 0x220
 8001082:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001084:	2301      	movs	r3, #1
 8001086:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001088:	2300      	movs	r3, #0
 800108a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800108c:	2300      	movs	r3, #0
 800108e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001090:	f107 0314 	add.w	r3, r7, #20
 8001094:	4619      	mov	r1, r3
 8001096:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800109a:	f000 fc8d 	bl	80019b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TL1_Car_Pin;
 800109e:	2310      	movs	r3, #16
 80010a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010a2:	2300      	movs	r3, #0
 80010a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010a6:	2301      	movs	r3, #1
 80010a8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TL1_Car_GPIO_Port, &GPIO_InitStruct);
 80010aa:	f107 0314 	add.w	r3, r7, #20
 80010ae:	4619      	mov	r1, r3
 80010b0:	4821      	ldr	r0, [pc, #132]	@ (8001138 <MX_GPIO_Init+0x170>)
 80010b2:	f000 fc81 	bl	80019b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED25_Pin|SPI3_STCP_Pin|LED26_Pin;
 80010b6:	f249 0304 	movw	r3, #36868	@ 0x9004
 80010ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010bc:	2301      	movs	r3, #1
 80010be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c0:	2300      	movs	r3, #0
 80010c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c4:	2300      	movs	r3, #0
 80010c6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010c8:	f107 0314 	add.w	r3, r7, #20
 80010cc:	4619      	mov	r1, r3
 80010ce:	4819      	ldr	r0, [pc, #100]	@ (8001134 <MX_GPIO_Init+0x16c>)
 80010d0:	f000 fc72 	bl	80019b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = TL2_Car_Pin|TL3_Car_Pin|PL2_Switch_Pin;
 80010d4:	f44f 43c1 	mov.w	r3, #24704	@ 0x6080
 80010d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010da:	2300      	movs	r3, #0
 80010dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010de:	2301      	movs	r3, #1
 80010e0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010e2:	f107 0314 	add.w	r3, r7, #20
 80010e6:	4619      	mov	r1, r3
 80010e8:	4812      	ldr	r0, [pc, #72]	@ (8001134 <MX_GPIO_Init+0x16c>)
 80010ea:	f000 fc65 	bl	80019b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI3_ENABLE_Pin;
 80010ee:	2380      	movs	r3, #128	@ 0x80
 80010f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010f2:	2301      	movs	r3, #1
 80010f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f6:	2300      	movs	r3, #0
 80010f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010fa:	2300      	movs	r3, #0
 80010fc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI3_ENABLE_GPIO_Port, &GPIO_InitStruct);
 80010fe:	f107 0314 	add.w	r3, r7, #20
 8001102:	4619      	mov	r1, r3
 8001104:	480c      	ldr	r0, [pc, #48]	@ (8001138 <MX_GPIO_Init+0x170>)
 8001106:	f000 fc57 	bl	80019b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = TL4_Car_Pin|PL1_Switch_Pin;
 800110a:	f44f 4304 	mov.w	r3, #33792	@ 0x8400
 800110e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001110:	2300      	movs	r3, #0
 8001112:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001114:	2301      	movs	r3, #1
 8001116:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001118:	f107 0314 	add.w	r3, r7, #20
 800111c:	4619      	mov	r1, r3
 800111e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001122:	f000 fc49 	bl	80019b8 <HAL_GPIO_Init>

}
 8001126:	bf00      	nop
 8001128:	3728      	adds	r7, #40	@ 0x28
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	40021000 	.word	0x40021000
 8001134:	48000400 	.word	0x48000400
 8001138:	48000800 	.word	0x48000800

0800113c <initIntersectionState>:
#include "../Inc/intersection.h"
#include "../Inc/Logic/pedestrianLogic.h"
#include "../Inc/Logic/carLogic.h"
#include <string.h>

void initIntersectionState(IntersectionController *intersectionState) {
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
	memset(intersectionState->data, 0, sizeof(intersectionState->data));
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	3301      	adds	r3, #1
 8001148:	2203      	movs	r2, #3
 800114a:	2100      	movs	r1, #0
 800114c:	4618      	mov	r0, r3
 800114e:	f006 fedb 	bl	8007f08 <memset>
	intersectionState->sizeOfData = sizeof(intersectionState->data);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	2203      	movs	r2, #3
 8001156:	701a      	strb	r2, [r3, #0]

	initPedestrianState(&intersectionState->pedestrianStateVertical, intersectionState->data, intersectionState->sizeOfData, 1);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	1d18      	adds	r0, r3, #4
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	1c59      	adds	r1, r3, #1
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	781a      	ldrb	r2, [r3, #0]
 8001164:	2301      	movs	r3, #1
 8001166:	f7ff fd9c 	bl	8000ca2 <initPedestrianState>
	initPedestrianState(&intersectionState->pedestrianStateHorizontal, intersectionState->data, intersectionState->sizeOfData, 2);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	f103 0020 	add.w	r0, r3, #32
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	1c59      	adds	r1, r3, #1
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	781a      	ldrb	r2, [r3, #0]
 8001178:	2302      	movs	r3, #2
 800117a:	f7ff fd92 	bl	8000ca2 <initPedestrianState>
	initTaskCarSignalState(&intersectionState->carSignalState, intersectionState->data, intersectionState->sizeOfData);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	f103 003c 	add.w	r0, r3, #60	@ 0x3c
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	1c59      	adds	r1, r3, #1
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	461a      	mov	r2, r3
 800118e:	f7ff fb78 	bl	8000882 <initTaskCarSignalState>
	intersectionState->pedestrianStateVertical.carSignalState = &intersectionState->carSignalState.currentState;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	f103 0241 	add.w	r2, r3, #65	@ 0x41
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	60da      	str	r2, [r3, #12]
	intersectionState->pedestrianStateHorizontal.carSignalState = &intersectionState->carSignalState.currentState;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	f103 0241 	add.w	r2, r3, #65	@ 0x41
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80011a6:	bf00      	nop
 80011a8:	3708      	adds	r7, #8
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}

080011ae <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011ae:	b580      	push	{r7, lr}
 80011b0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011b2:	f000 fadf 	bl	8001774 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011b6:	f000 f80e 	bl	80011d6 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011ba:	f7ff ff05 	bl	8000fc8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80011be:	f000 fa23 	bl	8001608 <MX_USART2_UART_Init>
  MX_SPI3_Init();
 80011c2:	f000 f871 	bl	80012a8 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80011c6:	f003 fce7 	bl	8004b98 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 80011ca:	f7ff fe69 	bl	8000ea0 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80011ce:	f003 fd07 	bl	8004be0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80011d2:	bf00      	nop
 80011d4:	e7fd      	b.n	80011d2 <main+0x24>

080011d6 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011d6:	b580      	push	{r7, lr}
 80011d8:	b096      	sub	sp, #88	@ 0x58
 80011da:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011dc:	f107 0314 	add.w	r3, r7, #20
 80011e0:	2244      	movs	r2, #68	@ 0x44
 80011e2:	2100      	movs	r1, #0
 80011e4:	4618      	mov	r0, r3
 80011e6:	f006 fe8f 	bl	8007f08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011ea:	463b      	mov	r3, r7
 80011ec:	2200      	movs	r2, #0
 80011ee:	601a      	str	r2, [r3, #0]
 80011f0:	605a      	str	r2, [r3, #4]
 80011f2:	609a      	str	r2, [r3, #8]
 80011f4:	60da      	str	r2, [r3, #12]
 80011f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80011f8:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80011fc:	f000 fdde 	bl	8001dbc <HAL_PWREx_ControlVoltageScaling>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001206:	f000 f849 	bl	800129c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800120a:	2302      	movs	r3, #2
 800120c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800120e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001212:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001214:	2310      	movs	r3, #16
 8001216:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001218:	2302      	movs	r3, #2
 800121a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800121c:	2302      	movs	r3, #2
 800121e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001220:	2301      	movs	r3, #1
 8001222:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001224:	230a      	movs	r3, #10
 8001226:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001228:	2307      	movs	r3, #7
 800122a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800122c:	2302      	movs	r3, #2
 800122e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001230:	2302      	movs	r3, #2
 8001232:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001234:	f107 0314 	add.w	r3, r7, #20
 8001238:	4618      	mov	r0, r3
 800123a:	f000 fe15 	bl	8001e68 <HAL_RCC_OscConfig>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001244:	f000 f82a 	bl	800129c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001248:	230f      	movs	r3, #15
 800124a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800124c:	2303      	movs	r3, #3
 800124e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001250:	2300      	movs	r3, #0
 8001252:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001254:	2300      	movs	r3, #0
 8001256:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001258:	2300      	movs	r3, #0
 800125a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800125c:	463b      	mov	r3, r7
 800125e:	2104      	movs	r1, #4
 8001260:	4618      	mov	r0, r3
 8001262:	f001 f9dd 	bl	8002620 <HAL_RCC_ClockConfig>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d001      	beq.n	8001270 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800126c:	f000 f816 	bl	800129c <Error_Handler>
  }
}
 8001270:	bf00      	nop
 8001272:	3758      	adds	r7, #88	@ 0x58
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}

08001278 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a04      	ldr	r2, [pc, #16]	@ (8001298 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d101      	bne.n	800128e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800128a:	f000 fa93 	bl	80017b4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800128e:	bf00      	nop
 8001290:	3708      	adds	r7, #8
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	40012c00 	.word	0x40012c00

0800129c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012a0:	b672      	cpsid	i
}
 80012a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012a4:	bf00      	nop
 80012a6:	e7fd      	b.n	80012a4 <Error_Handler+0x8>

080012a8 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 80012ac:	4b1b      	ldr	r3, [pc, #108]	@ (800131c <MX_SPI3_Init+0x74>)
 80012ae:	4a1c      	ldr	r2, [pc, #112]	@ (8001320 <MX_SPI3_Init+0x78>)
 80012b0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80012b2:	4b1a      	ldr	r3, [pc, #104]	@ (800131c <MX_SPI3_Init+0x74>)
 80012b4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80012b8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80012ba:	4b18      	ldr	r3, [pc, #96]	@ (800131c <MX_SPI3_Init+0x74>)
 80012bc:	2200      	movs	r2, #0
 80012be:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80012c0:	4b16      	ldr	r3, [pc, #88]	@ (800131c <MX_SPI3_Init+0x74>)
 80012c2:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80012c6:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012c8:	4b14      	ldr	r3, [pc, #80]	@ (800131c <MX_SPI3_Init+0x74>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012ce:	4b13      	ldr	r3, [pc, #76]	@ (800131c <MX_SPI3_Init+0x74>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80012d4:	4b11      	ldr	r3, [pc, #68]	@ (800131c <MX_SPI3_Init+0x74>)
 80012d6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80012da:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80012dc:	4b0f      	ldr	r3, [pc, #60]	@ (800131c <MX_SPI3_Init+0x74>)
 80012de:	2210      	movs	r2, #16
 80012e0:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012e2:	4b0e      	ldr	r3, [pc, #56]	@ (800131c <MX_SPI3_Init+0x74>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80012e8:	4b0c      	ldr	r3, [pc, #48]	@ (800131c <MX_SPI3_Init+0x74>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012ee:	4b0b      	ldr	r3, [pc, #44]	@ (800131c <MX_SPI3_Init+0x74>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 80012f4:	4b09      	ldr	r3, [pc, #36]	@ (800131c <MX_SPI3_Init+0x74>)
 80012f6:	2207      	movs	r2, #7
 80012f8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80012fa:	4b08      	ldr	r3, [pc, #32]	@ (800131c <MX_SPI3_Init+0x74>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001300:	4b06      	ldr	r3, [pc, #24]	@ (800131c <MX_SPI3_Init+0x74>)
 8001302:	2208      	movs	r2, #8
 8001304:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001306:	4805      	ldr	r0, [pc, #20]	@ (800131c <MX_SPI3_Init+0x74>)
 8001308:	f002 f89c 	bl	8003444 <HAL_SPI_Init>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8001312:	f7ff ffc3 	bl	800129c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001316:	bf00      	nop
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	20000090 	.word	0x20000090
 8001320:	40003c00 	.word	0x40003c00

08001324 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b08a      	sub	sp, #40	@ 0x28
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800132c:	f107 0314 	add.w	r3, r7, #20
 8001330:	2200      	movs	r2, #0
 8001332:	601a      	str	r2, [r3, #0]
 8001334:	605a      	str	r2, [r3, #4]
 8001336:	609a      	str	r2, [r3, #8]
 8001338:	60da      	str	r2, [r3, #12]
 800133a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a25      	ldr	r2, [pc, #148]	@ (80013d8 <HAL_SPI_MspInit+0xb4>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d144      	bne.n	80013d0 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001346:	4b25      	ldr	r3, [pc, #148]	@ (80013dc <HAL_SPI_MspInit+0xb8>)
 8001348:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800134a:	4a24      	ldr	r2, [pc, #144]	@ (80013dc <HAL_SPI_MspInit+0xb8>)
 800134c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001350:	6593      	str	r3, [r2, #88]	@ 0x58
 8001352:	4b22      	ldr	r3, [pc, #136]	@ (80013dc <HAL_SPI_MspInit+0xb8>)
 8001354:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001356:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800135a:	613b      	str	r3, [r7, #16]
 800135c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800135e:	4b1f      	ldr	r3, [pc, #124]	@ (80013dc <HAL_SPI_MspInit+0xb8>)
 8001360:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001362:	4a1e      	ldr	r2, [pc, #120]	@ (80013dc <HAL_SPI_MspInit+0xb8>)
 8001364:	f043 0304 	orr.w	r3, r3, #4
 8001368:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800136a:	4b1c      	ldr	r3, [pc, #112]	@ (80013dc <HAL_SPI_MspInit+0xb8>)
 800136c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800136e:	f003 0304 	and.w	r3, r3, #4
 8001372:	60fb      	str	r3, [r7, #12]
 8001374:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001376:	4b19      	ldr	r3, [pc, #100]	@ (80013dc <HAL_SPI_MspInit+0xb8>)
 8001378:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800137a:	4a18      	ldr	r2, [pc, #96]	@ (80013dc <HAL_SPI_MspInit+0xb8>)
 800137c:	f043 0302 	orr.w	r3, r3, #2
 8001380:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001382:	4b16      	ldr	r3, [pc, #88]	@ (80013dc <HAL_SPI_MspInit+0xb8>)
 8001384:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001386:	f003 0302 	and.w	r3, r3, #2
 800138a:	60bb      	str	r3, [r7, #8]
 800138c:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800138e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001392:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001394:	2302      	movs	r3, #2
 8001396:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001398:	2300      	movs	r3, #0
 800139a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800139c:	2303      	movs	r3, #3
 800139e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80013a0:	2306      	movs	r3, #6
 80013a2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013a4:	f107 0314 	add.w	r3, r7, #20
 80013a8:	4619      	mov	r1, r3
 80013aa:	480d      	ldr	r0, [pc, #52]	@ (80013e0 <HAL_SPI_MspInit+0xbc>)
 80013ac:	f000 fb04 	bl	80019b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80013b0:	2320      	movs	r3, #32
 80013b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b4:	2302      	movs	r3, #2
 80013b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b8:	2300      	movs	r3, #0
 80013ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013bc:	2303      	movs	r3, #3
 80013be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80013c0:	2306      	movs	r3, #6
 80013c2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013c4:	f107 0314 	add.w	r3, r7, #20
 80013c8:	4619      	mov	r1, r3
 80013ca:	4806      	ldr	r0, [pc, #24]	@ (80013e4 <HAL_SPI_MspInit+0xc0>)
 80013cc:	f000 faf4 	bl	80019b8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80013d0:	bf00      	nop
 80013d2:	3728      	adds	r7, #40	@ 0x28
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	40003c00 	.word	0x40003c00
 80013dc:	40021000 	.word	0x40021000
 80013e0:	48000800 	.word	0x48000800
 80013e4:	48000400 	.word	0x48000400

080013e8 <initializeRegisters>:
#include "../Inc/spiCommunication.h"
#include "main.h"
#include "gpio.h"
#include "spi.h"

void initializeRegisters() {
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, SPI3_RESET_Pin, GPIO_PIN_SET);
 80013ec:	2201      	movs	r2, #1
 80013ee:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80013f2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013f6:	f000 fca1 	bl	8001d3c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, SPI3_STCP_Pin, GPIO_PIN_SET);
 80013fa:	2201      	movs	r2, #1
 80013fc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001400:	4807      	ldr	r0, [pc, #28]	@ (8001420 <initializeRegisters+0x38>)
 8001402:	f000 fc9b 	bl	8001d3c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, SPI3_STCP_Pin, GPIO_PIN_RESET);
 8001406:	2200      	movs	r2, #0
 8001408:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800140c:	4804      	ldr	r0, [pc, #16]	@ (8001420 <initializeRegisters+0x38>)
 800140e:	f000 fc95 	bl	8001d3c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, SPI3_ENABLE_Pin, GPIO_PIN_RESET);
 8001412:	2200      	movs	r2, #0
 8001414:	2180      	movs	r1, #128	@ 0x80
 8001416:	4803      	ldr	r0, [pc, #12]	@ (8001424 <initializeRegisters+0x3c>)
 8001418:	f000 fc90 	bl	8001d3c <HAL_GPIO_WritePin>
}
 800141c:	bf00      	nop
 800141e:	bd80      	pop	{r7, pc}
 8001420:	48000400 	.word	0x48000400
 8001424:	48000800 	.word	0x48000800

08001428 <transmitData>:

void transmitData(uint8_t *data, size_t size) {
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
 8001430:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&hspi3, data, size, HAL_MAX_DELAY);
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	b29a      	uxth	r2, r3
 8001436:	f04f 33ff 	mov.w	r3, #4294967295
 800143a:	6879      	ldr	r1, [r7, #4]
 800143c:	4809      	ldr	r0, [pc, #36]	@ (8001464 <transmitData+0x3c>)
 800143e:	f002 f8a4 	bl	800358a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOB, SPI3_STCP_Pin, GPIO_PIN_SET);
 8001442:	2201      	movs	r2, #1
 8001444:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001448:	4807      	ldr	r0, [pc, #28]	@ (8001468 <transmitData+0x40>)
 800144a:	f000 fc77 	bl	8001d3c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, SPI3_STCP_Pin, GPIO_PIN_RESET);
 800144e:	2200      	movs	r2, #0
 8001450:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001454:	4804      	ldr	r0, [pc, #16]	@ (8001468 <transmitData+0x40>)
 8001456:	f000 fc71 	bl	8001d3c <HAL_GPIO_WritePin>
}
 800145a:	bf00      	nop
 800145c:	3708      	adds	r7, #8
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	20000090 	.word	0x20000090
 8001468:	48000400 	.word	0x48000400

0800146c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001472:	4b11      	ldr	r3, [pc, #68]	@ (80014b8 <HAL_MspInit+0x4c>)
 8001474:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001476:	4a10      	ldr	r2, [pc, #64]	@ (80014b8 <HAL_MspInit+0x4c>)
 8001478:	f043 0301 	orr.w	r3, r3, #1
 800147c:	6613      	str	r3, [r2, #96]	@ 0x60
 800147e:	4b0e      	ldr	r3, [pc, #56]	@ (80014b8 <HAL_MspInit+0x4c>)
 8001480:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001482:	f003 0301 	and.w	r3, r3, #1
 8001486:	607b      	str	r3, [r7, #4]
 8001488:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800148a:	4b0b      	ldr	r3, [pc, #44]	@ (80014b8 <HAL_MspInit+0x4c>)
 800148c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800148e:	4a0a      	ldr	r2, [pc, #40]	@ (80014b8 <HAL_MspInit+0x4c>)
 8001490:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001494:	6593      	str	r3, [r2, #88]	@ 0x58
 8001496:	4b08      	ldr	r3, [pc, #32]	@ (80014b8 <HAL_MspInit+0x4c>)
 8001498:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800149a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800149e:	603b      	str	r3, [r7, #0]
 80014a0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80014a2:	2200      	movs	r2, #0
 80014a4:	210f      	movs	r1, #15
 80014a6:	f06f 0001 	mvn.w	r0, #1
 80014aa:	f000 fa5b 	bl	8001964 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014ae:	bf00      	nop
 80014b0:	3708      	adds	r7, #8
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	40021000 	.word	0x40021000

080014bc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b08c      	sub	sp, #48	@ 0x30
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80014c4:	2300      	movs	r3, #0
 80014c6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80014ca:	4b2e      	ldr	r3, [pc, #184]	@ (8001584 <HAL_InitTick+0xc8>)
 80014cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014ce:	4a2d      	ldr	r2, [pc, #180]	@ (8001584 <HAL_InitTick+0xc8>)
 80014d0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80014d4:	6613      	str	r3, [r2, #96]	@ 0x60
 80014d6:	4b2b      	ldr	r3, [pc, #172]	@ (8001584 <HAL_InitTick+0xc8>)
 80014d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014da:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80014de:	60bb      	str	r3, [r7, #8]
 80014e0:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80014e2:	f107 020c 	add.w	r2, r7, #12
 80014e6:	f107 0310 	add.w	r3, r7, #16
 80014ea:	4611      	mov	r1, r2
 80014ec:	4618      	mov	r0, r3
 80014ee:	f001 fa5b 	bl	80029a8 <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80014f2:	f001 fa43 	bl	800297c <HAL_RCC_GetPCLK2Freq>
 80014f6:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80014f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014fa:	4a23      	ldr	r2, [pc, #140]	@ (8001588 <HAL_InitTick+0xcc>)
 80014fc:	fba2 2303 	umull	r2, r3, r2, r3
 8001500:	0c9b      	lsrs	r3, r3, #18
 8001502:	3b01      	subs	r3, #1
 8001504:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001506:	4b21      	ldr	r3, [pc, #132]	@ (800158c <HAL_InitTick+0xd0>)
 8001508:	4a21      	ldr	r2, [pc, #132]	@ (8001590 <HAL_InitTick+0xd4>)
 800150a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800150c:	4b1f      	ldr	r3, [pc, #124]	@ (800158c <HAL_InitTick+0xd0>)
 800150e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001512:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001514:	4a1d      	ldr	r2, [pc, #116]	@ (800158c <HAL_InitTick+0xd0>)
 8001516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001518:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800151a:	4b1c      	ldr	r3, [pc, #112]	@ (800158c <HAL_InitTick+0xd0>)
 800151c:	2200      	movs	r2, #0
 800151e:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001520:	4b1a      	ldr	r3, [pc, #104]	@ (800158c <HAL_InitTick+0xd0>)
 8001522:	2200      	movs	r2, #0
 8001524:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001526:	4b19      	ldr	r3, [pc, #100]	@ (800158c <HAL_InitTick+0xd0>)
 8001528:	2200      	movs	r2, #0
 800152a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800152c:	4817      	ldr	r0, [pc, #92]	@ (800158c <HAL_InitTick+0xd0>)
 800152e:	f002 fb07 	bl	8003b40 <HAL_TIM_Base_Init>
 8001532:	4603      	mov	r3, r0
 8001534:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001538:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800153c:	2b00      	cmp	r3, #0
 800153e:	d11b      	bne.n	8001578 <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001540:	4812      	ldr	r0, [pc, #72]	@ (800158c <HAL_InitTick+0xd0>)
 8001542:	f002 fb5f 	bl	8003c04 <HAL_TIM_Base_Start_IT>
 8001546:	4603      	mov	r3, r0
 8001548:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 800154c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001550:	2b00      	cmp	r3, #0
 8001552:	d111      	bne.n	8001578 <HAL_InitTick+0xbc>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001554:	2019      	movs	r0, #25
 8001556:	f000 fa21 	bl	800199c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2b0f      	cmp	r3, #15
 800155e:	d808      	bhi.n	8001572 <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8001560:	2200      	movs	r2, #0
 8001562:	6879      	ldr	r1, [r7, #4]
 8001564:	2019      	movs	r0, #25
 8001566:	f000 f9fd 	bl	8001964 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800156a:	4a0a      	ldr	r2, [pc, #40]	@ (8001594 <HAL_InitTick+0xd8>)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6013      	str	r3, [r2, #0]
 8001570:	e002      	b.n	8001578 <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 8001572:	2301      	movs	r3, #1
 8001574:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001578:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800157c:	4618      	mov	r0, r3
 800157e:	3730      	adds	r7, #48	@ 0x30
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	40021000 	.word	0x40021000
 8001588:	431bde83 	.word	0x431bde83
 800158c:	200000f4 	.word	0x200000f4
 8001590:	40012c00 	.word	0x40012c00
 8001594:	20000004 	.word	0x20000004

08001598 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800159c:	bf00      	nop
 800159e:	e7fd      	b.n	800159c <NMI_Handler+0x4>

080015a0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015a4:	bf00      	nop
 80015a6:	e7fd      	b.n	80015a4 <HardFault_Handler+0x4>

080015a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015ac:	bf00      	nop
 80015ae:	e7fd      	b.n	80015ac <MemManage_Handler+0x4>

080015b0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015b4:	bf00      	nop
 80015b6:	e7fd      	b.n	80015b4 <BusFault_Handler+0x4>

080015b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015bc:	bf00      	nop
 80015be:	e7fd      	b.n	80015bc <UsageFault_Handler+0x4>

080015c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015c4:	bf00      	nop
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr
	...

080015d0 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80015d4:	4802      	ldr	r0, [pc, #8]	@ (80015e0 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80015d6:	f002 fb85 	bl	8003ce4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80015da:	bf00      	nop
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	200000f4 	.word	0x200000f4

080015e4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80015e8:	4b06      	ldr	r3, [pc, #24]	@ (8001604 <SystemInit+0x20>)
 80015ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80015ee:	4a05      	ldr	r2, [pc, #20]	@ (8001604 <SystemInit+0x20>)
 80015f0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80015f4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80015f8:	bf00      	nop
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr
 8001602:	bf00      	nop
 8001604:	e000ed00 	.word	0xe000ed00

08001608 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800160c:	4b14      	ldr	r3, [pc, #80]	@ (8001660 <MX_USART2_UART_Init+0x58>)
 800160e:	4a15      	ldr	r2, [pc, #84]	@ (8001664 <MX_USART2_UART_Init+0x5c>)
 8001610:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001612:	4b13      	ldr	r3, [pc, #76]	@ (8001660 <MX_USART2_UART_Init+0x58>)
 8001614:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001618:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800161a:	4b11      	ldr	r3, [pc, #68]	@ (8001660 <MX_USART2_UART_Init+0x58>)
 800161c:	2200      	movs	r2, #0
 800161e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001620:	4b0f      	ldr	r3, [pc, #60]	@ (8001660 <MX_USART2_UART_Init+0x58>)
 8001622:	2200      	movs	r2, #0
 8001624:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001626:	4b0e      	ldr	r3, [pc, #56]	@ (8001660 <MX_USART2_UART_Init+0x58>)
 8001628:	2200      	movs	r2, #0
 800162a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800162c:	4b0c      	ldr	r3, [pc, #48]	@ (8001660 <MX_USART2_UART_Init+0x58>)
 800162e:	220c      	movs	r2, #12
 8001630:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001632:	4b0b      	ldr	r3, [pc, #44]	@ (8001660 <MX_USART2_UART_Init+0x58>)
 8001634:	2200      	movs	r2, #0
 8001636:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001638:	4b09      	ldr	r3, [pc, #36]	@ (8001660 <MX_USART2_UART_Init+0x58>)
 800163a:	2200      	movs	r2, #0
 800163c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800163e:	4b08      	ldr	r3, [pc, #32]	@ (8001660 <MX_USART2_UART_Init+0x58>)
 8001640:	2200      	movs	r2, #0
 8001642:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001644:	4b06      	ldr	r3, [pc, #24]	@ (8001660 <MX_USART2_UART_Init+0x58>)
 8001646:	2200      	movs	r2, #0
 8001648:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800164a:	4805      	ldr	r0, [pc, #20]	@ (8001660 <MX_USART2_UART_Init+0x58>)
 800164c:	f002 fd3e 	bl	80040cc <HAL_UART_Init>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d001      	beq.n	800165a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001656:	f7ff fe21 	bl	800129c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800165a:	bf00      	nop
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	20000140 	.word	0x20000140
 8001664:	40004400 	.word	0x40004400

08001668 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b0ac      	sub	sp, #176	@ 0xb0
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001670:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001674:	2200      	movs	r2, #0
 8001676:	601a      	str	r2, [r3, #0]
 8001678:	605a      	str	r2, [r3, #4]
 800167a:	609a      	str	r2, [r3, #8]
 800167c:	60da      	str	r2, [r3, #12]
 800167e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001680:	f107 0314 	add.w	r3, r7, #20
 8001684:	2288      	movs	r2, #136	@ 0x88
 8001686:	2100      	movs	r1, #0
 8001688:	4618      	mov	r0, r3
 800168a:	f006 fc3d 	bl	8007f08 <memset>
  if(uartHandle->Instance==USART2)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a21      	ldr	r2, [pc, #132]	@ (8001718 <HAL_UART_MspInit+0xb0>)
 8001694:	4293      	cmp	r3, r2
 8001696:	d13b      	bne.n	8001710 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001698:	2302      	movs	r3, #2
 800169a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800169c:	2300      	movs	r3, #0
 800169e:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016a0:	f107 0314 	add.w	r3, r7, #20
 80016a4:	4618      	mov	r0, r3
 80016a6:	f001 fa11 	bl	8002acc <HAL_RCCEx_PeriphCLKConfig>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d001      	beq.n	80016b4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80016b0:	f7ff fdf4 	bl	800129c <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80016b4:	4b19      	ldr	r3, [pc, #100]	@ (800171c <HAL_UART_MspInit+0xb4>)
 80016b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016b8:	4a18      	ldr	r2, [pc, #96]	@ (800171c <HAL_UART_MspInit+0xb4>)
 80016ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016be:	6593      	str	r3, [r2, #88]	@ 0x58
 80016c0:	4b16      	ldr	r3, [pc, #88]	@ (800171c <HAL_UART_MspInit+0xb4>)
 80016c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016c8:	613b      	str	r3, [r7, #16]
 80016ca:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016cc:	4b13      	ldr	r3, [pc, #76]	@ (800171c <HAL_UART_MspInit+0xb4>)
 80016ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016d0:	4a12      	ldr	r2, [pc, #72]	@ (800171c <HAL_UART_MspInit+0xb4>)
 80016d2:	f043 0301 	orr.w	r3, r3, #1
 80016d6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016d8:	4b10      	ldr	r3, [pc, #64]	@ (800171c <HAL_UART_MspInit+0xb4>)
 80016da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016dc:	f003 0301 	and.w	r3, r3, #1
 80016e0:	60fb      	str	r3, [r7, #12]
 80016e2:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80016e4:	230c      	movs	r3, #12
 80016e6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ea:	2302      	movs	r3, #2
 80016ec:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f0:	2300      	movs	r3, #0
 80016f2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016f6:	2303      	movs	r3, #3
 80016f8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80016fc:	2307      	movs	r3, #7
 80016fe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001702:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001706:	4619      	mov	r1, r3
 8001708:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800170c:	f000 f954 	bl	80019b8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001710:	bf00      	nop
 8001712:	37b0      	adds	r7, #176	@ 0xb0
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}
 8001718:	40004400 	.word	0x40004400
 800171c:	40021000 	.word	0x40021000

08001720 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001720:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001758 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001724:	f7ff ff5e 	bl	80015e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001728:	480c      	ldr	r0, [pc, #48]	@ (800175c <LoopForever+0x6>)
  ldr r1, =_edata
 800172a:	490d      	ldr	r1, [pc, #52]	@ (8001760 <LoopForever+0xa>)
   ldr r2, =_sidata
 800172c:	4a0d      	ldr	r2, [pc, #52]	@ (8001764 <LoopForever+0xe>)
  movs r3, #0
 800172e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001730:	e002      	b.n	8001738 <LoopCopyDataInit>

08001732 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001732:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001734:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001736:	3304      	adds	r3, #4

08001738 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001738:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800173a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800173c:	d3f9      	bcc.n	8001732 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800173e:	4a0a      	ldr	r2, [pc, #40]	@ (8001768 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001740:	4c0a      	ldr	r4, [pc, #40]	@ (800176c <LoopForever+0x16>)
  movs r3, #0
 8001742:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001744:	e001      	b.n	800174a <LoopFillZerobss>

08001746 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001746:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001748:	3204      	adds	r2, #4

0800174a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800174a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800174c:	d3fb      	bcc.n	8001746 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800174e:	f006 fbe3 	bl	8007f18 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001752:	f7ff fd2c 	bl	80011ae <main>

08001756 <LoopForever>:

LoopForever:
    b LoopForever
 8001756:	e7fe      	b.n	8001756 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001758:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800175c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001760:	20000010 	.word	0x20000010
   ldr r2, =_sidata
 8001764:	08008094 	.word	0x08008094
  ldr r2, =_sbss
 8001768:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800176c:	20001ad4 	.word	0x20001ad4

08001770 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001770:	e7fe      	b.n	8001770 <ADC1_2_IRQHandler>
	...

08001774 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800177a:	2300      	movs	r3, #0
 800177c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800177e:	4b0c      	ldr	r3, [pc, #48]	@ (80017b0 <HAL_Init+0x3c>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a0b      	ldr	r2, [pc, #44]	@ (80017b0 <HAL_Init+0x3c>)
 8001784:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001788:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800178a:	2003      	movs	r0, #3
 800178c:	f000 f8df 	bl	800194e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001790:	200f      	movs	r0, #15
 8001792:	f7ff fe93 	bl	80014bc <HAL_InitTick>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d002      	beq.n	80017a2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800179c:	2301      	movs	r3, #1
 800179e:	71fb      	strb	r3, [r7, #7]
 80017a0:	e001      	b.n	80017a6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80017a2:	f7ff fe63 	bl	800146c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80017a6:	79fb      	ldrb	r3, [r7, #7]
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	3708      	adds	r7, #8
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	40022000 	.word	0x40022000

080017b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80017b8:	4b06      	ldr	r3, [pc, #24]	@ (80017d4 <HAL_IncTick+0x20>)
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	461a      	mov	r2, r3
 80017be:	4b06      	ldr	r3, [pc, #24]	@ (80017d8 <HAL_IncTick+0x24>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4413      	add	r3, r2
 80017c4:	4a04      	ldr	r2, [pc, #16]	@ (80017d8 <HAL_IncTick+0x24>)
 80017c6:	6013      	str	r3, [r2, #0]
}
 80017c8:	bf00      	nop
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr
 80017d2:	bf00      	nop
 80017d4:	20000008 	.word	0x20000008
 80017d8:	200001c8 	.word	0x200001c8

080017dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  return uwTick;
 80017e0:	4b03      	ldr	r3, [pc, #12]	@ (80017f0 <HAL_GetTick+0x14>)
 80017e2:	681b      	ldr	r3, [r3, #0]
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr
 80017ee:	bf00      	nop
 80017f0:	200001c8 	.word	0x200001c8

080017f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b085      	sub	sp, #20
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	f003 0307 	and.w	r3, r3, #7
 8001802:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001804:	4b0c      	ldr	r3, [pc, #48]	@ (8001838 <__NVIC_SetPriorityGrouping+0x44>)
 8001806:	68db      	ldr	r3, [r3, #12]
 8001808:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800180a:	68ba      	ldr	r2, [r7, #8]
 800180c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001810:	4013      	ands	r3, r2
 8001812:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001818:	68bb      	ldr	r3, [r7, #8]
 800181a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800181c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001820:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001824:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001826:	4a04      	ldr	r2, [pc, #16]	@ (8001838 <__NVIC_SetPriorityGrouping+0x44>)
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	60d3      	str	r3, [r2, #12]
}
 800182c:	bf00      	nop
 800182e:	3714      	adds	r7, #20
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr
 8001838:	e000ed00 	.word	0xe000ed00

0800183c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001840:	4b04      	ldr	r3, [pc, #16]	@ (8001854 <__NVIC_GetPriorityGrouping+0x18>)
 8001842:	68db      	ldr	r3, [r3, #12]
 8001844:	0a1b      	lsrs	r3, r3, #8
 8001846:	f003 0307 	and.w	r3, r3, #7
}
 800184a:	4618      	mov	r0, r3
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr
 8001854:	e000ed00 	.word	0xe000ed00

08001858 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001858:	b480      	push	{r7}
 800185a:	b083      	sub	sp, #12
 800185c:	af00      	add	r7, sp, #0
 800185e:	4603      	mov	r3, r0
 8001860:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001862:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001866:	2b00      	cmp	r3, #0
 8001868:	db0b      	blt.n	8001882 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800186a:	79fb      	ldrb	r3, [r7, #7]
 800186c:	f003 021f 	and.w	r2, r3, #31
 8001870:	4907      	ldr	r1, [pc, #28]	@ (8001890 <__NVIC_EnableIRQ+0x38>)
 8001872:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001876:	095b      	lsrs	r3, r3, #5
 8001878:	2001      	movs	r0, #1
 800187a:	fa00 f202 	lsl.w	r2, r0, r2
 800187e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001882:	bf00      	nop
 8001884:	370c      	adds	r7, #12
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr
 800188e:	bf00      	nop
 8001890:	e000e100 	.word	0xe000e100

08001894 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001894:	b480      	push	{r7}
 8001896:	b083      	sub	sp, #12
 8001898:	af00      	add	r7, sp, #0
 800189a:	4603      	mov	r3, r0
 800189c:	6039      	str	r1, [r7, #0]
 800189e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	db0a      	blt.n	80018be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	b2da      	uxtb	r2, r3
 80018ac:	490c      	ldr	r1, [pc, #48]	@ (80018e0 <__NVIC_SetPriority+0x4c>)
 80018ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018b2:	0112      	lsls	r2, r2, #4
 80018b4:	b2d2      	uxtb	r2, r2
 80018b6:	440b      	add	r3, r1
 80018b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018bc:	e00a      	b.n	80018d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	b2da      	uxtb	r2, r3
 80018c2:	4908      	ldr	r1, [pc, #32]	@ (80018e4 <__NVIC_SetPriority+0x50>)
 80018c4:	79fb      	ldrb	r3, [r7, #7]
 80018c6:	f003 030f 	and.w	r3, r3, #15
 80018ca:	3b04      	subs	r3, #4
 80018cc:	0112      	lsls	r2, r2, #4
 80018ce:	b2d2      	uxtb	r2, r2
 80018d0:	440b      	add	r3, r1
 80018d2:	761a      	strb	r2, [r3, #24]
}
 80018d4:	bf00      	nop
 80018d6:	370c      	adds	r7, #12
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr
 80018e0:	e000e100 	.word	0xe000e100
 80018e4:	e000ed00 	.word	0xe000ed00

080018e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b089      	sub	sp, #36	@ 0x24
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	60f8      	str	r0, [r7, #12]
 80018f0:	60b9      	str	r1, [r7, #8]
 80018f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	f003 0307 	and.w	r3, r3, #7
 80018fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018fc:	69fb      	ldr	r3, [r7, #28]
 80018fe:	f1c3 0307 	rsb	r3, r3, #7
 8001902:	2b04      	cmp	r3, #4
 8001904:	bf28      	it	cs
 8001906:	2304      	movcs	r3, #4
 8001908:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	3304      	adds	r3, #4
 800190e:	2b06      	cmp	r3, #6
 8001910:	d902      	bls.n	8001918 <NVIC_EncodePriority+0x30>
 8001912:	69fb      	ldr	r3, [r7, #28]
 8001914:	3b03      	subs	r3, #3
 8001916:	e000      	b.n	800191a <NVIC_EncodePriority+0x32>
 8001918:	2300      	movs	r3, #0
 800191a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800191c:	f04f 32ff 	mov.w	r2, #4294967295
 8001920:	69bb      	ldr	r3, [r7, #24]
 8001922:	fa02 f303 	lsl.w	r3, r2, r3
 8001926:	43da      	mvns	r2, r3
 8001928:	68bb      	ldr	r3, [r7, #8]
 800192a:	401a      	ands	r2, r3
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001930:	f04f 31ff 	mov.w	r1, #4294967295
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	fa01 f303 	lsl.w	r3, r1, r3
 800193a:	43d9      	mvns	r1, r3
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001940:	4313      	orrs	r3, r2
         );
}
 8001942:	4618      	mov	r0, r3
 8001944:	3724      	adds	r7, #36	@ 0x24
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr

0800194e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800194e:	b580      	push	{r7, lr}
 8001950:	b082      	sub	sp, #8
 8001952:	af00      	add	r7, sp, #0
 8001954:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001956:	6878      	ldr	r0, [r7, #4]
 8001958:	f7ff ff4c 	bl	80017f4 <__NVIC_SetPriorityGrouping>
}
 800195c:	bf00      	nop
 800195e:	3708      	adds	r7, #8
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}

08001964 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b086      	sub	sp, #24
 8001968:	af00      	add	r7, sp, #0
 800196a:	4603      	mov	r3, r0
 800196c:	60b9      	str	r1, [r7, #8]
 800196e:	607a      	str	r2, [r7, #4]
 8001970:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001972:	2300      	movs	r3, #0
 8001974:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001976:	f7ff ff61 	bl	800183c <__NVIC_GetPriorityGrouping>
 800197a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800197c:	687a      	ldr	r2, [r7, #4]
 800197e:	68b9      	ldr	r1, [r7, #8]
 8001980:	6978      	ldr	r0, [r7, #20]
 8001982:	f7ff ffb1 	bl	80018e8 <NVIC_EncodePriority>
 8001986:	4602      	mov	r2, r0
 8001988:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800198c:	4611      	mov	r1, r2
 800198e:	4618      	mov	r0, r3
 8001990:	f7ff ff80 	bl	8001894 <__NVIC_SetPriority>
}
 8001994:	bf00      	nop
 8001996:	3718      	adds	r7, #24
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}

0800199c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b082      	sub	sp, #8
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	4603      	mov	r3, r0
 80019a4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019aa:	4618      	mov	r0, r3
 80019ac:	f7ff ff54 	bl	8001858 <__NVIC_EnableIRQ>
}
 80019b0:	bf00      	nop
 80019b2:	3708      	adds	r7, #8
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}

080019b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b087      	sub	sp, #28
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
 80019c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80019c2:	2300      	movs	r3, #0
 80019c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019c6:	e17f      	b.n	8001cc8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	2101      	movs	r1, #1
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	fa01 f303 	lsl.w	r3, r1, r3
 80019d4:	4013      	ands	r3, r2
 80019d6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	f000 8171 	beq.w	8001cc2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	f003 0303 	and.w	r3, r3, #3
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	d005      	beq.n	80019f8 <HAL_GPIO_Init+0x40>
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	f003 0303 	and.w	r3, r3, #3
 80019f4:	2b02      	cmp	r3, #2
 80019f6:	d130      	bne.n	8001a5a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	005b      	lsls	r3, r3, #1
 8001a02:	2203      	movs	r2, #3
 8001a04:	fa02 f303 	lsl.w	r3, r2, r3
 8001a08:	43db      	mvns	r3, r3
 8001a0a:	693a      	ldr	r2, [r7, #16]
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	68da      	ldr	r2, [r3, #12]
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	005b      	lsls	r3, r3, #1
 8001a18:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1c:	693a      	ldr	r2, [r7, #16]
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	693a      	ldr	r2, [r7, #16]
 8001a26:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001a2e:	2201      	movs	r2, #1
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	fa02 f303 	lsl.w	r3, r2, r3
 8001a36:	43db      	mvns	r3, r3
 8001a38:	693a      	ldr	r2, [r7, #16]
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	091b      	lsrs	r3, r3, #4
 8001a44:	f003 0201 	and.w	r2, r3, #1
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4e:	693a      	ldr	r2, [r7, #16]
 8001a50:	4313      	orrs	r3, r2
 8001a52:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	693a      	ldr	r2, [r7, #16]
 8001a58:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	f003 0303 	and.w	r3, r3, #3
 8001a62:	2b03      	cmp	r3, #3
 8001a64:	d118      	bne.n	8001a98 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a6a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	fa02 f303 	lsl.w	r3, r2, r3
 8001a74:	43db      	mvns	r3, r3
 8001a76:	693a      	ldr	r2, [r7, #16]
 8001a78:	4013      	ands	r3, r2
 8001a7a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	08db      	lsrs	r3, r3, #3
 8001a82:	f003 0201 	and.w	r2, r3, #1
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8c:	693a      	ldr	r2, [r7, #16]
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	693a      	ldr	r2, [r7, #16]
 8001a96:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	f003 0303 	and.w	r3, r3, #3
 8001aa0:	2b03      	cmp	r3, #3
 8001aa2:	d017      	beq.n	8001ad4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	68db      	ldr	r3, [r3, #12]
 8001aa8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	005b      	lsls	r3, r3, #1
 8001aae:	2203      	movs	r2, #3
 8001ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab4:	43db      	mvns	r3, r3
 8001ab6:	693a      	ldr	r2, [r7, #16]
 8001ab8:	4013      	ands	r3, r2
 8001aba:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	689a      	ldr	r2, [r3, #8]
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	005b      	lsls	r3, r3, #1
 8001ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac8:	693a      	ldr	r2, [r7, #16]
 8001aca:	4313      	orrs	r3, r2
 8001acc:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	693a      	ldr	r2, [r7, #16]
 8001ad2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	f003 0303 	and.w	r3, r3, #3
 8001adc:	2b02      	cmp	r3, #2
 8001ade:	d123      	bne.n	8001b28 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	08da      	lsrs	r2, r3, #3
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	3208      	adds	r2, #8
 8001ae8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001aec:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	f003 0307 	and.w	r3, r3, #7
 8001af4:	009b      	lsls	r3, r3, #2
 8001af6:	220f      	movs	r2, #15
 8001af8:	fa02 f303 	lsl.w	r3, r2, r3
 8001afc:	43db      	mvns	r3, r3
 8001afe:	693a      	ldr	r2, [r7, #16]
 8001b00:	4013      	ands	r3, r2
 8001b02:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	691a      	ldr	r2, [r3, #16]
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	f003 0307 	and.w	r3, r3, #7
 8001b0e:	009b      	lsls	r3, r3, #2
 8001b10:	fa02 f303 	lsl.w	r3, r2, r3
 8001b14:	693a      	ldr	r2, [r7, #16]
 8001b16:	4313      	orrs	r3, r2
 8001b18:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	08da      	lsrs	r2, r3, #3
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	3208      	adds	r2, #8
 8001b22:	6939      	ldr	r1, [r7, #16]
 8001b24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	005b      	lsls	r3, r3, #1
 8001b32:	2203      	movs	r2, #3
 8001b34:	fa02 f303 	lsl.w	r3, r2, r3
 8001b38:	43db      	mvns	r3, r3
 8001b3a:	693a      	ldr	r2, [r7, #16]
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	f003 0203 	and.w	r2, r3, #3
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	005b      	lsls	r3, r3, #1
 8001b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b50:	693a      	ldr	r2, [r7, #16]
 8001b52:	4313      	orrs	r3, r2
 8001b54:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	693a      	ldr	r2, [r7, #16]
 8001b5a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	f000 80ac 	beq.w	8001cc2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b6a:	4b5f      	ldr	r3, [pc, #380]	@ (8001ce8 <HAL_GPIO_Init+0x330>)
 8001b6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b6e:	4a5e      	ldr	r2, [pc, #376]	@ (8001ce8 <HAL_GPIO_Init+0x330>)
 8001b70:	f043 0301 	orr.w	r3, r3, #1
 8001b74:	6613      	str	r3, [r2, #96]	@ 0x60
 8001b76:	4b5c      	ldr	r3, [pc, #368]	@ (8001ce8 <HAL_GPIO_Init+0x330>)
 8001b78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b7a:	f003 0301 	and.w	r3, r3, #1
 8001b7e:	60bb      	str	r3, [r7, #8]
 8001b80:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001b82:	4a5a      	ldr	r2, [pc, #360]	@ (8001cec <HAL_GPIO_Init+0x334>)
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	089b      	lsrs	r3, r3, #2
 8001b88:	3302      	adds	r3, #2
 8001b8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b8e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	f003 0303 	and.w	r3, r3, #3
 8001b96:	009b      	lsls	r3, r3, #2
 8001b98:	220f      	movs	r2, #15
 8001b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9e:	43db      	mvns	r3, r3
 8001ba0:	693a      	ldr	r2, [r7, #16]
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001bac:	d025      	beq.n	8001bfa <HAL_GPIO_Init+0x242>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	4a4f      	ldr	r2, [pc, #316]	@ (8001cf0 <HAL_GPIO_Init+0x338>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d01f      	beq.n	8001bf6 <HAL_GPIO_Init+0x23e>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	4a4e      	ldr	r2, [pc, #312]	@ (8001cf4 <HAL_GPIO_Init+0x33c>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d019      	beq.n	8001bf2 <HAL_GPIO_Init+0x23a>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	4a4d      	ldr	r2, [pc, #308]	@ (8001cf8 <HAL_GPIO_Init+0x340>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d013      	beq.n	8001bee <HAL_GPIO_Init+0x236>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	4a4c      	ldr	r2, [pc, #304]	@ (8001cfc <HAL_GPIO_Init+0x344>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d00d      	beq.n	8001bea <HAL_GPIO_Init+0x232>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	4a4b      	ldr	r2, [pc, #300]	@ (8001d00 <HAL_GPIO_Init+0x348>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d007      	beq.n	8001be6 <HAL_GPIO_Init+0x22e>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	4a4a      	ldr	r2, [pc, #296]	@ (8001d04 <HAL_GPIO_Init+0x34c>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d101      	bne.n	8001be2 <HAL_GPIO_Init+0x22a>
 8001bde:	2306      	movs	r3, #6
 8001be0:	e00c      	b.n	8001bfc <HAL_GPIO_Init+0x244>
 8001be2:	2307      	movs	r3, #7
 8001be4:	e00a      	b.n	8001bfc <HAL_GPIO_Init+0x244>
 8001be6:	2305      	movs	r3, #5
 8001be8:	e008      	b.n	8001bfc <HAL_GPIO_Init+0x244>
 8001bea:	2304      	movs	r3, #4
 8001bec:	e006      	b.n	8001bfc <HAL_GPIO_Init+0x244>
 8001bee:	2303      	movs	r3, #3
 8001bf0:	e004      	b.n	8001bfc <HAL_GPIO_Init+0x244>
 8001bf2:	2302      	movs	r3, #2
 8001bf4:	e002      	b.n	8001bfc <HAL_GPIO_Init+0x244>
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e000      	b.n	8001bfc <HAL_GPIO_Init+0x244>
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	697a      	ldr	r2, [r7, #20]
 8001bfe:	f002 0203 	and.w	r2, r2, #3
 8001c02:	0092      	lsls	r2, r2, #2
 8001c04:	4093      	lsls	r3, r2
 8001c06:	693a      	ldr	r2, [r7, #16]
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001c0c:	4937      	ldr	r1, [pc, #220]	@ (8001cec <HAL_GPIO_Init+0x334>)
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	089b      	lsrs	r3, r3, #2
 8001c12:	3302      	adds	r3, #2
 8001c14:	693a      	ldr	r2, [r7, #16]
 8001c16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001c1a:	4b3b      	ldr	r3, [pc, #236]	@ (8001d08 <HAL_GPIO_Init+0x350>)
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	43db      	mvns	r3, r3
 8001c24:	693a      	ldr	r2, [r7, #16]
 8001c26:	4013      	ands	r3, r2
 8001c28:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d003      	beq.n	8001c3e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001c36:	693a      	ldr	r2, [r7, #16]
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001c3e:	4a32      	ldr	r2, [pc, #200]	@ (8001d08 <HAL_GPIO_Init+0x350>)
 8001c40:	693b      	ldr	r3, [r7, #16]
 8001c42:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001c44:	4b30      	ldr	r3, [pc, #192]	@ (8001d08 <HAL_GPIO_Init+0x350>)
 8001c46:	68db      	ldr	r3, [r3, #12]
 8001c48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	43db      	mvns	r3, r3
 8001c4e:	693a      	ldr	r2, [r7, #16]
 8001c50:	4013      	ands	r3, r2
 8001c52:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d003      	beq.n	8001c68 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001c60:	693a      	ldr	r2, [r7, #16]
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	4313      	orrs	r3, r2
 8001c66:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001c68:	4a27      	ldr	r2, [pc, #156]	@ (8001d08 <HAL_GPIO_Init+0x350>)
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001c6e:	4b26      	ldr	r3, [pc, #152]	@ (8001d08 <HAL_GPIO_Init+0x350>)
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	43db      	mvns	r3, r3
 8001c78:	693a      	ldr	r2, [r7, #16]
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d003      	beq.n	8001c92 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001c8a:	693a      	ldr	r2, [r7, #16]
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001c92:	4a1d      	ldr	r2, [pc, #116]	@ (8001d08 <HAL_GPIO_Init+0x350>)
 8001c94:	693b      	ldr	r3, [r7, #16]
 8001c96:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001c98:	4b1b      	ldr	r3, [pc, #108]	@ (8001d08 <HAL_GPIO_Init+0x350>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	43db      	mvns	r3, r3
 8001ca2:	693a      	ldr	r2, [r7, #16]
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d003      	beq.n	8001cbc <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001cb4:	693a      	ldr	r2, [r7, #16]
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001cbc:	4a12      	ldr	r2, [pc, #72]	@ (8001d08 <HAL_GPIO_Init+0x350>)
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	3301      	adds	r3, #1
 8001cc6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	fa22 f303 	lsr.w	r3, r2, r3
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	f47f ae78 	bne.w	80019c8 <HAL_GPIO_Init+0x10>
  }
}
 8001cd8:	bf00      	nop
 8001cda:	bf00      	nop
 8001cdc:	371c      	adds	r7, #28
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr
 8001ce6:	bf00      	nop
 8001ce8:	40021000 	.word	0x40021000
 8001cec:	40010000 	.word	0x40010000
 8001cf0:	48000400 	.word	0x48000400
 8001cf4:	48000800 	.word	0x48000800
 8001cf8:	48000c00 	.word	0x48000c00
 8001cfc:	48001000 	.word	0x48001000
 8001d00:	48001400 	.word	0x48001400
 8001d04:	48001800 	.word	0x48001800
 8001d08:	40010400 	.word	0x40010400

08001d0c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b085      	sub	sp, #20
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
 8001d14:	460b      	mov	r3, r1
 8001d16:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	691a      	ldr	r2, [r3, #16]
 8001d1c:	887b      	ldrh	r3, [r7, #2]
 8001d1e:	4013      	ands	r3, r2
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d002      	beq.n	8001d2a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d24:	2301      	movs	r3, #1
 8001d26:	73fb      	strb	r3, [r7, #15]
 8001d28:	e001      	b.n	8001d2e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	3714      	adds	r7, #20
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr

08001d3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b083      	sub	sp, #12
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
 8001d44:	460b      	mov	r3, r1
 8001d46:	807b      	strh	r3, [r7, #2]
 8001d48:	4613      	mov	r3, r2
 8001d4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d4c:	787b      	ldrb	r3, [r7, #1]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d003      	beq.n	8001d5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d52:	887a      	ldrh	r2, [r7, #2]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001d58:	e002      	b.n	8001d60 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001d5a:	887a      	ldrh	r2, [r7, #2]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001d60:	bf00      	nop
 8001d62:	370c      	adds	r7, #12
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr

08001d6c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b085      	sub	sp, #20
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
 8001d74:	460b      	mov	r3, r1
 8001d76:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	695b      	ldr	r3, [r3, #20]
 8001d7c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001d7e:	887a      	ldrh	r2, [r7, #2]
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	4013      	ands	r3, r2
 8001d84:	041a      	lsls	r2, r3, #16
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	43d9      	mvns	r1, r3
 8001d8a:	887b      	ldrh	r3, [r7, #2]
 8001d8c:	400b      	ands	r3, r1
 8001d8e:	431a      	orrs	r2, r3
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	619a      	str	r2, [r3, #24]
}
 8001d94:	bf00      	nop
 8001d96:	3714      	adds	r7, #20
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr

08001da0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001da0:	b480      	push	{r7}
 8001da2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001da4:	4b04      	ldr	r3, [pc, #16]	@ (8001db8 <HAL_PWREx_GetVoltageRange+0x18>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr
 8001db6:	bf00      	nop
 8001db8:	40007000 	.word	0x40007000

08001dbc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b085      	sub	sp, #20
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001dca:	d130      	bne.n	8001e2e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001dcc:	4b23      	ldr	r3, [pc, #140]	@ (8001e5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001dd4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001dd8:	d038      	beq.n	8001e4c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001dda:	4b20      	ldr	r3, [pc, #128]	@ (8001e5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001de2:	4a1e      	ldr	r2, [pc, #120]	@ (8001e5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001de4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001de8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001dea:	4b1d      	ldr	r3, [pc, #116]	@ (8001e60 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	2232      	movs	r2, #50	@ 0x32
 8001df0:	fb02 f303 	mul.w	r3, r2, r3
 8001df4:	4a1b      	ldr	r2, [pc, #108]	@ (8001e64 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001df6:	fba2 2303 	umull	r2, r3, r2, r3
 8001dfa:	0c9b      	lsrs	r3, r3, #18
 8001dfc:	3301      	adds	r3, #1
 8001dfe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e00:	e002      	b.n	8001e08 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	3b01      	subs	r3, #1
 8001e06:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e08:	4b14      	ldr	r3, [pc, #80]	@ (8001e5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e0a:	695b      	ldr	r3, [r3, #20]
 8001e0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e10:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e14:	d102      	bne.n	8001e1c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d1f2      	bne.n	8001e02 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001e1c:	4b0f      	ldr	r3, [pc, #60]	@ (8001e5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e1e:	695b      	ldr	r3, [r3, #20]
 8001e20:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e24:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e28:	d110      	bne.n	8001e4c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	e00f      	b.n	8001e4e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001e2e:	4b0b      	ldr	r3, [pc, #44]	@ (8001e5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001e36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e3a:	d007      	beq.n	8001e4c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001e3c:	4b07      	ldr	r3, [pc, #28]	@ (8001e5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001e44:	4a05      	ldr	r2, [pc, #20]	@ (8001e5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e46:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001e4a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001e4c:	2300      	movs	r3, #0
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	3714      	adds	r7, #20
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr
 8001e5a:	bf00      	nop
 8001e5c:	40007000 	.word	0x40007000
 8001e60:	20000000 	.word	0x20000000
 8001e64:	431bde83 	.word	0x431bde83

08001e68 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b088      	sub	sp, #32
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d101      	bne.n	8001e7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	e3ca      	b.n	8002610 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e7a:	4b97      	ldr	r3, [pc, #604]	@ (80020d8 <HAL_RCC_OscConfig+0x270>)
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	f003 030c 	and.w	r3, r3, #12
 8001e82:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e84:	4b94      	ldr	r3, [pc, #592]	@ (80020d8 <HAL_RCC_OscConfig+0x270>)
 8001e86:	68db      	ldr	r3, [r3, #12]
 8001e88:	f003 0303 	and.w	r3, r3, #3
 8001e8c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f003 0310 	and.w	r3, r3, #16
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	f000 80e4 	beq.w	8002064 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001e9c:	69bb      	ldr	r3, [r7, #24]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d007      	beq.n	8001eb2 <HAL_RCC_OscConfig+0x4a>
 8001ea2:	69bb      	ldr	r3, [r7, #24]
 8001ea4:	2b0c      	cmp	r3, #12
 8001ea6:	f040 808b 	bne.w	8001fc0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	2b01      	cmp	r3, #1
 8001eae:	f040 8087 	bne.w	8001fc0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001eb2:	4b89      	ldr	r3, [pc, #548]	@ (80020d8 <HAL_RCC_OscConfig+0x270>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f003 0302 	and.w	r3, r3, #2
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d005      	beq.n	8001eca <HAL_RCC_OscConfig+0x62>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	699b      	ldr	r3, [r3, #24]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d101      	bne.n	8001eca <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e3a2      	b.n	8002610 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6a1a      	ldr	r2, [r3, #32]
 8001ece:	4b82      	ldr	r3, [pc, #520]	@ (80020d8 <HAL_RCC_OscConfig+0x270>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f003 0308 	and.w	r3, r3, #8
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d004      	beq.n	8001ee4 <HAL_RCC_OscConfig+0x7c>
 8001eda:	4b7f      	ldr	r3, [pc, #508]	@ (80020d8 <HAL_RCC_OscConfig+0x270>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001ee2:	e005      	b.n	8001ef0 <HAL_RCC_OscConfig+0x88>
 8001ee4:	4b7c      	ldr	r3, [pc, #496]	@ (80020d8 <HAL_RCC_OscConfig+0x270>)
 8001ee6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001eea:	091b      	lsrs	r3, r3, #4
 8001eec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d223      	bcs.n	8001f3c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6a1b      	ldr	r3, [r3, #32]
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f000 fd87 	bl	8002a0c <RCC_SetFlashLatencyFromMSIRange>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d001      	beq.n	8001f08 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001f04:	2301      	movs	r3, #1
 8001f06:	e383      	b.n	8002610 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f08:	4b73      	ldr	r3, [pc, #460]	@ (80020d8 <HAL_RCC_OscConfig+0x270>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a72      	ldr	r2, [pc, #456]	@ (80020d8 <HAL_RCC_OscConfig+0x270>)
 8001f0e:	f043 0308 	orr.w	r3, r3, #8
 8001f12:	6013      	str	r3, [r2, #0]
 8001f14:	4b70      	ldr	r3, [pc, #448]	@ (80020d8 <HAL_RCC_OscConfig+0x270>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6a1b      	ldr	r3, [r3, #32]
 8001f20:	496d      	ldr	r1, [pc, #436]	@ (80020d8 <HAL_RCC_OscConfig+0x270>)
 8001f22:	4313      	orrs	r3, r2
 8001f24:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f26:	4b6c      	ldr	r3, [pc, #432]	@ (80020d8 <HAL_RCC_OscConfig+0x270>)
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	69db      	ldr	r3, [r3, #28]
 8001f32:	021b      	lsls	r3, r3, #8
 8001f34:	4968      	ldr	r1, [pc, #416]	@ (80020d8 <HAL_RCC_OscConfig+0x270>)
 8001f36:	4313      	orrs	r3, r2
 8001f38:	604b      	str	r3, [r1, #4]
 8001f3a:	e025      	b.n	8001f88 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f3c:	4b66      	ldr	r3, [pc, #408]	@ (80020d8 <HAL_RCC_OscConfig+0x270>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a65      	ldr	r2, [pc, #404]	@ (80020d8 <HAL_RCC_OscConfig+0x270>)
 8001f42:	f043 0308 	orr.w	r3, r3, #8
 8001f46:	6013      	str	r3, [r2, #0]
 8001f48:	4b63      	ldr	r3, [pc, #396]	@ (80020d8 <HAL_RCC_OscConfig+0x270>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6a1b      	ldr	r3, [r3, #32]
 8001f54:	4960      	ldr	r1, [pc, #384]	@ (80020d8 <HAL_RCC_OscConfig+0x270>)
 8001f56:	4313      	orrs	r3, r2
 8001f58:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f5a:	4b5f      	ldr	r3, [pc, #380]	@ (80020d8 <HAL_RCC_OscConfig+0x270>)
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	69db      	ldr	r3, [r3, #28]
 8001f66:	021b      	lsls	r3, r3, #8
 8001f68:	495b      	ldr	r1, [pc, #364]	@ (80020d8 <HAL_RCC_OscConfig+0x270>)
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f6e:	69bb      	ldr	r3, [r7, #24]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d109      	bne.n	8001f88 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6a1b      	ldr	r3, [r3, #32]
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f000 fd47 	bl	8002a0c <RCC_SetFlashLatencyFromMSIRange>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d001      	beq.n	8001f88 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001f84:	2301      	movs	r3, #1
 8001f86:	e343      	b.n	8002610 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001f88:	f000 fc4a 	bl	8002820 <HAL_RCC_GetSysClockFreq>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	4b52      	ldr	r3, [pc, #328]	@ (80020d8 <HAL_RCC_OscConfig+0x270>)
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	091b      	lsrs	r3, r3, #4
 8001f94:	f003 030f 	and.w	r3, r3, #15
 8001f98:	4950      	ldr	r1, [pc, #320]	@ (80020dc <HAL_RCC_OscConfig+0x274>)
 8001f9a:	5ccb      	ldrb	r3, [r1, r3]
 8001f9c:	f003 031f 	and.w	r3, r3, #31
 8001fa0:	fa22 f303 	lsr.w	r3, r2, r3
 8001fa4:	4a4e      	ldr	r2, [pc, #312]	@ (80020e0 <HAL_RCC_OscConfig+0x278>)
 8001fa6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001fa8:	4b4e      	ldr	r3, [pc, #312]	@ (80020e4 <HAL_RCC_OscConfig+0x27c>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4618      	mov	r0, r3
 8001fae:	f7ff fa85 	bl	80014bc <HAL_InitTick>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001fb6:	7bfb      	ldrb	r3, [r7, #15]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d052      	beq.n	8002062 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001fbc:	7bfb      	ldrb	r3, [r7, #15]
 8001fbe:	e327      	b.n	8002610 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	699b      	ldr	r3, [r3, #24]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d032      	beq.n	800202e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001fc8:	4b43      	ldr	r3, [pc, #268]	@ (80020d8 <HAL_RCC_OscConfig+0x270>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a42      	ldr	r2, [pc, #264]	@ (80020d8 <HAL_RCC_OscConfig+0x270>)
 8001fce:	f043 0301 	orr.w	r3, r3, #1
 8001fd2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001fd4:	f7ff fc02 	bl	80017dc <HAL_GetTick>
 8001fd8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001fda:	e008      	b.n	8001fee <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001fdc:	f7ff fbfe 	bl	80017dc <HAL_GetTick>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	1ad3      	subs	r3, r2, r3
 8001fe6:	2b02      	cmp	r3, #2
 8001fe8:	d901      	bls.n	8001fee <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001fea:	2303      	movs	r3, #3
 8001fec:	e310      	b.n	8002610 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001fee:	4b3a      	ldr	r3, [pc, #232]	@ (80020d8 <HAL_RCC_OscConfig+0x270>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f003 0302 	and.w	r3, r3, #2
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d0f0      	beq.n	8001fdc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ffa:	4b37      	ldr	r3, [pc, #220]	@ (80020d8 <HAL_RCC_OscConfig+0x270>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a36      	ldr	r2, [pc, #216]	@ (80020d8 <HAL_RCC_OscConfig+0x270>)
 8002000:	f043 0308 	orr.w	r3, r3, #8
 8002004:	6013      	str	r3, [r2, #0]
 8002006:	4b34      	ldr	r3, [pc, #208]	@ (80020d8 <HAL_RCC_OscConfig+0x270>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6a1b      	ldr	r3, [r3, #32]
 8002012:	4931      	ldr	r1, [pc, #196]	@ (80020d8 <HAL_RCC_OscConfig+0x270>)
 8002014:	4313      	orrs	r3, r2
 8002016:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002018:	4b2f      	ldr	r3, [pc, #188]	@ (80020d8 <HAL_RCC_OscConfig+0x270>)
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	69db      	ldr	r3, [r3, #28]
 8002024:	021b      	lsls	r3, r3, #8
 8002026:	492c      	ldr	r1, [pc, #176]	@ (80020d8 <HAL_RCC_OscConfig+0x270>)
 8002028:	4313      	orrs	r3, r2
 800202a:	604b      	str	r3, [r1, #4]
 800202c:	e01a      	b.n	8002064 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800202e:	4b2a      	ldr	r3, [pc, #168]	@ (80020d8 <HAL_RCC_OscConfig+0x270>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a29      	ldr	r2, [pc, #164]	@ (80020d8 <HAL_RCC_OscConfig+0x270>)
 8002034:	f023 0301 	bic.w	r3, r3, #1
 8002038:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800203a:	f7ff fbcf 	bl	80017dc <HAL_GetTick>
 800203e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002040:	e008      	b.n	8002054 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002042:	f7ff fbcb 	bl	80017dc <HAL_GetTick>
 8002046:	4602      	mov	r2, r0
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	1ad3      	subs	r3, r2, r3
 800204c:	2b02      	cmp	r3, #2
 800204e:	d901      	bls.n	8002054 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002050:	2303      	movs	r3, #3
 8002052:	e2dd      	b.n	8002610 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002054:	4b20      	ldr	r3, [pc, #128]	@ (80020d8 <HAL_RCC_OscConfig+0x270>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f003 0302 	and.w	r3, r3, #2
 800205c:	2b00      	cmp	r3, #0
 800205e:	d1f0      	bne.n	8002042 <HAL_RCC_OscConfig+0x1da>
 8002060:	e000      	b.n	8002064 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002062:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f003 0301 	and.w	r3, r3, #1
 800206c:	2b00      	cmp	r3, #0
 800206e:	d074      	beq.n	800215a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002070:	69bb      	ldr	r3, [r7, #24]
 8002072:	2b08      	cmp	r3, #8
 8002074:	d005      	beq.n	8002082 <HAL_RCC_OscConfig+0x21a>
 8002076:	69bb      	ldr	r3, [r7, #24]
 8002078:	2b0c      	cmp	r3, #12
 800207a:	d10e      	bne.n	800209a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	2b03      	cmp	r3, #3
 8002080:	d10b      	bne.n	800209a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002082:	4b15      	ldr	r3, [pc, #84]	@ (80020d8 <HAL_RCC_OscConfig+0x270>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800208a:	2b00      	cmp	r3, #0
 800208c:	d064      	beq.n	8002158 <HAL_RCC_OscConfig+0x2f0>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d160      	bne.n	8002158 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	e2ba      	b.n	8002610 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80020a2:	d106      	bne.n	80020b2 <HAL_RCC_OscConfig+0x24a>
 80020a4:	4b0c      	ldr	r3, [pc, #48]	@ (80020d8 <HAL_RCC_OscConfig+0x270>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a0b      	ldr	r2, [pc, #44]	@ (80020d8 <HAL_RCC_OscConfig+0x270>)
 80020aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020ae:	6013      	str	r3, [r2, #0]
 80020b0:	e026      	b.n	8002100 <HAL_RCC_OscConfig+0x298>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80020ba:	d115      	bne.n	80020e8 <HAL_RCC_OscConfig+0x280>
 80020bc:	4b06      	ldr	r3, [pc, #24]	@ (80020d8 <HAL_RCC_OscConfig+0x270>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a05      	ldr	r2, [pc, #20]	@ (80020d8 <HAL_RCC_OscConfig+0x270>)
 80020c2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80020c6:	6013      	str	r3, [r2, #0]
 80020c8:	4b03      	ldr	r3, [pc, #12]	@ (80020d8 <HAL_RCC_OscConfig+0x270>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a02      	ldr	r2, [pc, #8]	@ (80020d8 <HAL_RCC_OscConfig+0x270>)
 80020ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020d2:	6013      	str	r3, [r2, #0]
 80020d4:	e014      	b.n	8002100 <HAL_RCC_OscConfig+0x298>
 80020d6:	bf00      	nop
 80020d8:	40021000 	.word	0x40021000
 80020dc:	0800803c 	.word	0x0800803c
 80020e0:	20000000 	.word	0x20000000
 80020e4:	20000004 	.word	0x20000004
 80020e8:	4ba0      	ldr	r3, [pc, #640]	@ (800236c <HAL_RCC_OscConfig+0x504>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a9f      	ldr	r2, [pc, #636]	@ (800236c <HAL_RCC_OscConfig+0x504>)
 80020ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80020f2:	6013      	str	r3, [r2, #0]
 80020f4:	4b9d      	ldr	r3, [pc, #628]	@ (800236c <HAL_RCC_OscConfig+0x504>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a9c      	ldr	r2, [pc, #624]	@ (800236c <HAL_RCC_OscConfig+0x504>)
 80020fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80020fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d013      	beq.n	8002130 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002108:	f7ff fb68 	bl	80017dc <HAL_GetTick>
 800210c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800210e:	e008      	b.n	8002122 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002110:	f7ff fb64 	bl	80017dc <HAL_GetTick>
 8002114:	4602      	mov	r2, r0
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	1ad3      	subs	r3, r2, r3
 800211a:	2b64      	cmp	r3, #100	@ 0x64
 800211c:	d901      	bls.n	8002122 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800211e:	2303      	movs	r3, #3
 8002120:	e276      	b.n	8002610 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002122:	4b92      	ldr	r3, [pc, #584]	@ (800236c <HAL_RCC_OscConfig+0x504>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800212a:	2b00      	cmp	r3, #0
 800212c:	d0f0      	beq.n	8002110 <HAL_RCC_OscConfig+0x2a8>
 800212e:	e014      	b.n	800215a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002130:	f7ff fb54 	bl	80017dc <HAL_GetTick>
 8002134:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002136:	e008      	b.n	800214a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002138:	f7ff fb50 	bl	80017dc <HAL_GetTick>
 800213c:	4602      	mov	r2, r0
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	1ad3      	subs	r3, r2, r3
 8002142:	2b64      	cmp	r3, #100	@ 0x64
 8002144:	d901      	bls.n	800214a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002146:	2303      	movs	r3, #3
 8002148:	e262      	b.n	8002610 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800214a:	4b88      	ldr	r3, [pc, #544]	@ (800236c <HAL_RCC_OscConfig+0x504>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002152:	2b00      	cmp	r3, #0
 8002154:	d1f0      	bne.n	8002138 <HAL_RCC_OscConfig+0x2d0>
 8002156:	e000      	b.n	800215a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002158:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 0302 	and.w	r3, r3, #2
 8002162:	2b00      	cmp	r3, #0
 8002164:	d060      	beq.n	8002228 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002166:	69bb      	ldr	r3, [r7, #24]
 8002168:	2b04      	cmp	r3, #4
 800216a:	d005      	beq.n	8002178 <HAL_RCC_OscConfig+0x310>
 800216c:	69bb      	ldr	r3, [r7, #24]
 800216e:	2b0c      	cmp	r3, #12
 8002170:	d119      	bne.n	80021a6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	2b02      	cmp	r3, #2
 8002176:	d116      	bne.n	80021a6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002178:	4b7c      	ldr	r3, [pc, #496]	@ (800236c <HAL_RCC_OscConfig+0x504>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002180:	2b00      	cmp	r3, #0
 8002182:	d005      	beq.n	8002190 <HAL_RCC_OscConfig+0x328>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d101      	bne.n	8002190 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800218c:	2301      	movs	r3, #1
 800218e:	e23f      	b.n	8002610 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002190:	4b76      	ldr	r3, [pc, #472]	@ (800236c <HAL_RCC_OscConfig+0x504>)
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	691b      	ldr	r3, [r3, #16]
 800219c:	061b      	lsls	r3, r3, #24
 800219e:	4973      	ldr	r1, [pc, #460]	@ (800236c <HAL_RCC_OscConfig+0x504>)
 80021a0:	4313      	orrs	r3, r2
 80021a2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80021a4:	e040      	b.n	8002228 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	68db      	ldr	r3, [r3, #12]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d023      	beq.n	80021f6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021ae:	4b6f      	ldr	r3, [pc, #444]	@ (800236c <HAL_RCC_OscConfig+0x504>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4a6e      	ldr	r2, [pc, #440]	@ (800236c <HAL_RCC_OscConfig+0x504>)
 80021b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021ba:	f7ff fb0f 	bl	80017dc <HAL_GetTick>
 80021be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021c0:	e008      	b.n	80021d4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021c2:	f7ff fb0b 	bl	80017dc <HAL_GetTick>
 80021c6:	4602      	mov	r2, r0
 80021c8:	693b      	ldr	r3, [r7, #16]
 80021ca:	1ad3      	subs	r3, r2, r3
 80021cc:	2b02      	cmp	r3, #2
 80021ce:	d901      	bls.n	80021d4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80021d0:	2303      	movs	r3, #3
 80021d2:	e21d      	b.n	8002610 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021d4:	4b65      	ldr	r3, [pc, #404]	@ (800236c <HAL_RCC_OscConfig+0x504>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d0f0      	beq.n	80021c2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021e0:	4b62      	ldr	r3, [pc, #392]	@ (800236c <HAL_RCC_OscConfig+0x504>)
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	691b      	ldr	r3, [r3, #16]
 80021ec:	061b      	lsls	r3, r3, #24
 80021ee:	495f      	ldr	r1, [pc, #380]	@ (800236c <HAL_RCC_OscConfig+0x504>)
 80021f0:	4313      	orrs	r3, r2
 80021f2:	604b      	str	r3, [r1, #4]
 80021f4:	e018      	b.n	8002228 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021f6:	4b5d      	ldr	r3, [pc, #372]	@ (800236c <HAL_RCC_OscConfig+0x504>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a5c      	ldr	r2, [pc, #368]	@ (800236c <HAL_RCC_OscConfig+0x504>)
 80021fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002200:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002202:	f7ff faeb 	bl	80017dc <HAL_GetTick>
 8002206:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002208:	e008      	b.n	800221c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800220a:	f7ff fae7 	bl	80017dc <HAL_GetTick>
 800220e:	4602      	mov	r2, r0
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	1ad3      	subs	r3, r2, r3
 8002214:	2b02      	cmp	r3, #2
 8002216:	d901      	bls.n	800221c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002218:	2303      	movs	r3, #3
 800221a:	e1f9      	b.n	8002610 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800221c:	4b53      	ldr	r3, [pc, #332]	@ (800236c <HAL_RCC_OscConfig+0x504>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002224:	2b00      	cmp	r3, #0
 8002226:	d1f0      	bne.n	800220a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f003 0308 	and.w	r3, r3, #8
 8002230:	2b00      	cmp	r3, #0
 8002232:	d03c      	beq.n	80022ae <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	695b      	ldr	r3, [r3, #20]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d01c      	beq.n	8002276 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800223c:	4b4b      	ldr	r3, [pc, #300]	@ (800236c <HAL_RCC_OscConfig+0x504>)
 800223e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002242:	4a4a      	ldr	r2, [pc, #296]	@ (800236c <HAL_RCC_OscConfig+0x504>)
 8002244:	f043 0301 	orr.w	r3, r3, #1
 8002248:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800224c:	f7ff fac6 	bl	80017dc <HAL_GetTick>
 8002250:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002252:	e008      	b.n	8002266 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002254:	f7ff fac2 	bl	80017dc <HAL_GetTick>
 8002258:	4602      	mov	r2, r0
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	1ad3      	subs	r3, r2, r3
 800225e:	2b02      	cmp	r3, #2
 8002260:	d901      	bls.n	8002266 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002262:	2303      	movs	r3, #3
 8002264:	e1d4      	b.n	8002610 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002266:	4b41      	ldr	r3, [pc, #260]	@ (800236c <HAL_RCC_OscConfig+0x504>)
 8002268:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800226c:	f003 0302 	and.w	r3, r3, #2
 8002270:	2b00      	cmp	r3, #0
 8002272:	d0ef      	beq.n	8002254 <HAL_RCC_OscConfig+0x3ec>
 8002274:	e01b      	b.n	80022ae <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002276:	4b3d      	ldr	r3, [pc, #244]	@ (800236c <HAL_RCC_OscConfig+0x504>)
 8002278:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800227c:	4a3b      	ldr	r2, [pc, #236]	@ (800236c <HAL_RCC_OscConfig+0x504>)
 800227e:	f023 0301 	bic.w	r3, r3, #1
 8002282:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002286:	f7ff faa9 	bl	80017dc <HAL_GetTick>
 800228a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800228c:	e008      	b.n	80022a0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800228e:	f7ff faa5 	bl	80017dc <HAL_GetTick>
 8002292:	4602      	mov	r2, r0
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	1ad3      	subs	r3, r2, r3
 8002298:	2b02      	cmp	r3, #2
 800229a:	d901      	bls.n	80022a0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800229c:	2303      	movs	r3, #3
 800229e:	e1b7      	b.n	8002610 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80022a0:	4b32      	ldr	r3, [pc, #200]	@ (800236c <HAL_RCC_OscConfig+0x504>)
 80022a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80022a6:	f003 0302 	and.w	r3, r3, #2
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d1ef      	bne.n	800228e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 0304 	and.w	r3, r3, #4
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	f000 80a6 	beq.w	8002408 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022bc:	2300      	movs	r3, #0
 80022be:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80022c0:	4b2a      	ldr	r3, [pc, #168]	@ (800236c <HAL_RCC_OscConfig+0x504>)
 80022c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d10d      	bne.n	80022e8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022cc:	4b27      	ldr	r3, [pc, #156]	@ (800236c <HAL_RCC_OscConfig+0x504>)
 80022ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022d0:	4a26      	ldr	r2, [pc, #152]	@ (800236c <HAL_RCC_OscConfig+0x504>)
 80022d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80022d6:	6593      	str	r3, [r2, #88]	@ 0x58
 80022d8:	4b24      	ldr	r3, [pc, #144]	@ (800236c <HAL_RCC_OscConfig+0x504>)
 80022da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022e0:	60bb      	str	r3, [r7, #8]
 80022e2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022e4:	2301      	movs	r3, #1
 80022e6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022e8:	4b21      	ldr	r3, [pc, #132]	@ (8002370 <HAL_RCC_OscConfig+0x508>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d118      	bne.n	8002326 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80022f4:	4b1e      	ldr	r3, [pc, #120]	@ (8002370 <HAL_RCC_OscConfig+0x508>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a1d      	ldr	r2, [pc, #116]	@ (8002370 <HAL_RCC_OscConfig+0x508>)
 80022fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022fe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002300:	f7ff fa6c 	bl	80017dc <HAL_GetTick>
 8002304:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002306:	e008      	b.n	800231a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002308:	f7ff fa68 	bl	80017dc <HAL_GetTick>
 800230c:	4602      	mov	r2, r0
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	1ad3      	subs	r3, r2, r3
 8002312:	2b02      	cmp	r3, #2
 8002314:	d901      	bls.n	800231a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002316:	2303      	movs	r3, #3
 8002318:	e17a      	b.n	8002610 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800231a:	4b15      	ldr	r3, [pc, #84]	@ (8002370 <HAL_RCC_OscConfig+0x508>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002322:	2b00      	cmp	r3, #0
 8002324:	d0f0      	beq.n	8002308 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	2b01      	cmp	r3, #1
 800232c:	d108      	bne.n	8002340 <HAL_RCC_OscConfig+0x4d8>
 800232e:	4b0f      	ldr	r3, [pc, #60]	@ (800236c <HAL_RCC_OscConfig+0x504>)
 8002330:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002334:	4a0d      	ldr	r2, [pc, #52]	@ (800236c <HAL_RCC_OscConfig+0x504>)
 8002336:	f043 0301 	orr.w	r3, r3, #1
 800233a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800233e:	e029      	b.n	8002394 <HAL_RCC_OscConfig+0x52c>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	2b05      	cmp	r3, #5
 8002346:	d115      	bne.n	8002374 <HAL_RCC_OscConfig+0x50c>
 8002348:	4b08      	ldr	r3, [pc, #32]	@ (800236c <HAL_RCC_OscConfig+0x504>)
 800234a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800234e:	4a07      	ldr	r2, [pc, #28]	@ (800236c <HAL_RCC_OscConfig+0x504>)
 8002350:	f043 0304 	orr.w	r3, r3, #4
 8002354:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002358:	4b04      	ldr	r3, [pc, #16]	@ (800236c <HAL_RCC_OscConfig+0x504>)
 800235a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800235e:	4a03      	ldr	r2, [pc, #12]	@ (800236c <HAL_RCC_OscConfig+0x504>)
 8002360:	f043 0301 	orr.w	r3, r3, #1
 8002364:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002368:	e014      	b.n	8002394 <HAL_RCC_OscConfig+0x52c>
 800236a:	bf00      	nop
 800236c:	40021000 	.word	0x40021000
 8002370:	40007000 	.word	0x40007000
 8002374:	4b9c      	ldr	r3, [pc, #624]	@ (80025e8 <HAL_RCC_OscConfig+0x780>)
 8002376:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800237a:	4a9b      	ldr	r2, [pc, #620]	@ (80025e8 <HAL_RCC_OscConfig+0x780>)
 800237c:	f023 0301 	bic.w	r3, r3, #1
 8002380:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002384:	4b98      	ldr	r3, [pc, #608]	@ (80025e8 <HAL_RCC_OscConfig+0x780>)
 8002386:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800238a:	4a97      	ldr	r2, [pc, #604]	@ (80025e8 <HAL_RCC_OscConfig+0x780>)
 800238c:	f023 0304 	bic.w	r3, r3, #4
 8002390:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d016      	beq.n	80023ca <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800239c:	f7ff fa1e 	bl	80017dc <HAL_GetTick>
 80023a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023a2:	e00a      	b.n	80023ba <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023a4:	f7ff fa1a 	bl	80017dc <HAL_GetTick>
 80023a8:	4602      	mov	r2, r0
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	1ad3      	subs	r3, r2, r3
 80023ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d901      	bls.n	80023ba <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80023b6:	2303      	movs	r3, #3
 80023b8:	e12a      	b.n	8002610 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023ba:	4b8b      	ldr	r3, [pc, #556]	@ (80025e8 <HAL_RCC_OscConfig+0x780>)
 80023bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023c0:	f003 0302 	and.w	r3, r3, #2
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d0ed      	beq.n	80023a4 <HAL_RCC_OscConfig+0x53c>
 80023c8:	e015      	b.n	80023f6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023ca:	f7ff fa07 	bl	80017dc <HAL_GetTick>
 80023ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80023d0:	e00a      	b.n	80023e8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023d2:	f7ff fa03 	bl	80017dc <HAL_GetTick>
 80023d6:	4602      	mov	r2, r0
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	1ad3      	subs	r3, r2, r3
 80023dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d901      	bls.n	80023e8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80023e4:	2303      	movs	r3, #3
 80023e6:	e113      	b.n	8002610 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80023e8:	4b7f      	ldr	r3, [pc, #508]	@ (80025e8 <HAL_RCC_OscConfig+0x780>)
 80023ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023ee:	f003 0302 	and.w	r3, r3, #2
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d1ed      	bne.n	80023d2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80023f6:	7ffb      	ldrb	r3, [r7, #31]
 80023f8:	2b01      	cmp	r3, #1
 80023fa:	d105      	bne.n	8002408 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023fc:	4b7a      	ldr	r3, [pc, #488]	@ (80025e8 <HAL_RCC_OscConfig+0x780>)
 80023fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002400:	4a79      	ldr	r2, [pc, #484]	@ (80025e8 <HAL_RCC_OscConfig+0x780>)
 8002402:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002406:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800240c:	2b00      	cmp	r3, #0
 800240e:	f000 80fe 	beq.w	800260e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002416:	2b02      	cmp	r3, #2
 8002418:	f040 80d0 	bne.w	80025bc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800241c:	4b72      	ldr	r3, [pc, #456]	@ (80025e8 <HAL_RCC_OscConfig+0x780>)
 800241e:	68db      	ldr	r3, [r3, #12]
 8002420:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	f003 0203 	and.w	r2, r3, #3
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800242c:	429a      	cmp	r2, r3
 800242e:	d130      	bne.n	8002492 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800243a:	3b01      	subs	r3, #1
 800243c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800243e:	429a      	cmp	r2, r3
 8002440:	d127      	bne.n	8002492 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800244c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800244e:	429a      	cmp	r2, r3
 8002450:	d11f      	bne.n	8002492 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002458:	687a      	ldr	r2, [r7, #4]
 800245a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800245c:	2a07      	cmp	r2, #7
 800245e:	bf14      	ite	ne
 8002460:	2201      	movne	r2, #1
 8002462:	2200      	moveq	r2, #0
 8002464:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002466:	4293      	cmp	r3, r2
 8002468:	d113      	bne.n	8002492 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002474:	085b      	lsrs	r3, r3, #1
 8002476:	3b01      	subs	r3, #1
 8002478:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800247a:	429a      	cmp	r2, r3
 800247c:	d109      	bne.n	8002492 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002488:	085b      	lsrs	r3, r3, #1
 800248a:	3b01      	subs	r3, #1
 800248c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800248e:	429a      	cmp	r2, r3
 8002490:	d06e      	beq.n	8002570 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002492:	69bb      	ldr	r3, [r7, #24]
 8002494:	2b0c      	cmp	r3, #12
 8002496:	d069      	beq.n	800256c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002498:	4b53      	ldr	r3, [pc, #332]	@ (80025e8 <HAL_RCC_OscConfig+0x780>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d105      	bne.n	80024b0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80024a4:	4b50      	ldr	r3, [pc, #320]	@ (80025e8 <HAL_RCC_OscConfig+0x780>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d001      	beq.n	80024b4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80024b0:	2301      	movs	r3, #1
 80024b2:	e0ad      	b.n	8002610 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80024b4:	4b4c      	ldr	r3, [pc, #304]	@ (80025e8 <HAL_RCC_OscConfig+0x780>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a4b      	ldr	r2, [pc, #300]	@ (80025e8 <HAL_RCC_OscConfig+0x780>)
 80024ba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80024be:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80024c0:	f7ff f98c 	bl	80017dc <HAL_GetTick>
 80024c4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024c6:	e008      	b.n	80024da <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024c8:	f7ff f988 	bl	80017dc <HAL_GetTick>
 80024cc:	4602      	mov	r2, r0
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	2b02      	cmp	r3, #2
 80024d4:	d901      	bls.n	80024da <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80024d6:	2303      	movs	r3, #3
 80024d8:	e09a      	b.n	8002610 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024da:	4b43      	ldr	r3, [pc, #268]	@ (80025e8 <HAL_RCC_OscConfig+0x780>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d1f0      	bne.n	80024c8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024e6:	4b40      	ldr	r3, [pc, #256]	@ (80025e8 <HAL_RCC_OscConfig+0x780>)
 80024e8:	68da      	ldr	r2, [r3, #12]
 80024ea:	4b40      	ldr	r3, [pc, #256]	@ (80025ec <HAL_RCC_OscConfig+0x784>)
 80024ec:	4013      	ands	r3, r2
 80024ee:	687a      	ldr	r2, [r7, #4]
 80024f0:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80024f2:	687a      	ldr	r2, [r7, #4]
 80024f4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80024f6:	3a01      	subs	r2, #1
 80024f8:	0112      	lsls	r2, r2, #4
 80024fa:	4311      	orrs	r1, r2
 80024fc:	687a      	ldr	r2, [r7, #4]
 80024fe:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002500:	0212      	lsls	r2, r2, #8
 8002502:	4311      	orrs	r1, r2
 8002504:	687a      	ldr	r2, [r7, #4]
 8002506:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002508:	0852      	lsrs	r2, r2, #1
 800250a:	3a01      	subs	r2, #1
 800250c:	0552      	lsls	r2, r2, #21
 800250e:	4311      	orrs	r1, r2
 8002510:	687a      	ldr	r2, [r7, #4]
 8002512:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002514:	0852      	lsrs	r2, r2, #1
 8002516:	3a01      	subs	r2, #1
 8002518:	0652      	lsls	r2, r2, #25
 800251a:	4311      	orrs	r1, r2
 800251c:	687a      	ldr	r2, [r7, #4]
 800251e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002520:	0912      	lsrs	r2, r2, #4
 8002522:	0452      	lsls	r2, r2, #17
 8002524:	430a      	orrs	r2, r1
 8002526:	4930      	ldr	r1, [pc, #192]	@ (80025e8 <HAL_RCC_OscConfig+0x780>)
 8002528:	4313      	orrs	r3, r2
 800252a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800252c:	4b2e      	ldr	r3, [pc, #184]	@ (80025e8 <HAL_RCC_OscConfig+0x780>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a2d      	ldr	r2, [pc, #180]	@ (80025e8 <HAL_RCC_OscConfig+0x780>)
 8002532:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002536:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002538:	4b2b      	ldr	r3, [pc, #172]	@ (80025e8 <HAL_RCC_OscConfig+0x780>)
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	4a2a      	ldr	r2, [pc, #168]	@ (80025e8 <HAL_RCC_OscConfig+0x780>)
 800253e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002542:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002544:	f7ff f94a 	bl	80017dc <HAL_GetTick>
 8002548:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800254a:	e008      	b.n	800255e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800254c:	f7ff f946 	bl	80017dc <HAL_GetTick>
 8002550:	4602      	mov	r2, r0
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	1ad3      	subs	r3, r2, r3
 8002556:	2b02      	cmp	r3, #2
 8002558:	d901      	bls.n	800255e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800255a:	2303      	movs	r3, #3
 800255c:	e058      	b.n	8002610 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800255e:	4b22      	ldr	r3, [pc, #136]	@ (80025e8 <HAL_RCC_OscConfig+0x780>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002566:	2b00      	cmp	r3, #0
 8002568:	d0f0      	beq.n	800254c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800256a:	e050      	b.n	800260e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	e04f      	b.n	8002610 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002570:	4b1d      	ldr	r3, [pc, #116]	@ (80025e8 <HAL_RCC_OscConfig+0x780>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002578:	2b00      	cmp	r3, #0
 800257a:	d148      	bne.n	800260e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800257c:	4b1a      	ldr	r3, [pc, #104]	@ (80025e8 <HAL_RCC_OscConfig+0x780>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a19      	ldr	r2, [pc, #100]	@ (80025e8 <HAL_RCC_OscConfig+0x780>)
 8002582:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002586:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002588:	4b17      	ldr	r3, [pc, #92]	@ (80025e8 <HAL_RCC_OscConfig+0x780>)
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	4a16      	ldr	r2, [pc, #88]	@ (80025e8 <HAL_RCC_OscConfig+0x780>)
 800258e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002592:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002594:	f7ff f922 	bl	80017dc <HAL_GetTick>
 8002598:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800259a:	e008      	b.n	80025ae <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800259c:	f7ff f91e 	bl	80017dc <HAL_GetTick>
 80025a0:	4602      	mov	r2, r0
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	2b02      	cmp	r3, #2
 80025a8:	d901      	bls.n	80025ae <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80025aa:	2303      	movs	r3, #3
 80025ac:	e030      	b.n	8002610 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025ae:	4b0e      	ldr	r3, [pc, #56]	@ (80025e8 <HAL_RCC_OscConfig+0x780>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d0f0      	beq.n	800259c <HAL_RCC_OscConfig+0x734>
 80025ba:	e028      	b.n	800260e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80025bc:	69bb      	ldr	r3, [r7, #24]
 80025be:	2b0c      	cmp	r3, #12
 80025c0:	d023      	beq.n	800260a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025c2:	4b09      	ldr	r3, [pc, #36]	@ (80025e8 <HAL_RCC_OscConfig+0x780>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a08      	ldr	r2, [pc, #32]	@ (80025e8 <HAL_RCC_OscConfig+0x780>)
 80025c8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80025cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ce:	f7ff f905 	bl	80017dc <HAL_GetTick>
 80025d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025d4:	e00c      	b.n	80025f0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025d6:	f7ff f901 	bl	80017dc <HAL_GetTick>
 80025da:	4602      	mov	r2, r0
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	1ad3      	subs	r3, r2, r3
 80025e0:	2b02      	cmp	r3, #2
 80025e2:	d905      	bls.n	80025f0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80025e4:	2303      	movs	r3, #3
 80025e6:	e013      	b.n	8002610 <HAL_RCC_OscConfig+0x7a8>
 80025e8:	40021000 	.word	0x40021000
 80025ec:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025f0:	4b09      	ldr	r3, [pc, #36]	@ (8002618 <HAL_RCC_OscConfig+0x7b0>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d1ec      	bne.n	80025d6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80025fc:	4b06      	ldr	r3, [pc, #24]	@ (8002618 <HAL_RCC_OscConfig+0x7b0>)
 80025fe:	68da      	ldr	r2, [r3, #12]
 8002600:	4905      	ldr	r1, [pc, #20]	@ (8002618 <HAL_RCC_OscConfig+0x7b0>)
 8002602:	4b06      	ldr	r3, [pc, #24]	@ (800261c <HAL_RCC_OscConfig+0x7b4>)
 8002604:	4013      	ands	r3, r2
 8002606:	60cb      	str	r3, [r1, #12]
 8002608:	e001      	b.n	800260e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e000      	b.n	8002610 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800260e:	2300      	movs	r3, #0
}
 8002610:	4618      	mov	r0, r3
 8002612:	3720      	adds	r7, #32
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}
 8002618:	40021000 	.word	0x40021000
 800261c:	feeefffc 	.word	0xfeeefffc

08002620 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b084      	sub	sp, #16
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
 8002628:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d101      	bne.n	8002634 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	e0e7      	b.n	8002804 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002634:	4b75      	ldr	r3, [pc, #468]	@ (800280c <HAL_RCC_ClockConfig+0x1ec>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 0307 	and.w	r3, r3, #7
 800263c:	683a      	ldr	r2, [r7, #0]
 800263e:	429a      	cmp	r2, r3
 8002640:	d910      	bls.n	8002664 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002642:	4b72      	ldr	r3, [pc, #456]	@ (800280c <HAL_RCC_ClockConfig+0x1ec>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f023 0207 	bic.w	r2, r3, #7
 800264a:	4970      	ldr	r1, [pc, #448]	@ (800280c <HAL_RCC_ClockConfig+0x1ec>)
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	4313      	orrs	r3, r2
 8002650:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002652:	4b6e      	ldr	r3, [pc, #440]	@ (800280c <HAL_RCC_ClockConfig+0x1ec>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 0307 	and.w	r3, r3, #7
 800265a:	683a      	ldr	r2, [r7, #0]
 800265c:	429a      	cmp	r2, r3
 800265e:	d001      	beq.n	8002664 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	e0cf      	b.n	8002804 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 0302 	and.w	r3, r3, #2
 800266c:	2b00      	cmp	r3, #0
 800266e:	d010      	beq.n	8002692 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	689a      	ldr	r2, [r3, #8]
 8002674:	4b66      	ldr	r3, [pc, #408]	@ (8002810 <HAL_RCC_ClockConfig+0x1f0>)
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800267c:	429a      	cmp	r2, r3
 800267e:	d908      	bls.n	8002692 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002680:	4b63      	ldr	r3, [pc, #396]	@ (8002810 <HAL_RCC_ClockConfig+0x1f0>)
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	4960      	ldr	r1, [pc, #384]	@ (8002810 <HAL_RCC_ClockConfig+0x1f0>)
 800268e:	4313      	orrs	r3, r2
 8002690:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 0301 	and.w	r3, r3, #1
 800269a:	2b00      	cmp	r3, #0
 800269c:	d04c      	beq.n	8002738 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	2b03      	cmp	r3, #3
 80026a4:	d107      	bne.n	80026b6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026a6:	4b5a      	ldr	r3, [pc, #360]	@ (8002810 <HAL_RCC_ClockConfig+0x1f0>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d121      	bne.n	80026f6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e0a6      	b.n	8002804 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	2b02      	cmp	r3, #2
 80026bc:	d107      	bne.n	80026ce <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026be:	4b54      	ldr	r3, [pc, #336]	@ (8002810 <HAL_RCC_ClockConfig+0x1f0>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d115      	bne.n	80026f6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	e09a      	b.n	8002804 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d107      	bne.n	80026e6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80026d6:	4b4e      	ldr	r3, [pc, #312]	@ (8002810 <HAL_RCC_ClockConfig+0x1f0>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 0302 	and.w	r3, r3, #2
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d109      	bne.n	80026f6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e08e      	b.n	8002804 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026e6:	4b4a      	ldr	r3, [pc, #296]	@ (8002810 <HAL_RCC_ClockConfig+0x1f0>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d101      	bne.n	80026f6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e086      	b.n	8002804 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80026f6:	4b46      	ldr	r3, [pc, #280]	@ (8002810 <HAL_RCC_ClockConfig+0x1f0>)
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	f023 0203 	bic.w	r2, r3, #3
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	4943      	ldr	r1, [pc, #268]	@ (8002810 <HAL_RCC_ClockConfig+0x1f0>)
 8002704:	4313      	orrs	r3, r2
 8002706:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002708:	f7ff f868 	bl	80017dc <HAL_GetTick>
 800270c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800270e:	e00a      	b.n	8002726 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002710:	f7ff f864 	bl	80017dc <HAL_GetTick>
 8002714:	4602      	mov	r2, r0
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	1ad3      	subs	r3, r2, r3
 800271a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800271e:	4293      	cmp	r3, r2
 8002720:	d901      	bls.n	8002726 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002722:	2303      	movs	r3, #3
 8002724:	e06e      	b.n	8002804 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002726:	4b3a      	ldr	r3, [pc, #232]	@ (8002810 <HAL_RCC_ClockConfig+0x1f0>)
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	f003 020c 	and.w	r2, r3, #12
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	009b      	lsls	r3, r3, #2
 8002734:	429a      	cmp	r2, r3
 8002736:	d1eb      	bne.n	8002710 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f003 0302 	and.w	r3, r3, #2
 8002740:	2b00      	cmp	r3, #0
 8002742:	d010      	beq.n	8002766 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	689a      	ldr	r2, [r3, #8]
 8002748:	4b31      	ldr	r3, [pc, #196]	@ (8002810 <HAL_RCC_ClockConfig+0x1f0>)
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002750:	429a      	cmp	r2, r3
 8002752:	d208      	bcs.n	8002766 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002754:	4b2e      	ldr	r3, [pc, #184]	@ (8002810 <HAL_RCC_ClockConfig+0x1f0>)
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	492b      	ldr	r1, [pc, #172]	@ (8002810 <HAL_RCC_ClockConfig+0x1f0>)
 8002762:	4313      	orrs	r3, r2
 8002764:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002766:	4b29      	ldr	r3, [pc, #164]	@ (800280c <HAL_RCC_ClockConfig+0x1ec>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f003 0307 	and.w	r3, r3, #7
 800276e:	683a      	ldr	r2, [r7, #0]
 8002770:	429a      	cmp	r2, r3
 8002772:	d210      	bcs.n	8002796 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002774:	4b25      	ldr	r3, [pc, #148]	@ (800280c <HAL_RCC_ClockConfig+0x1ec>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f023 0207 	bic.w	r2, r3, #7
 800277c:	4923      	ldr	r1, [pc, #140]	@ (800280c <HAL_RCC_ClockConfig+0x1ec>)
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	4313      	orrs	r3, r2
 8002782:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002784:	4b21      	ldr	r3, [pc, #132]	@ (800280c <HAL_RCC_ClockConfig+0x1ec>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f003 0307 	and.w	r3, r3, #7
 800278c:	683a      	ldr	r2, [r7, #0]
 800278e:	429a      	cmp	r2, r3
 8002790:	d001      	beq.n	8002796 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	e036      	b.n	8002804 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 0304 	and.w	r3, r3, #4
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d008      	beq.n	80027b4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027a2:	4b1b      	ldr	r3, [pc, #108]	@ (8002810 <HAL_RCC_ClockConfig+0x1f0>)
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	68db      	ldr	r3, [r3, #12]
 80027ae:	4918      	ldr	r1, [pc, #96]	@ (8002810 <HAL_RCC_ClockConfig+0x1f0>)
 80027b0:	4313      	orrs	r3, r2
 80027b2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f003 0308 	and.w	r3, r3, #8
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d009      	beq.n	80027d4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80027c0:	4b13      	ldr	r3, [pc, #76]	@ (8002810 <HAL_RCC_ClockConfig+0x1f0>)
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	691b      	ldr	r3, [r3, #16]
 80027cc:	00db      	lsls	r3, r3, #3
 80027ce:	4910      	ldr	r1, [pc, #64]	@ (8002810 <HAL_RCC_ClockConfig+0x1f0>)
 80027d0:	4313      	orrs	r3, r2
 80027d2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80027d4:	f000 f824 	bl	8002820 <HAL_RCC_GetSysClockFreq>
 80027d8:	4602      	mov	r2, r0
 80027da:	4b0d      	ldr	r3, [pc, #52]	@ (8002810 <HAL_RCC_ClockConfig+0x1f0>)
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	091b      	lsrs	r3, r3, #4
 80027e0:	f003 030f 	and.w	r3, r3, #15
 80027e4:	490b      	ldr	r1, [pc, #44]	@ (8002814 <HAL_RCC_ClockConfig+0x1f4>)
 80027e6:	5ccb      	ldrb	r3, [r1, r3]
 80027e8:	f003 031f 	and.w	r3, r3, #31
 80027ec:	fa22 f303 	lsr.w	r3, r2, r3
 80027f0:	4a09      	ldr	r2, [pc, #36]	@ (8002818 <HAL_RCC_ClockConfig+0x1f8>)
 80027f2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80027f4:	4b09      	ldr	r3, [pc, #36]	@ (800281c <HAL_RCC_ClockConfig+0x1fc>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4618      	mov	r0, r3
 80027fa:	f7fe fe5f 	bl	80014bc <HAL_InitTick>
 80027fe:	4603      	mov	r3, r0
 8002800:	72fb      	strb	r3, [r7, #11]

  return status;
 8002802:	7afb      	ldrb	r3, [r7, #11]
}
 8002804:	4618      	mov	r0, r3
 8002806:	3710      	adds	r7, #16
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}
 800280c:	40022000 	.word	0x40022000
 8002810:	40021000 	.word	0x40021000
 8002814:	0800803c 	.word	0x0800803c
 8002818:	20000000 	.word	0x20000000
 800281c:	20000004 	.word	0x20000004

08002820 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002820:	b480      	push	{r7}
 8002822:	b089      	sub	sp, #36	@ 0x24
 8002824:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002826:	2300      	movs	r3, #0
 8002828:	61fb      	str	r3, [r7, #28]
 800282a:	2300      	movs	r3, #0
 800282c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800282e:	4b3e      	ldr	r3, [pc, #248]	@ (8002928 <HAL_RCC_GetSysClockFreq+0x108>)
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	f003 030c 	and.w	r3, r3, #12
 8002836:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002838:	4b3b      	ldr	r3, [pc, #236]	@ (8002928 <HAL_RCC_GetSysClockFreq+0x108>)
 800283a:	68db      	ldr	r3, [r3, #12]
 800283c:	f003 0303 	and.w	r3, r3, #3
 8002840:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d005      	beq.n	8002854 <HAL_RCC_GetSysClockFreq+0x34>
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	2b0c      	cmp	r3, #12
 800284c:	d121      	bne.n	8002892 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	2b01      	cmp	r3, #1
 8002852:	d11e      	bne.n	8002892 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002854:	4b34      	ldr	r3, [pc, #208]	@ (8002928 <HAL_RCC_GetSysClockFreq+0x108>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f003 0308 	and.w	r3, r3, #8
 800285c:	2b00      	cmp	r3, #0
 800285e:	d107      	bne.n	8002870 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002860:	4b31      	ldr	r3, [pc, #196]	@ (8002928 <HAL_RCC_GetSysClockFreq+0x108>)
 8002862:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002866:	0a1b      	lsrs	r3, r3, #8
 8002868:	f003 030f 	and.w	r3, r3, #15
 800286c:	61fb      	str	r3, [r7, #28]
 800286e:	e005      	b.n	800287c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002870:	4b2d      	ldr	r3, [pc, #180]	@ (8002928 <HAL_RCC_GetSysClockFreq+0x108>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	091b      	lsrs	r3, r3, #4
 8002876:	f003 030f 	and.w	r3, r3, #15
 800287a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800287c:	4a2b      	ldr	r2, [pc, #172]	@ (800292c <HAL_RCC_GetSysClockFreq+0x10c>)
 800287e:	69fb      	ldr	r3, [r7, #28]
 8002880:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002884:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d10d      	bne.n	80028a8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800288c:	69fb      	ldr	r3, [r7, #28]
 800288e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002890:	e00a      	b.n	80028a8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	2b04      	cmp	r3, #4
 8002896:	d102      	bne.n	800289e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002898:	4b25      	ldr	r3, [pc, #148]	@ (8002930 <HAL_RCC_GetSysClockFreq+0x110>)
 800289a:	61bb      	str	r3, [r7, #24]
 800289c:	e004      	b.n	80028a8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	2b08      	cmp	r3, #8
 80028a2:	d101      	bne.n	80028a8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80028a4:	4b23      	ldr	r3, [pc, #140]	@ (8002934 <HAL_RCC_GetSysClockFreq+0x114>)
 80028a6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80028a8:	693b      	ldr	r3, [r7, #16]
 80028aa:	2b0c      	cmp	r3, #12
 80028ac:	d134      	bne.n	8002918 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80028ae:	4b1e      	ldr	r3, [pc, #120]	@ (8002928 <HAL_RCC_GetSysClockFreq+0x108>)
 80028b0:	68db      	ldr	r3, [r3, #12]
 80028b2:	f003 0303 	and.w	r3, r3, #3
 80028b6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	2b02      	cmp	r3, #2
 80028bc:	d003      	beq.n	80028c6 <HAL_RCC_GetSysClockFreq+0xa6>
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	2b03      	cmp	r3, #3
 80028c2:	d003      	beq.n	80028cc <HAL_RCC_GetSysClockFreq+0xac>
 80028c4:	e005      	b.n	80028d2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80028c6:	4b1a      	ldr	r3, [pc, #104]	@ (8002930 <HAL_RCC_GetSysClockFreq+0x110>)
 80028c8:	617b      	str	r3, [r7, #20]
      break;
 80028ca:	e005      	b.n	80028d8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80028cc:	4b19      	ldr	r3, [pc, #100]	@ (8002934 <HAL_RCC_GetSysClockFreq+0x114>)
 80028ce:	617b      	str	r3, [r7, #20]
      break;
 80028d0:	e002      	b.n	80028d8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80028d2:	69fb      	ldr	r3, [r7, #28]
 80028d4:	617b      	str	r3, [r7, #20]
      break;
 80028d6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80028d8:	4b13      	ldr	r3, [pc, #76]	@ (8002928 <HAL_RCC_GetSysClockFreq+0x108>)
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	091b      	lsrs	r3, r3, #4
 80028de:	f003 0307 	and.w	r3, r3, #7
 80028e2:	3301      	adds	r3, #1
 80028e4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80028e6:	4b10      	ldr	r3, [pc, #64]	@ (8002928 <HAL_RCC_GetSysClockFreq+0x108>)
 80028e8:	68db      	ldr	r3, [r3, #12]
 80028ea:	0a1b      	lsrs	r3, r3, #8
 80028ec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80028f0:	697a      	ldr	r2, [r7, #20]
 80028f2:	fb03 f202 	mul.w	r2, r3, r2
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80028fc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80028fe:	4b0a      	ldr	r3, [pc, #40]	@ (8002928 <HAL_RCC_GetSysClockFreq+0x108>)
 8002900:	68db      	ldr	r3, [r3, #12]
 8002902:	0e5b      	lsrs	r3, r3, #25
 8002904:	f003 0303 	and.w	r3, r3, #3
 8002908:	3301      	adds	r3, #1
 800290a:	005b      	lsls	r3, r3, #1
 800290c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800290e:	697a      	ldr	r2, [r7, #20]
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	fbb2 f3f3 	udiv	r3, r2, r3
 8002916:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002918:	69bb      	ldr	r3, [r7, #24]
}
 800291a:	4618      	mov	r0, r3
 800291c:	3724      	adds	r7, #36	@ 0x24
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr
 8002926:	bf00      	nop
 8002928:	40021000 	.word	0x40021000
 800292c:	08008054 	.word	0x08008054
 8002930:	00f42400 	.word	0x00f42400
 8002934:	007a1200 	.word	0x007a1200

08002938 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002938:	b480      	push	{r7}
 800293a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800293c:	4b03      	ldr	r3, [pc, #12]	@ (800294c <HAL_RCC_GetHCLKFreq+0x14>)
 800293e:	681b      	ldr	r3, [r3, #0]
}
 8002940:	4618      	mov	r0, r3
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr
 800294a:	bf00      	nop
 800294c:	20000000 	.word	0x20000000

08002950 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002954:	f7ff fff0 	bl	8002938 <HAL_RCC_GetHCLKFreq>
 8002958:	4602      	mov	r2, r0
 800295a:	4b06      	ldr	r3, [pc, #24]	@ (8002974 <HAL_RCC_GetPCLK1Freq+0x24>)
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	0a1b      	lsrs	r3, r3, #8
 8002960:	f003 0307 	and.w	r3, r3, #7
 8002964:	4904      	ldr	r1, [pc, #16]	@ (8002978 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002966:	5ccb      	ldrb	r3, [r1, r3]
 8002968:	f003 031f 	and.w	r3, r3, #31
 800296c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002970:	4618      	mov	r0, r3
 8002972:	bd80      	pop	{r7, pc}
 8002974:	40021000 	.word	0x40021000
 8002978:	0800804c 	.word	0x0800804c

0800297c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002980:	f7ff ffda 	bl	8002938 <HAL_RCC_GetHCLKFreq>
 8002984:	4602      	mov	r2, r0
 8002986:	4b06      	ldr	r3, [pc, #24]	@ (80029a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	0adb      	lsrs	r3, r3, #11
 800298c:	f003 0307 	and.w	r3, r3, #7
 8002990:	4904      	ldr	r1, [pc, #16]	@ (80029a4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002992:	5ccb      	ldrb	r3, [r1, r3]
 8002994:	f003 031f 	and.w	r3, r3, #31
 8002998:	fa22 f303 	lsr.w	r3, r2, r3
}
 800299c:	4618      	mov	r0, r3
 800299e:	bd80      	pop	{r7, pc}
 80029a0:	40021000 	.word	0x40021000
 80029a4:	0800804c 	.word	0x0800804c

080029a8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b083      	sub	sp, #12
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
 80029b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	220f      	movs	r2, #15
 80029b6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80029b8:	4b12      	ldr	r3, [pc, #72]	@ (8002a04 <HAL_RCC_GetClockConfig+0x5c>)
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	f003 0203 	and.w	r2, r3, #3
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80029c4:	4b0f      	ldr	r3, [pc, #60]	@ (8002a04 <HAL_RCC_GetClockConfig+0x5c>)
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80029d0:	4b0c      	ldr	r3, [pc, #48]	@ (8002a04 <HAL_RCC_GetClockConfig+0x5c>)
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80029dc:	4b09      	ldr	r3, [pc, #36]	@ (8002a04 <HAL_RCC_GetClockConfig+0x5c>)
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	08db      	lsrs	r3, r3, #3
 80029e2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80029ea:	4b07      	ldr	r3, [pc, #28]	@ (8002a08 <HAL_RCC_GetClockConfig+0x60>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f003 0207 	and.w	r2, r3, #7
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	601a      	str	r2, [r3, #0]
}
 80029f6:	bf00      	nop
 80029f8:	370c      	adds	r7, #12
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr
 8002a02:	bf00      	nop
 8002a04:	40021000 	.word	0x40021000
 8002a08:	40022000 	.word	0x40022000

08002a0c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b086      	sub	sp, #24
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002a14:	2300      	movs	r3, #0
 8002a16:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002a18:	4b2a      	ldr	r3, [pc, #168]	@ (8002ac4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a1c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d003      	beq.n	8002a2c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002a24:	f7ff f9bc 	bl	8001da0 <HAL_PWREx_GetVoltageRange>
 8002a28:	6178      	str	r0, [r7, #20]
 8002a2a:	e014      	b.n	8002a56 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002a2c:	4b25      	ldr	r3, [pc, #148]	@ (8002ac4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a30:	4a24      	ldr	r2, [pc, #144]	@ (8002ac4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a32:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a36:	6593      	str	r3, [r2, #88]	@ 0x58
 8002a38:	4b22      	ldr	r3, [pc, #136]	@ (8002ac4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a3c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a40:	60fb      	str	r3, [r7, #12]
 8002a42:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002a44:	f7ff f9ac 	bl	8001da0 <HAL_PWREx_GetVoltageRange>
 8002a48:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002a4a:	4b1e      	ldr	r3, [pc, #120]	@ (8002ac4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a4e:	4a1d      	ldr	r2, [pc, #116]	@ (8002ac4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a50:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a54:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002a5c:	d10b      	bne.n	8002a76 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2b80      	cmp	r3, #128	@ 0x80
 8002a62:	d919      	bls.n	8002a98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2ba0      	cmp	r3, #160	@ 0xa0
 8002a68:	d902      	bls.n	8002a70 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002a6a:	2302      	movs	r3, #2
 8002a6c:	613b      	str	r3, [r7, #16]
 8002a6e:	e013      	b.n	8002a98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002a70:	2301      	movs	r3, #1
 8002a72:	613b      	str	r3, [r7, #16]
 8002a74:	e010      	b.n	8002a98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2b80      	cmp	r3, #128	@ 0x80
 8002a7a:	d902      	bls.n	8002a82 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002a7c:	2303      	movs	r3, #3
 8002a7e:	613b      	str	r3, [r7, #16]
 8002a80:	e00a      	b.n	8002a98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2b80      	cmp	r3, #128	@ 0x80
 8002a86:	d102      	bne.n	8002a8e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002a88:	2302      	movs	r3, #2
 8002a8a:	613b      	str	r3, [r7, #16]
 8002a8c:	e004      	b.n	8002a98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2b70      	cmp	r3, #112	@ 0x70
 8002a92:	d101      	bne.n	8002a98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002a94:	2301      	movs	r3, #1
 8002a96:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002a98:	4b0b      	ldr	r3, [pc, #44]	@ (8002ac8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f023 0207 	bic.w	r2, r3, #7
 8002aa0:	4909      	ldr	r1, [pc, #36]	@ (8002ac8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002aa8:	4b07      	ldr	r3, [pc, #28]	@ (8002ac8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 0307 	and.w	r3, r3, #7
 8002ab0:	693a      	ldr	r2, [r7, #16]
 8002ab2:	429a      	cmp	r2, r3
 8002ab4:	d001      	beq.n	8002aba <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e000      	b.n	8002abc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002aba:	2300      	movs	r3, #0
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	3718      	adds	r7, #24
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}
 8002ac4:	40021000 	.word	0x40021000
 8002ac8:	40022000 	.word	0x40022000

08002acc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b086      	sub	sp, #24
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002ad8:	2300      	movs	r3, #0
 8002ada:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d041      	beq.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002aec:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002af0:	d02a      	beq.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002af2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002af6:	d824      	bhi.n	8002b42 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002af8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002afc:	d008      	beq.n	8002b10 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002afe:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002b02:	d81e      	bhi.n	8002b42 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d00a      	beq.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002b08:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002b0c:	d010      	beq.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002b0e:	e018      	b.n	8002b42 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002b10:	4b86      	ldr	r3, [pc, #536]	@ (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	4a85      	ldr	r2, [pc, #532]	@ (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b16:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b1a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002b1c:	e015      	b.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	3304      	adds	r3, #4
 8002b22:	2100      	movs	r1, #0
 8002b24:	4618      	mov	r0, r3
 8002b26:	f000 fabb 	bl	80030a0 <RCCEx_PLLSAI1_Config>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002b2e:	e00c      	b.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	3320      	adds	r3, #32
 8002b34:	2100      	movs	r1, #0
 8002b36:	4618      	mov	r0, r3
 8002b38:	f000 fba6 	bl	8003288 <RCCEx_PLLSAI2_Config>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002b40:	e003      	b.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	74fb      	strb	r3, [r7, #19]
      break;
 8002b46:	e000      	b.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002b48:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b4a:	7cfb      	ldrb	r3, [r7, #19]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d10b      	bne.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002b50:	4b76      	ldr	r3, [pc, #472]	@ (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b56:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002b5e:	4973      	ldr	r1, [pc, #460]	@ (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b60:	4313      	orrs	r3, r2
 8002b62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002b66:	e001      	b.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b68:	7cfb      	ldrb	r3, [r7, #19]
 8002b6a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d041      	beq.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002b7c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002b80:	d02a      	beq.n	8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002b82:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002b86:	d824      	bhi.n	8002bd2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002b88:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002b8c:	d008      	beq.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002b8e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002b92:	d81e      	bhi.n	8002bd2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d00a      	beq.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002b98:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002b9c:	d010      	beq.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002b9e:	e018      	b.n	8002bd2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002ba0:	4b62      	ldr	r3, [pc, #392]	@ (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ba2:	68db      	ldr	r3, [r3, #12]
 8002ba4:	4a61      	ldr	r2, [pc, #388]	@ (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ba6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002baa:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002bac:	e015      	b.n	8002bda <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	3304      	adds	r3, #4
 8002bb2:	2100      	movs	r1, #0
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f000 fa73 	bl	80030a0 <RCCEx_PLLSAI1_Config>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002bbe:	e00c      	b.n	8002bda <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	3320      	adds	r3, #32
 8002bc4:	2100      	movs	r1, #0
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f000 fb5e 	bl	8003288 <RCCEx_PLLSAI2_Config>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002bd0:	e003      	b.n	8002bda <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	74fb      	strb	r3, [r7, #19]
      break;
 8002bd6:	e000      	b.n	8002bda <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002bd8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002bda:	7cfb      	ldrb	r3, [r7, #19]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d10b      	bne.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002be0:	4b52      	ldr	r3, [pc, #328]	@ (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002be6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002bee:	494f      	ldr	r1, [pc, #316]	@ (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002bf6:	e001      	b.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bf8:	7cfb      	ldrb	r3, [r7, #19]
 8002bfa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	f000 80a0 	beq.w	8002d4a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002c0e:	4b47      	ldr	r3, [pc, #284]	@ (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d101      	bne.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e000      	b.n	8002c20 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002c1e:	2300      	movs	r3, #0
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d00d      	beq.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c24:	4b41      	ldr	r3, [pc, #260]	@ (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c28:	4a40      	ldr	r2, [pc, #256]	@ (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c2a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c2e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002c30:	4b3e      	ldr	r3, [pc, #248]	@ (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c34:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c38:	60bb      	str	r3, [r7, #8]
 8002c3a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c40:	4b3b      	ldr	r3, [pc, #236]	@ (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a3a      	ldr	r2, [pc, #232]	@ (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002c46:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c4a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002c4c:	f7fe fdc6 	bl	80017dc <HAL_GetTick>
 8002c50:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002c52:	e009      	b.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c54:	f7fe fdc2 	bl	80017dc <HAL_GetTick>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	1ad3      	subs	r3, r2, r3
 8002c5e:	2b02      	cmp	r3, #2
 8002c60:	d902      	bls.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002c62:	2303      	movs	r3, #3
 8002c64:	74fb      	strb	r3, [r7, #19]
        break;
 8002c66:	e005      	b.n	8002c74 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002c68:	4b31      	ldr	r3, [pc, #196]	@ (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d0ef      	beq.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002c74:	7cfb      	ldrb	r3, [r7, #19]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d15c      	bne.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002c7a:	4b2c      	ldr	r3, [pc, #176]	@ (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c80:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c84:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d01f      	beq.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002c92:	697a      	ldr	r2, [r7, #20]
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d019      	beq.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002c98:	4b24      	ldr	r3, [pc, #144]	@ (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c9e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002ca2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002ca4:	4b21      	ldr	r3, [pc, #132]	@ (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ca6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002caa:	4a20      	ldr	r2, [pc, #128]	@ (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cb0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002cb4:	4b1d      	ldr	r3, [pc, #116]	@ (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cba:	4a1c      	ldr	r2, [pc, #112]	@ (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cbc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002cc0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002cc4:	4a19      	ldr	r2, [pc, #100]	@ (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	f003 0301 	and.w	r3, r3, #1
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d016      	beq.n	8002d04 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cd6:	f7fe fd81 	bl	80017dc <HAL_GetTick>
 8002cda:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cdc:	e00b      	b.n	8002cf6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cde:	f7fe fd7d 	bl	80017dc <HAL_GetTick>
 8002ce2:	4602      	mov	r2, r0
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	1ad3      	subs	r3, r2, r3
 8002ce8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d902      	bls.n	8002cf6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002cf0:	2303      	movs	r3, #3
 8002cf2:	74fb      	strb	r3, [r7, #19]
            break;
 8002cf4:	e006      	b.n	8002d04 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cf6:	4b0d      	ldr	r3, [pc, #52]	@ (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cfc:	f003 0302 	and.w	r3, r3, #2
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d0ec      	beq.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002d04:	7cfb      	ldrb	r3, [r7, #19]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d10c      	bne.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d0a:	4b08      	ldr	r3, [pc, #32]	@ (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d10:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002d1a:	4904      	ldr	r1, [pc, #16]	@ (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002d22:	e009      	b.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002d24:	7cfb      	ldrb	r3, [r7, #19]
 8002d26:	74bb      	strb	r3, [r7, #18]
 8002d28:	e006      	b.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002d2a:	bf00      	nop
 8002d2c:	40021000 	.word	0x40021000
 8002d30:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d34:	7cfb      	ldrb	r3, [r7, #19]
 8002d36:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d38:	7c7b      	ldrb	r3, [r7, #17]
 8002d3a:	2b01      	cmp	r3, #1
 8002d3c:	d105      	bne.n	8002d4a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d3e:	4b9e      	ldr	r3, [pc, #632]	@ (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d42:	4a9d      	ldr	r2, [pc, #628]	@ (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d44:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d48:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 0301 	and.w	r3, r3, #1
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d00a      	beq.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d56:	4b98      	ldr	r3, [pc, #608]	@ (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d5c:	f023 0203 	bic.w	r2, r3, #3
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d64:	4994      	ldr	r1, [pc, #592]	@ (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d66:	4313      	orrs	r3, r2
 8002d68:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f003 0302 	and.w	r3, r3, #2
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d00a      	beq.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002d78:	4b8f      	ldr	r3, [pc, #572]	@ (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d7e:	f023 020c 	bic.w	r2, r3, #12
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d86:	498c      	ldr	r1, [pc, #560]	@ (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 0304 	and.w	r3, r3, #4
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d00a      	beq.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002d9a:	4b87      	ldr	r3, [pc, #540]	@ (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002da0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002da8:	4983      	ldr	r1, [pc, #524]	@ (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002daa:	4313      	orrs	r3, r2
 8002dac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f003 0308 	and.w	r3, r3, #8
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d00a      	beq.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002dbc:	4b7e      	ldr	r3, [pc, #504]	@ (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dc2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dca:	497b      	ldr	r1, [pc, #492]	@ (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 0310 	and.w	r3, r3, #16
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d00a      	beq.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002dde:	4b76      	ldr	r3, [pc, #472]	@ (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002de0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002de4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002dec:	4972      	ldr	r1, [pc, #456]	@ (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dee:	4313      	orrs	r3, r2
 8002df0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f003 0320 	and.w	r3, r3, #32
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d00a      	beq.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002e00:	4b6d      	ldr	r3, [pc, #436]	@ (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e06:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e0e:	496a      	ldr	r1, [pc, #424]	@ (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e10:	4313      	orrs	r3, r2
 8002e12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d00a      	beq.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002e22:	4b65      	ldr	r3, [pc, #404]	@ (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e28:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e30:	4961      	ldr	r1, [pc, #388]	@ (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e32:	4313      	orrs	r3, r2
 8002e34:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d00a      	beq.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002e44:	4b5c      	ldr	r3, [pc, #368]	@ (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e4a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e52:	4959      	ldr	r1, [pc, #356]	@ (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e54:	4313      	orrs	r3, r2
 8002e56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d00a      	beq.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e66:	4b54      	ldr	r3, [pc, #336]	@ (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e6c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e74:	4950      	ldr	r1, [pc, #320]	@ (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e76:	4313      	orrs	r3, r2
 8002e78:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d00a      	beq.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002e88:	4b4b      	ldr	r3, [pc, #300]	@ (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e8e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e96:	4948      	ldr	r1, [pc, #288]	@ (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d00a      	beq.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002eaa:	4b43      	ldr	r3, [pc, #268]	@ (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002eac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002eb0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002eb8:	493f      	ldr	r1, [pc, #252]	@ (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d028      	beq.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002ecc:	4b3a      	ldr	r3, [pc, #232]	@ (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ece:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ed2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002eda:	4937      	ldr	r1, [pc, #220]	@ (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002edc:	4313      	orrs	r3, r2
 8002ede:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002ee6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002eea:	d106      	bne.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002eec:	4b32      	ldr	r3, [pc, #200]	@ (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002eee:	68db      	ldr	r3, [r3, #12]
 8002ef0:	4a31      	ldr	r2, [pc, #196]	@ (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ef2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002ef6:	60d3      	str	r3, [r2, #12]
 8002ef8:	e011      	b.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002efe:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002f02:	d10c      	bne.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	3304      	adds	r3, #4
 8002f08:	2101      	movs	r1, #1
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f000 f8c8 	bl	80030a0 <RCCEx_PLLSAI1_Config>
 8002f10:	4603      	mov	r3, r0
 8002f12:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002f14:	7cfb      	ldrb	r3, [r7, #19]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d001      	beq.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002f1a:	7cfb      	ldrb	r3, [r7, #19]
 8002f1c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d028      	beq.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002f2a:	4b23      	ldr	r3, [pc, #140]	@ (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f30:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f38:	491f      	ldr	r1, [pc, #124]	@ (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f44:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002f48:	d106      	bne.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f4a:	4b1b      	ldr	r3, [pc, #108]	@ (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f4c:	68db      	ldr	r3, [r3, #12]
 8002f4e:	4a1a      	ldr	r2, [pc, #104]	@ (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f50:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002f54:	60d3      	str	r3, [r2, #12]
 8002f56:	e011      	b.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f5c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002f60:	d10c      	bne.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	3304      	adds	r3, #4
 8002f66:	2101      	movs	r1, #1
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f000 f899 	bl	80030a0 <RCCEx_PLLSAI1_Config>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002f72:	7cfb      	ldrb	r3, [r7, #19]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d001      	beq.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002f78:	7cfb      	ldrb	r3, [r7, #19]
 8002f7a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d02b      	beq.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002f88:	4b0b      	ldr	r3, [pc, #44]	@ (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f8e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f96:	4908      	ldr	r1, [pc, #32]	@ (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002fa2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002fa6:	d109      	bne.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002fa8:	4b03      	ldr	r3, [pc, #12]	@ (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002faa:	68db      	ldr	r3, [r3, #12]
 8002fac:	4a02      	ldr	r2, [pc, #8]	@ (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002fb2:	60d3      	str	r3, [r2, #12]
 8002fb4:	e014      	b.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002fb6:	bf00      	nop
 8002fb8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002fc0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002fc4:	d10c      	bne.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	3304      	adds	r3, #4
 8002fca:	2101      	movs	r1, #1
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f000 f867 	bl	80030a0 <RCCEx_PLLSAI1_Config>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002fd6:	7cfb      	ldrb	r3, [r7, #19]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d001      	beq.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002fdc:	7cfb      	ldrb	r3, [r7, #19]
 8002fde:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d02f      	beq.n	800304c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002fec:	4b2b      	ldr	r3, [pc, #172]	@ (800309c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002fee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ff2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002ffa:	4928      	ldr	r1, [pc, #160]	@ (800309c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003006:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800300a:	d10d      	bne.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	3304      	adds	r3, #4
 8003010:	2102      	movs	r1, #2
 8003012:	4618      	mov	r0, r3
 8003014:	f000 f844 	bl	80030a0 <RCCEx_PLLSAI1_Config>
 8003018:	4603      	mov	r3, r0
 800301a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800301c:	7cfb      	ldrb	r3, [r7, #19]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d014      	beq.n	800304c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003022:	7cfb      	ldrb	r3, [r7, #19]
 8003024:	74bb      	strb	r3, [r7, #18]
 8003026:	e011      	b.n	800304c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800302c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003030:	d10c      	bne.n	800304c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	3320      	adds	r3, #32
 8003036:	2102      	movs	r1, #2
 8003038:	4618      	mov	r0, r3
 800303a:	f000 f925 	bl	8003288 <RCCEx_PLLSAI2_Config>
 800303e:	4603      	mov	r3, r0
 8003040:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003042:	7cfb      	ldrb	r3, [r7, #19]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d001      	beq.n	800304c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003048:	7cfb      	ldrb	r3, [r7, #19]
 800304a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003054:	2b00      	cmp	r3, #0
 8003056:	d00a      	beq.n	800306e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003058:	4b10      	ldr	r3, [pc, #64]	@ (800309c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800305a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800305e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003066:	490d      	ldr	r1, [pc, #52]	@ (800309c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003068:	4313      	orrs	r3, r2
 800306a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003076:	2b00      	cmp	r3, #0
 8003078:	d00b      	beq.n	8003092 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800307a:	4b08      	ldr	r3, [pc, #32]	@ (800309c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800307c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003080:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800308a:	4904      	ldr	r1, [pc, #16]	@ (800309c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800308c:	4313      	orrs	r3, r2
 800308e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003092:	7cbb      	ldrb	r3, [r7, #18]
}
 8003094:	4618      	mov	r0, r3
 8003096:	3718      	adds	r7, #24
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}
 800309c:	40021000 	.word	0x40021000

080030a0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b084      	sub	sp, #16
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
 80030a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80030aa:	2300      	movs	r3, #0
 80030ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80030ae:	4b75      	ldr	r3, [pc, #468]	@ (8003284 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030b0:	68db      	ldr	r3, [r3, #12]
 80030b2:	f003 0303 	and.w	r3, r3, #3
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d018      	beq.n	80030ec <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80030ba:	4b72      	ldr	r3, [pc, #456]	@ (8003284 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030bc:	68db      	ldr	r3, [r3, #12]
 80030be:	f003 0203 	and.w	r2, r3, #3
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	429a      	cmp	r2, r3
 80030c8:	d10d      	bne.n	80030e6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
       ||
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d009      	beq.n	80030e6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80030d2:	4b6c      	ldr	r3, [pc, #432]	@ (8003284 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030d4:	68db      	ldr	r3, [r3, #12]
 80030d6:	091b      	lsrs	r3, r3, #4
 80030d8:	f003 0307 	and.w	r3, r3, #7
 80030dc:	1c5a      	adds	r2, r3, #1
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	685b      	ldr	r3, [r3, #4]
       ||
 80030e2:	429a      	cmp	r2, r3
 80030e4:	d047      	beq.n	8003176 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	73fb      	strb	r3, [r7, #15]
 80030ea:	e044      	b.n	8003176 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	2b03      	cmp	r3, #3
 80030f2:	d018      	beq.n	8003126 <RCCEx_PLLSAI1_Config+0x86>
 80030f4:	2b03      	cmp	r3, #3
 80030f6:	d825      	bhi.n	8003144 <RCCEx_PLLSAI1_Config+0xa4>
 80030f8:	2b01      	cmp	r3, #1
 80030fa:	d002      	beq.n	8003102 <RCCEx_PLLSAI1_Config+0x62>
 80030fc:	2b02      	cmp	r3, #2
 80030fe:	d009      	beq.n	8003114 <RCCEx_PLLSAI1_Config+0x74>
 8003100:	e020      	b.n	8003144 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003102:	4b60      	ldr	r3, [pc, #384]	@ (8003284 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f003 0302 	and.w	r3, r3, #2
 800310a:	2b00      	cmp	r3, #0
 800310c:	d11d      	bne.n	800314a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003112:	e01a      	b.n	800314a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003114:	4b5b      	ldr	r3, [pc, #364]	@ (8003284 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800311c:	2b00      	cmp	r3, #0
 800311e:	d116      	bne.n	800314e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003124:	e013      	b.n	800314e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003126:	4b57      	ldr	r3, [pc, #348]	@ (8003284 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800312e:	2b00      	cmp	r3, #0
 8003130:	d10f      	bne.n	8003152 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003132:	4b54      	ldr	r3, [pc, #336]	@ (8003284 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800313a:	2b00      	cmp	r3, #0
 800313c:	d109      	bne.n	8003152 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003142:	e006      	b.n	8003152 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	73fb      	strb	r3, [r7, #15]
      break;
 8003148:	e004      	b.n	8003154 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800314a:	bf00      	nop
 800314c:	e002      	b.n	8003154 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800314e:	bf00      	nop
 8003150:	e000      	b.n	8003154 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003152:	bf00      	nop
    }

    if(status == HAL_OK)
 8003154:	7bfb      	ldrb	r3, [r7, #15]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d10d      	bne.n	8003176 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800315a:	4b4a      	ldr	r3, [pc, #296]	@ (8003284 <RCCEx_PLLSAI1_Config+0x1e4>)
 800315c:	68db      	ldr	r3, [r3, #12]
 800315e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6819      	ldr	r1, [r3, #0]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	3b01      	subs	r3, #1
 800316c:	011b      	lsls	r3, r3, #4
 800316e:	430b      	orrs	r3, r1
 8003170:	4944      	ldr	r1, [pc, #272]	@ (8003284 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003172:	4313      	orrs	r3, r2
 8003174:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003176:	7bfb      	ldrb	r3, [r7, #15]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d17d      	bne.n	8003278 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800317c:	4b41      	ldr	r3, [pc, #260]	@ (8003284 <RCCEx_PLLSAI1_Config+0x1e4>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a40      	ldr	r2, [pc, #256]	@ (8003284 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003182:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003186:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003188:	f7fe fb28 	bl	80017dc <HAL_GetTick>
 800318c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800318e:	e009      	b.n	80031a4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003190:	f7fe fb24 	bl	80017dc <HAL_GetTick>
 8003194:	4602      	mov	r2, r0
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	1ad3      	subs	r3, r2, r3
 800319a:	2b02      	cmp	r3, #2
 800319c:	d902      	bls.n	80031a4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800319e:	2303      	movs	r3, #3
 80031a0:	73fb      	strb	r3, [r7, #15]
        break;
 80031a2:	e005      	b.n	80031b0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80031a4:	4b37      	ldr	r3, [pc, #220]	@ (8003284 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d1ef      	bne.n	8003190 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80031b0:	7bfb      	ldrb	r3, [r7, #15]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d160      	bne.n	8003278 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d111      	bne.n	80031e0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80031bc:	4b31      	ldr	r3, [pc, #196]	@ (8003284 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031be:	691b      	ldr	r3, [r3, #16]
 80031c0:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80031c4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80031c8:	687a      	ldr	r2, [r7, #4]
 80031ca:	6892      	ldr	r2, [r2, #8]
 80031cc:	0211      	lsls	r1, r2, #8
 80031ce:	687a      	ldr	r2, [r7, #4]
 80031d0:	68d2      	ldr	r2, [r2, #12]
 80031d2:	0912      	lsrs	r2, r2, #4
 80031d4:	0452      	lsls	r2, r2, #17
 80031d6:	430a      	orrs	r2, r1
 80031d8:	492a      	ldr	r1, [pc, #168]	@ (8003284 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031da:	4313      	orrs	r3, r2
 80031dc:	610b      	str	r3, [r1, #16]
 80031de:	e027      	b.n	8003230 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	d112      	bne.n	800320c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80031e6:	4b27      	ldr	r3, [pc, #156]	@ (8003284 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031e8:	691b      	ldr	r3, [r3, #16]
 80031ea:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80031ee:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80031f2:	687a      	ldr	r2, [r7, #4]
 80031f4:	6892      	ldr	r2, [r2, #8]
 80031f6:	0211      	lsls	r1, r2, #8
 80031f8:	687a      	ldr	r2, [r7, #4]
 80031fa:	6912      	ldr	r2, [r2, #16]
 80031fc:	0852      	lsrs	r2, r2, #1
 80031fe:	3a01      	subs	r2, #1
 8003200:	0552      	lsls	r2, r2, #21
 8003202:	430a      	orrs	r2, r1
 8003204:	491f      	ldr	r1, [pc, #124]	@ (8003284 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003206:	4313      	orrs	r3, r2
 8003208:	610b      	str	r3, [r1, #16]
 800320a:	e011      	b.n	8003230 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800320c:	4b1d      	ldr	r3, [pc, #116]	@ (8003284 <RCCEx_PLLSAI1_Config+0x1e4>)
 800320e:	691b      	ldr	r3, [r3, #16]
 8003210:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003214:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003218:	687a      	ldr	r2, [r7, #4]
 800321a:	6892      	ldr	r2, [r2, #8]
 800321c:	0211      	lsls	r1, r2, #8
 800321e:	687a      	ldr	r2, [r7, #4]
 8003220:	6952      	ldr	r2, [r2, #20]
 8003222:	0852      	lsrs	r2, r2, #1
 8003224:	3a01      	subs	r2, #1
 8003226:	0652      	lsls	r2, r2, #25
 8003228:	430a      	orrs	r2, r1
 800322a:	4916      	ldr	r1, [pc, #88]	@ (8003284 <RCCEx_PLLSAI1_Config+0x1e4>)
 800322c:	4313      	orrs	r3, r2
 800322e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003230:	4b14      	ldr	r3, [pc, #80]	@ (8003284 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a13      	ldr	r2, [pc, #76]	@ (8003284 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003236:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800323a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800323c:	f7fe face 	bl	80017dc <HAL_GetTick>
 8003240:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003242:	e009      	b.n	8003258 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003244:	f7fe faca 	bl	80017dc <HAL_GetTick>
 8003248:	4602      	mov	r2, r0
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	1ad3      	subs	r3, r2, r3
 800324e:	2b02      	cmp	r3, #2
 8003250:	d902      	bls.n	8003258 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003252:	2303      	movs	r3, #3
 8003254:	73fb      	strb	r3, [r7, #15]
          break;
 8003256:	e005      	b.n	8003264 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003258:	4b0a      	ldr	r3, [pc, #40]	@ (8003284 <RCCEx_PLLSAI1_Config+0x1e4>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003260:	2b00      	cmp	r3, #0
 8003262:	d0ef      	beq.n	8003244 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003264:	7bfb      	ldrb	r3, [r7, #15]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d106      	bne.n	8003278 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800326a:	4b06      	ldr	r3, [pc, #24]	@ (8003284 <RCCEx_PLLSAI1_Config+0x1e4>)
 800326c:	691a      	ldr	r2, [r3, #16]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	699b      	ldr	r3, [r3, #24]
 8003272:	4904      	ldr	r1, [pc, #16]	@ (8003284 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003274:	4313      	orrs	r3, r2
 8003276:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003278:	7bfb      	ldrb	r3, [r7, #15]
}
 800327a:	4618      	mov	r0, r3
 800327c:	3710      	adds	r7, #16
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}
 8003282:	bf00      	nop
 8003284:	40021000 	.word	0x40021000

08003288 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b084      	sub	sp, #16
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
 8003290:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003292:	2300      	movs	r3, #0
 8003294:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003296:	4b6a      	ldr	r3, [pc, #424]	@ (8003440 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003298:	68db      	ldr	r3, [r3, #12]
 800329a:	f003 0303 	and.w	r3, r3, #3
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d018      	beq.n	80032d4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80032a2:	4b67      	ldr	r3, [pc, #412]	@ (8003440 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032a4:	68db      	ldr	r3, [r3, #12]
 80032a6:	f003 0203 	and.w	r2, r3, #3
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	429a      	cmp	r2, r3
 80032b0:	d10d      	bne.n	80032ce <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
       ||
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d009      	beq.n	80032ce <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80032ba:	4b61      	ldr	r3, [pc, #388]	@ (8003440 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032bc:	68db      	ldr	r3, [r3, #12]
 80032be:	091b      	lsrs	r3, r3, #4
 80032c0:	f003 0307 	and.w	r3, r3, #7
 80032c4:	1c5a      	adds	r2, r3, #1
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	685b      	ldr	r3, [r3, #4]
       ||
 80032ca:	429a      	cmp	r2, r3
 80032cc:	d047      	beq.n	800335e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	73fb      	strb	r3, [r7, #15]
 80032d2:	e044      	b.n	800335e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	2b03      	cmp	r3, #3
 80032da:	d018      	beq.n	800330e <RCCEx_PLLSAI2_Config+0x86>
 80032dc:	2b03      	cmp	r3, #3
 80032de:	d825      	bhi.n	800332c <RCCEx_PLLSAI2_Config+0xa4>
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	d002      	beq.n	80032ea <RCCEx_PLLSAI2_Config+0x62>
 80032e4:	2b02      	cmp	r3, #2
 80032e6:	d009      	beq.n	80032fc <RCCEx_PLLSAI2_Config+0x74>
 80032e8:	e020      	b.n	800332c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80032ea:	4b55      	ldr	r3, [pc, #340]	@ (8003440 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 0302 	and.w	r3, r3, #2
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d11d      	bne.n	8003332 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032fa:	e01a      	b.n	8003332 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80032fc:	4b50      	ldr	r3, [pc, #320]	@ (8003440 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003304:	2b00      	cmp	r3, #0
 8003306:	d116      	bne.n	8003336 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003308:	2301      	movs	r3, #1
 800330a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800330c:	e013      	b.n	8003336 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800330e:	4b4c      	ldr	r3, [pc, #304]	@ (8003440 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003316:	2b00      	cmp	r3, #0
 8003318:	d10f      	bne.n	800333a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800331a:	4b49      	ldr	r3, [pc, #292]	@ (8003440 <RCCEx_PLLSAI2_Config+0x1b8>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003322:	2b00      	cmp	r3, #0
 8003324:	d109      	bne.n	800333a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800332a:	e006      	b.n	800333a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	73fb      	strb	r3, [r7, #15]
      break;
 8003330:	e004      	b.n	800333c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003332:	bf00      	nop
 8003334:	e002      	b.n	800333c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003336:	bf00      	nop
 8003338:	e000      	b.n	800333c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800333a:	bf00      	nop
    }

    if(status == HAL_OK)
 800333c:	7bfb      	ldrb	r3, [r7, #15]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d10d      	bne.n	800335e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003342:	4b3f      	ldr	r3, [pc, #252]	@ (8003440 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003344:	68db      	ldr	r3, [r3, #12]
 8003346:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6819      	ldr	r1, [r3, #0]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	3b01      	subs	r3, #1
 8003354:	011b      	lsls	r3, r3, #4
 8003356:	430b      	orrs	r3, r1
 8003358:	4939      	ldr	r1, [pc, #228]	@ (8003440 <RCCEx_PLLSAI2_Config+0x1b8>)
 800335a:	4313      	orrs	r3, r2
 800335c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800335e:	7bfb      	ldrb	r3, [r7, #15]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d167      	bne.n	8003434 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003364:	4b36      	ldr	r3, [pc, #216]	@ (8003440 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a35      	ldr	r2, [pc, #212]	@ (8003440 <RCCEx_PLLSAI2_Config+0x1b8>)
 800336a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800336e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003370:	f7fe fa34 	bl	80017dc <HAL_GetTick>
 8003374:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003376:	e009      	b.n	800338c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003378:	f7fe fa30 	bl	80017dc <HAL_GetTick>
 800337c:	4602      	mov	r2, r0
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	1ad3      	subs	r3, r2, r3
 8003382:	2b02      	cmp	r3, #2
 8003384:	d902      	bls.n	800338c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003386:	2303      	movs	r3, #3
 8003388:	73fb      	strb	r3, [r7, #15]
        break;
 800338a:	e005      	b.n	8003398 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800338c:	4b2c      	ldr	r3, [pc, #176]	@ (8003440 <RCCEx_PLLSAI2_Config+0x1b8>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003394:	2b00      	cmp	r3, #0
 8003396:	d1ef      	bne.n	8003378 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003398:	7bfb      	ldrb	r3, [r7, #15]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d14a      	bne.n	8003434 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d111      	bne.n	80033c8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80033a4:	4b26      	ldr	r3, [pc, #152]	@ (8003440 <RCCEx_PLLSAI2_Config+0x1b8>)
 80033a6:	695b      	ldr	r3, [r3, #20]
 80033a8:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80033ac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80033b0:	687a      	ldr	r2, [r7, #4]
 80033b2:	6892      	ldr	r2, [r2, #8]
 80033b4:	0211      	lsls	r1, r2, #8
 80033b6:	687a      	ldr	r2, [r7, #4]
 80033b8:	68d2      	ldr	r2, [r2, #12]
 80033ba:	0912      	lsrs	r2, r2, #4
 80033bc:	0452      	lsls	r2, r2, #17
 80033be:	430a      	orrs	r2, r1
 80033c0:	491f      	ldr	r1, [pc, #124]	@ (8003440 <RCCEx_PLLSAI2_Config+0x1b8>)
 80033c2:	4313      	orrs	r3, r2
 80033c4:	614b      	str	r3, [r1, #20]
 80033c6:	e011      	b.n	80033ec <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80033c8:	4b1d      	ldr	r3, [pc, #116]	@ (8003440 <RCCEx_PLLSAI2_Config+0x1b8>)
 80033ca:	695b      	ldr	r3, [r3, #20]
 80033cc:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80033d0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80033d4:	687a      	ldr	r2, [r7, #4]
 80033d6:	6892      	ldr	r2, [r2, #8]
 80033d8:	0211      	lsls	r1, r2, #8
 80033da:	687a      	ldr	r2, [r7, #4]
 80033dc:	6912      	ldr	r2, [r2, #16]
 80033de:	0852      	lsrs	r2, r2, #1
 80033e0:	3a01      	subs	r2, #1
 80033e2:	0652      	lsls	r2, r2, #25
 80033e4:	430a      	orrs	r2, r1
 80033e6:	4916      	ldr	r1, [pc, #88]	@ (8003440 <RCCEx_PLLSAI2_Config+0x1b8>)
 80033e8:	4313      	orrs	r3, r2
 80033ea:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80033ec:	4b14      	ldr	r3, [pc, #80]	@ (8003440 <RCCEx_PLLSAI2_Config+0x1b8>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a13      	ldr	r2, [pc, #76]	@ (8003440 <RCCEx_PLLSAI2_Config+0x1b8>)
 80033f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80033f6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033f8:	f7fe f9f0 	bl	80017dc <HAL_GetTick>
 80033fc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80033fe:	e009      	b.n	8003414 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003400:	f7fe f9ec 	bl	80017dc <HAL_GetTick>
 8003404:	4602      	mov	r2, r0
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	1ad3      	subs	r3, r2, r3
 800340a:	2b02      	cmp	r3, #2
 800340c:	d902      	bls.n	8003414 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800340e:	2303      	movs	r3, #3
 8003410:	73fb      	strb	r3, [r7, #15]
          break;
 8003412:	e005      	b.n	8003420 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003414:	4b0a      	ldr	r3, [pc, #40]	@ (8003440 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800341c:	2b00      	cmp	r3, #0
 800341e:	d0ef      	beq.n	8003400 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003420:	7bfb      	ldrb	r3, [r7, #15]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d106      	bne.n	8003434 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003426:	4b06      	ldr	r3, [pc, #24]	@ (8003440 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003428:	695a      	ldr	r2, [r3, #20]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	695b      	ldr	r3, [r3, #20]
 800342e:	4904      	ldr	r1, [pc, #16]	@ (8003440 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003430:	4313      	orrs	r3, r2
 8003432:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003434:	7bfb      	ldrb	r3, [r7, #15]
}
 8003436:	4618      	mov	r0, r3
 8003438:	3710      	adds	r7, #16
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}
 800343e:	bf00      	nop
 8003440:	40021000 	.word	0x40021000

08003444 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b084      	sub	sp, #16
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d101      	bne.n	8003456 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	e095      	b.n	8003582 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800345a:	2b00      	cmp	r3, #0
 800345c:	d108      	bne.n	8003470 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003466:	d009      	beq.n	800347c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2200      	movs	r2, #0
 800346c:	61da      	str	r2, [r3, #28]
 800346e:	e005      	b.n	800347c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2200      	movs	r2, #0
 8003474:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2200      	movs	r2, #0
 800347a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2200      	movs	r2, #0
 8003480:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003488:	b2db      	uxtb	r3, r3
 800348a:	2b00      	cmp	r3, #0
 800348c:	d106      	bne.n	800349c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2200      	movs	r2, #0
 8003492:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	f7fd ff44 	bl	8001324 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2202      	movs	r2, #2
 80034a0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	681a      	ldr	r2, [r3, #0]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80034b2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	68db      	ldr	r3, [r3, #12]
 80034b8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80034bc:	d902      	bls.n	80034c4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80034be:	2300      	movs	r3, #0
 80034c0:	60fb      	str	r3, [r7, #12]
 80034c2:	e002      	b.n	80034ca <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80034c4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80034c8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	68db      	ldr	r3, [r3, #12]
 80034ce:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80034d2:	d007      	beq.n	80034e4 <HAL_SPI_Init+0xa0>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	68db      	ldr	r3, [r3, #12]
 80034d8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80034dc:	d002      	beq.n	80034e4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2200      	movs	r2, #0
 80034e2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80034f4:	431a      	orrs	r2, r3
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	691b      	ldr	r3, [r3, #16]
 80034fa:	f003 0302 	and.w	r3, r3, #2
 80034fe:	431a      	orrs	r2, r3
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	695b      	ldr	r3, [r3, #20]
 8003504:	f003 0301 	and.w	r3, r3, #1
 8003508:	431a      	orrs	r2, r3
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	699b      	ldr	r3, [r3, #24]
 800350e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003512:	431a      	orrs	r2, r3
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	69db      	ldr	r3, [r3, #28]
 8003518:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800351c:	431a      	orrs	r2, r3
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6a1b      	ldr	r3, [r3, #32]
 8003522:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003526:	ea42 0103 	orr.w	r1, r2, r3
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800352e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	430a      	orrs	r2, r1
 8003538:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	699b      	ldr	r3, [r3, #24]
 800353e:	0c1b      	lsrs	r3, r3, #16
 8003540:	f003 0204 	and.w	r2, r3, #4
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003548:	f003 0310 	and.w	r3, r3, #16
 800354c:	431a      	orrs	r2, r3
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003552:	f003 0308 	and.w	r3, r3, #8
 8003556:	431a      	orrs	r2, r3
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	68db      	ldr	r3, [r3, #12]
 800355c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003560:	ea42 0103 	orr.w	r1, r2, r3
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	430a      	orrs	r2, r1
 8003570:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2200      	movs	r2, #0
 8003576:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2201      	movs	r2, #1
 800357c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003580:	2300      	movs	r3, #0
}
 8003582:	4618      	mov	r0, r3
 8003584:	3710      	adds	r7, #16
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}

0800358a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800358a:	b580      	push	{r7, lr}
 800358c:	b088      	sub	sp, #32
 800358e:	af00      	add	r7, sp, #0
 8003590:	60f8      	str	r0, [r7, #12]
 8003592:	60b9      	str	r1, [r7, #8]
 8003594:	603b      	str	r3, [r7, #0]
 8003596:	4613      	mov	r3, r2
 8003598:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800359a:	f7fe f91f 	bl	80017dc <HAL_GetTick>
 800359e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80035a0:	88fb      	ldrh	r3, [r7, #6]
 80035a2:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80035aa:	b2db      	uxtb	r3, r3
 80035ac:	2b01      	cmp	r3, #1
 80035ae:	d001      	beq.n	80035b4 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80035b0:	2302      	movs	r3, #2
 80035b2:	e15c      	b.n	800386e <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d002      	beq.n	80035c0 <HAL_SPI_Transmit+0x36>
 80035ba:	88fb      	ldrh	r3, [r7, #6]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d101      	bne.n	80035c4 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	e154      	b.n	800386e <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80035ca:	2b01      	cmp	r3, #1
 80035cc:	d101      	bne.n	80035d2 <HAL_SPI_Transmit+0x48>
 80035ce:	2302      	movs	r3, #2
 80035d0:	e14d      	b.n	800386e <HAL_SPI_Transmit+0x2e4>
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	2201      	movs	r2, #1
 80035d6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	2203      	movs	r2, #3
 80035de:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	2200      	movs	r2, #0
 80035e6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	68ba      	ldr	r2, [r7, #8]
 80035ec:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	88fa      	ldrh	r2, [r7, #6]
 80035f2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	88fa      	ldrh	r2, [r7, #6]
 80035f8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	2200      	movs	r2, #0
 80035fe:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2200      	movs	r2, #0
 8003604:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2200      	movs	r2, #0
 800360c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2200      	movs	r2, #0
 8003614:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2200      	movs	r2, #0
 800361a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003624:	d10f      	bne.n	8003646 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	681a      	ldr	r2, [r3, #0]
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003634:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003644:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003650:	2b40      	cmp	r3, #64	@ 0x40
 8003652:	d007      	beq.n	8003664 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003662:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	68db      	ldr	r3, [r3, #12]
 8003668:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800366c:	d952      	bls.n	8003714 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d002      	beq.n	800367c <HAL_SPI_Transmit+0xf2>
 8003676:	8b7b      	ldrh	r3, [r7, #26]
 8003678:	2b01      	cmp	r3, #1
 800367a:	d145      	bne.n	8003708 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003680:	881a      	ldrh	r2, [r3, #0]
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800368c:	1c9a      	adds	r2, r3, #2
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003696:	b29b      	uxth	r3, r3
 8003698:	3b01      	subs	r3, #1
 800369a:	b29a      	uxth	r2, r3
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80036a0:	e032      	b.n	8003708 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	f003 0302 	and.w	r3, r3, #2
 80036ac:	2b02      	cmp	r3, #2
 80036ae:	d112      	bne.n	80036d6 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036b4:	881a      	ldrh	r2, [r3, #0]
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036c0:	1c9a      	adds	r2, r3, #2
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80036ca:	b29b      	uxth	r3, r3
 80036cc:	3b01      	subs	r3, #1
 80036ce:	b29a      	uxth	r2, r3
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80036d4:	e018      	b.n	8003708 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80036d6:	f7fe f881 	bl	80017dc <HAL_GetTick>
 80036da:	4602      	mov	r2, r0
 80036dc:	69fb      	ldr	r3, [r7, #28]
 80036de:	1ad3      	subs	r3, r2, r3
 80036e0:	683a      	ldr	r2, [r7, #0]
 80036e2:	429a      	cmp	r2, r3
 80036e4:	d803      	bhi.n	80036ee <HAL_SPI_Transmit+0x164>
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036ec:	d102      	bne.n	80036f4 <HAL_SPI_Transmit+0x16a>
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d109      	bne.n	8003708 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	2201      	movs	r2, #1
 80036f8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	2200      	movs	r2, #0
 8003700:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8003704:	2303      	movs	r3, #3
 8003706:	e0b2      	b.n	800386e <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800370c:	b29b      	uxth	r3, r3
 800370e:	2b00      	cmp	r3, #0
 8003710:	d1c7      	bne.n	80036a2 <HAL_SPI_Transmit+0x118>
 8003712:	e083      	b.n	800381c <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d002      	beq.n	8003722 <HAL_SPI_Transmit+0x198>
 800371c:	8b7b      	ldrh	r3, [r7, #26]
 800371e:	2b01      	cmp	r3, #1
 8003720:	d177      	bne.n	8003812 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003726:	b29b      	uxth	r3, r3
 8003728:	2b01      	cmp	r3, #1
 800372a:	d912      	bls.n	8003752 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003730:	881a      	ldrh	r2, [r3, #0]
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800373c:	1c9a      	adds	r2, r3, #2
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003746:	b29b      	uxth	r3, r3
 8003748:	3b02      	subs	r3, #2
 800374a:	b29a      	uxth	r2, r3
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003750:	e05f      	b.n	8003812 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	330c      	adds	r3, #12
 800375c:	7812      	ldrb	r2, [r2, #0]
 800375e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003764:	1c5a      	adds	r2, r3, #1
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800376e:	b29b      	uxth	r3, r3
 8003770:	3b01      	subs	r3, #1
 8003772:	b29a      	uxth	r2, r3
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003778:	e04b      	b.n	8003812 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	f003 0302 	and.w	r3, r3, #2
 8003784:	2b02      	cmp	r3, #2
 8003786:	d12b      	bne.n	80037e0 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800378c:	b29b      	uxth	r3, r3
 800378e:	2b01      	cmp	r3, #1
 8003790:	d912      	bls.n	80037b8 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003796:	881a      	ldrh	r2, [r3, #0]
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037a2:	1c9a      	adds	r2, r3, #2
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80037ac:	b29b      	uxth	r3, r3
 80037ae:	3b02      	subs	r3, #2
 80037b0:	b29a      	uxth	r2, r3
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80037b6:	e02c      	b.n	8003812 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	330c      	adds	r3, #12
 80037c2:	7812      	ldrb	r2, [r2, #0]
 80037c4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037ca:	1c5a      	adds	r2, r3, #1
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80037d4:	b29b      	uxth	r3, r3
 80037d6:	3b01      	subs	r3, #1
 80037d8:	b29a      	uxth	r2, r3
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80037de:	e018      	b.n	8003812 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80037e0:	f7fd fffc 	bl	80017dc <HAL_GetTick>
 80037e4:	4602      	mov	r2, r0
 80037e6:	69fb      	ldr	r3, [r7, #28]
 80037e8:	1ad3      	subs	r3, r2, r3
 80037ea:	683a      	ldr	r2, [r7, #0]
 80037ec:	429a      	cmp	r2, r3
 80037ee:	d803      	bhi.n	80037f8 <HAL_SPI_Transmit+0x26e>
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037f6:	d102      	bne.n	80037fe <HAL_SPI_Transmit+0x274>
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d109      	bne.n	8003812 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	2201      	movs	r2, #1
 8003802:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	2200      	movs	r2, #0
 800380a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800380e:	2303      	movs	r3, #3
 8003810:	e02d      	b.n	800386e <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003816:	b29b      	uxth	r3, r3
 8003818:	2b00      	cmp	r3, #0
 800381a:	d1ae      	bne.n	800377a <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800381c:	69fa      	ldr	r2, [r7, #28]
 800381e:	6839      	ldr	r1, [r7, #0]
 8003820:	68f8      	ldr	r0, [r7, #12]
 8003822:	f000 f947 	bl	8003ab4 <SPI_EndRxTxTransaction>
 8003826:	4603      	mov	r3, r0
 8003828:	2b00      	cmp	r3, #0
 800382a:	d002      	beq.n	8003832 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2220      	movs	r2, #32
 8003830:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d10a      	bne.n	8003850 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800383a:	2300      	movs	r3, #0
 800383c:	617b      	str	r3, [r7, #20]
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	68db      	ldr	r3, [r3, #12]
 8003844:	617b      	str	r3, [r7, #20]
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	689b      	ldr	r3, [r3, #8]
 800384c:	617b      	str	r3, [r7, #20]
 800384e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	2201      	movs	r2, #1
 8003854:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	2200      	movs	r2, #0
 800385c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003864:	2b00      	cmp	r3, #0
 8003866:	d001      	beq.n	800386c <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8003868:	2301      	movs	r3, #1
 800386a:	e000      	b.n	800386e <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 800386c:	2300      	movs	r3, #0
  }
}
 800386e:	4618      	mov	r0, r3
 8003870:	3720      	adds	r7, #32
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}
	...

08003878 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b088      	sub	sp, #32
 800387c:	af00      	add	r7, sp, #0
 800387e:	60f8      	str	r0, [r7, #12]
 8003880:	60b9      	str	r1, [r7, #8]
 8003882:	603b      	str	r3, [r7, #0]
 8003884:	4613      	mov	r3, r2
 8003886:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003888:	f7fd ffa8 	bl	80017dc <HAL_GetTick>
 800388c:	4602      	mov	r2, r0
 800388e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003890:	1a9b      	subs	r3, r3, r2
 8003892:	683a      	ldr	r2, [r7, #0]
 8003894:	4413      	add	r3, r2
 8003896:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003898:	f7fd ffa0 	bl	80017dc <HAL_GetTick>
 800389c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800389e:	4b39      	ldr	r3, [pc, #228]	@ (8003984 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	015b      	lsls	r3, r3, #5
 80038a4:	0d1b      	lsrs	r3, r3, #20
 80038a6:	69fa      	ldr	r2, [r7, #28]
 80038a8:	fb02 f303 	mul.w	r3, r2, r3
 80038ac:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80038ae:	e054      	b.n	800395a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038b6:	d050      	beq.n	800395a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80038b8:	f7fd ff90 	bl	80017dc <HAL_GetTick>
 80038bc:	4602      	mov	r2, r0
 80038be:	69bb      	ldr	r3, [r7, #24]
 80038c0:	1ad3      	subs	r3, r2, r3
 80038c2:	69fa      	ldr	r2, [r7, #28]
 80038c4:	429a      	cmp	r2, r3
 80038c6:	d902      	bls.n	80038ce <SPI_WaitFlagStateUntilTimeout+0x56>
 80038c8:	69fb      	ldr	r3, [r7, #28]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d13d      	bne.n	800394a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	685a      	ldr	r2, [r3, #4]
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80038dc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80038e6:	d111      	bne.n	800390c <SPI_WaitFlagStateUntilTimeout+0x94>
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80038f0:	d004      	beq.n	80038fc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038fa:	d107      	bne.n	800390c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	681a      	ldr	r2, [r3, #0]
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800390a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003910:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003914:	d10f      	bne.n	8003936 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	681a      	ldr	r2, [r3, #0]
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003924:	601a      	str	r2, [r3, #0]
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003934:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	2201      	movs	r2, #1
 800393a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	2200      	movs	r2, #0
 8003942:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003946:	2303      	movs	r3, #3
 8003948:	e017      	b.n	800397a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d101      	bne.n	8003954 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003950:	2300      	movs	r3, #0
 8003952:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	3b01      	subs	r3, #1
 8003958:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	689a      	ldr	r2, [r3, #8]
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	4013      	ands	r3, r2
 8003964:	68ba      	ldr	r2, [r7, #8]
 8003966:	429a      	cmp	r2, r3
 8003968:	bf0c      	ite	eq
 800396a:	2301      	moveq	r3, #1
 800396c:	2300      	movne	r3, #0
 800396e:	b2db      	uxtb	r3, r3
 8003970:	461a      	mov	r2, r3
 8003972:	79fb      	ldrb	r3, [r7, #7]
 8003974:	429a      	cmp	r2, r3
 8003976:	d19b      	bne.n	80038b0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003978:	2300      	movs	r3, #0
}
 800397a:	4618      	mov	r0, r3
 800397c:	3720      	adds	r7, #32
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}
 8003982:	bf00      	nop
 8003984:	20000000 	.word	0x20000000

08003988 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b08a      	sub	sp, #40	@ 0x28
 800398c:	af00      	add	r7, sp, #0
 800398e:	60f8      	str	r0, [r7, #12]
 8003990:	60b9      	str	r1, [r7, #8]
 8003992:	607a      	str	r2, [r7, #4]
 8003994:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003996:	2300      	movs	r3, #0
 8003998:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800399a:	f7fd ff1f 	bl	80017dc <HAL_GetTick>
 800399e:	4602      	mov	r2, r0
 80039a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039a2:	1a9b      	subs	r3, r3, r2
 80039a4:	683a      	ldr	r2, [r7, #0]
 80039a6:	4413      	add	r3, r2
 80039a8:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80039aa:	f7fd ff17 	bl	80017dc <HAL_GetTick>
 80039ae:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	330c      	adds	r3, #12
 80039b6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80039b8:	4b3d      	ldr	r3, [pc, #244]	@ (8003ab0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80039ba:	681a      	ldr	r2, [r3, #0]
 80039bc:	4613      	mov	r3, r2
 80039be:	009b      	lsls	r3, r3, #2
 80039c0:	4413      	add	r3, r2
 80039c2:	00da      	lsls	r2, r3, #3
 80039c4:	1ad3      	subs	r3, r2, r3
 80039c6:	0d1b      	lsrs	r3, r3, #20
 80039c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039ca:	fb02 f303 	mul.w	r3, r2, r3
 80039ce:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80039d0:	e060      	b.n	8003a94 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80039d8:	d107      	bne.n	80039ea <SPI_WaitFifoStateUntilTimeout+0x62>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d104      	bne.n	80039ea <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80039e0:	69fb      	ldr	r3, [r7, #28]
 80039e2:	781b      	ldrb	r3, [r3, #0]
 80039e4:	b2db      	uxtb	r3, r3
 80039e6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80039e8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039f0:	d050      	beq.n	8003a94 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80039f2:	f7fd fef3 	bl	80017dc <HAL_GetTick>
 80039f6:	4602      	mov	r2, r0
 80039f8:	6a3b      	ldr	r3, [r7, #32]
 80039fa:	1ad3      	subs	r3, r2, r3
 80039fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039fe:	429a      	cmp	r2, r3
 8003a00:	d902      	bls.n	8003a08 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d13d      	bne.n	8003a84 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	685a      	ldr	r2, [r3, #4]
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003a16:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003a20:	d111      	bne.n	8003a46 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003a2a:	d004      	beq.n	8003a36 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	689b      	ldr	r3, [r3, #8]
 8003a30:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a34:	d107      	bne.n	8003a46 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003a44:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a4a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a4e:	d10f      	bne.n	8003a70 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	681a      	ldr	r2, [r3, #0]
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003a5e:	601a      	str	r2, [r3, #0]
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003a6e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	2201      	movs	r2, #1
 8003a74:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003a80:	2303      	movs	r3, #3
 8003a82:	e010      	b.n	8003aa6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003a84:	69bb      	ldr	r3, [r7, #24]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d101      	bne.n	8003a8e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8003a8e:	69bb      	ldr	r3, [r7, #24]
 8003a90:	3b01      	subs	r3, #1
 8003a92:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	689a      	ldr	r2, [r3, #8]
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	4013      	ands	r3, r2
 8003a9e:	687a      	ldr	r2, [r7, #4]
 8003aa0:	429a      	cmp	r2, r3
 8003aa2:	d196      	bne.n	80039d2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003aa4:	2300      	movs	r3, #0
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	3728      	adds	r7, #40	@ 0x28
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}
 8003aae:	bf00      	nop
 8003ab0:	20000000 	.word	0x20000000

08003ab4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b086      	sub	sp, #24
 8003ab8:	af02      	add	r7, sp, #8
 8003aba:	60f8      	str	r0, [r7, #12]
 8003abc:	60b9      	str	r1, [r7, #8]
 8003abe:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	9300      	str	r3, [sp, #0]
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8003acc:	68f8      	ldr	r0, [r7, #12]
 8003ace:	f7ff ff5b 	bl	8003988 <SPI_WaitFifoStateUntilTimeout>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d007      	beq.n	8003ae8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003adc:	f043 0220 	orr.w	r2, r3, #32
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003ae4:	2303      	movs	r3, #3
 8003ae6:	e027      	b.n	8003b38 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	9300      	str	r3, [sp, #0]
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	2200      	movs	r2, #0
 8003af0:	2180      	movs	r1, #128	@ 0x80
 8003af2:	68f8      	ldr	r0, [r7, #12]
 8003af4:	f7ff fec0 	bl	8003878 <SPI_WaitFlagStateUntilTimeout>
 8003af8:	4603      	mov	r3, r0
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d007      	beq.n	8003b0e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b02:	f043 0220 	orr.w	r2, r3, #32
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003b0a:	2303      	movs	r3, #3
 8003b0c:	e014      	b.n	8003b38 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	9300      	str	r3, [sp, #0]
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	2200      	movs	r2, #0
 8003b16:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003b1a:	68f8      	ldr	r0, [r7, #12]
 8003b1c:	f7ff ff34 	bl	8003988 <SPI_WaitFifoStateUntilTimeout>
 8003b20:	4603      	mov	r3, r0
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d007      	beq.n	8003b36 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b2a:	f043 0220 	orr.w	r2, r3, #32
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003b32:	2303      	movs	r3, #3
 8003b34:	e000      	b.n	8003b38 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003b36:	2300      	movs	r3, #0
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	3710      	adds	r7, #16
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}

08003b40 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b082      	sub	sp, #8
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d101      	bne.n	8003b52 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e049      	b.n	8003be6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b58:	b2db      	uxtb	r3, r3
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d106      	bne.n	8003b6c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2200      	movs	r2, #0
 8003b62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	f000 f841 	bl	8003bee <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2202      	movs	r2, #2
 8003b70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681a      	ldr	r2, [r3, #0]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	3304      	adds	r3, #4
 8003b7c:	4619      	mov	r1, r3
 8003b7e:	4610      	mov	r0, r2
 8003b80:	f000 f9e0 	bl	8003f44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2201      	movs	r2, #1
 8003b88:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2201      	movs	r2, #1
 8003b90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2201      	movs	r2, #1
 8003b98:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2201      	movs	r2, #1
 8003bb0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2201      	movs	r2, #1
 8003bd0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2201      	movs	r2, #1
 8003be0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003be4:	2300      	movs	r3, #0
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	3708      	adds	r7, #8
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}

08003bee <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003bee:	b480      	push	{r7}
 8003bf0:	b083      	sub	sp, #12
 8003bf2:	af00      	add	r7, sp, #0
 8003bf4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003bf6:	bf00      	nop
 8003bf8:	370c      	adds	r7, #12
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c00:	4770      	bx	lr
	...

08003c04 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003c04:	b480      	push	{r7}
 8003c06:	b085      	sub	sp, #20
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c12:	b2db      	uxtb	r3, r3
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	d001      	beq.n	8003c1c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	e04f      	b.n	8003cbc <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2202      	movs	r2, #2
 8003c20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	68da      	ldr	r2, [r3, #12]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f042 0201 	orr.w	r2, r2, #1
 8003c32:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a23      	ldr	r2, [pc, #140]	@ (8003cc8 <HAL_TIM_Base_Start_IT+0xc4>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d01d      	beq.n	8003c7a <HAL_TIM_Base_Start_IT+0x76>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c46:	d018      	beq.n	8003c7a <HAL_TIM_Base_Start_IT+0x76>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a1f      	ldr	r2, [pc, #124]	@ (8003ccc <HAL_TIM_Base_Start_IT+0xc8>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d013      	beq.n	8003c7a <HAL_TIM_Base_Start_IT+0x76>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a1e      	ldr	r2, [pc, #120]	@ (8003cd0 <HAL_TIM_Base_Start_IT+0xcc>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d00e      	beq.n	8003c7a <HAL_TIM_Base_Start_IT+0x76>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a1c      	ldr	r2, [pc, #112]	@ (8003cd4 <HAL_TIM_Base_Start_IT+0xd0>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d009      	beq.n	8003c7a <HAL_TIM_Base_Start_IT+0x76>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a1b      	ldr	r2, [pc, #108]	@ (8003cd8 <HAL_TIM_Base_Start_IT+0xd4>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d004      	beq.n	8003c7a <HAL_TIM_Base_Start_IT+0x76>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a19      	ldr	r2, [pc, #100]	@ (8003cdc <HAL_TIM_Base_Start_IT+0xd8>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d115      	bne.n	8003ca6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	689a      	ldr	r2, [r3, #8]
 8003c80:	4b17      	ldr	r3, [pc, #92]	@ (8003ce0 <HAL_TIM_Base_Start_IT+0xdc>)
 8003c82:	4013      	ands	r3, r2
 8003c84:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	2b06      	cmp	r3, #6
 8003c8a:	d015      	beq.n	8003cb8 <HAL_TIM_Base_Start_IT+0xb4>
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c92:	d011      	beq.n	8003cb8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f042 0201 	orr.w	r2, r2, #1
 8003ca2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ca4:	e008      	b.n	8003cb8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	681a      	ldr	r2, [r3, #0]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f042 0201 	orr.w	r2, r2, #1
 8003cb4:	601a      	str	r2, [r3, #0]
 8003cb6:	e000      	b.n	8003cba <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cb8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003cba:	2300      	movs	r3, #0
}
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	3714      	adds	r7, #20
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc6:	4770      	bx	lr
 8003cc8:	40012c00 	.word	0x40012c00
 8003ccc:	40000400 	.word	0x40000400
 8003cd0:	40000800 	.word	0x40000800
 8003cd4:	40000c00 	.word	0x40000c00
 8003cd8:	40013400 	.word	0x40013400
 8003cdc:	40014000 	.word	0x40014000
 8003ce0:	00010007 	.word	0x00010007

08003ce4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b084      	sub	sp, #16
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	68db      	ldr	r3, [r3, #12]
 8003cf2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	691b      	ldr	r3, [r3, #16]
 8003cfa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	f003 0302 	and.w	r3, r3, #2
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d020      	beq.n	8003d48 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	f003 0302 	and.w	r3, r3, #2
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d01b      	beq.n	8003d48 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f06f 0202 	mvn.w	r2, #2
 8003d18:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2201      	movs	r2, #1
 8003d1e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	699b      	ldr	r3, [r3, #24]
 8003d26:	f003 0303 	and.w	r3, r3, #3
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d003      	beq.n	8003d36 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003d2e:	6878      	ldr	r0, [r7, #4]
 8003d30:	f000 f8e9 	bl	8003f06 <HAL_TIM_IC_CaptureCallback>
 8003d34:	e005      	b.n	8003d42 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	f000 f8db 	bl	8003ef2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d3c:	6878      	ldr	r0, [r7, #4]
 8003d3e:	f000 f8ec 	bl	8003f1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2200      	movs	r2, #0
 8003d46:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	f003 0304 	and.w	r3, r3, #4
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d020      	beq.n	8003d94 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	f003 0304 	and.w	r3, r3, #4
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d01b      	beq.n	8003d94 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f06f 0204 	mvn.w	r2, #4
 8003d64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2202      	movs	r2, #2
 8003d6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	699b      	ldr	r3, [r3, #24]
 8003d72:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d003      	beq.n	8003d82 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d7a:	6878      	ldr	r0, [r7, #4]
 8003d7c:	f000 f8c3 	bl	8003f06 <HAL_TIM_IC_CaptureCallback>
 8003d80:	e005      	b.n	8003d8e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	f000 f8b5 	bl	8003ef2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d88:	6878      	ldr	r0, [r7, #4]
 8003d8a:	f000 f8c6 	bl	8003f1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2200      	movs	r2, #0
 8003d92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	f003 0308 	and.w	r3, r3, #8
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d020      	beq.n	8003de0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	f003 0308 	and.w	r3, r3, #8
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d01b      	beq.n	8003de0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f06f 0208 	mvn.w	r2, #8
 8003db0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2204      	movs	r2, #4
 8003db6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	69db      	ldr	r3, [r3, #28]
 8003dbe:	f003 0303 	and.w	r3, r3, #3
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d003      	beq.n	8003dce <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003dc6:	6878      	ldr	r0, [r7, #4]
 8003dc8:	f000 f89d 	bl	8003f06 <HAL_TIM_IC_CaptureCallback>
 8003dcc:	e005      	b.n	8003dda <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dce:	6878      	ldr	r0, [r7, #4]
 8003dd0:	f000 f88f 	bl	8003ef2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003dd4:	6878      	ldr	r0, [r7, #4]
 8003dd6:	f000 f8a0 	bl	8003f1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	f003 0310 	and.w	r3, r3, #16
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d020      	beq.n	8003e2c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	f003 0310 	and.w	r3, r3, #16
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d01b      	beq.n	8003e2c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f06f 0210 	mvn.w	r2, #16
 8003dfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2208      	movs	r2, #8
 8003e02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	69db      	ldr	r3, [r3, #28]
 8003e0a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d003      	beq.n	8003e1a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e12:	6878      	ldr	r0, [r7, #4]
 8003e14:	f000 f877 	bl	8003f06 <HAL_TIM_IC_CaptureCallback>
 8003e18:	e005      	b.n	8003e26 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e1a:	6878      	ldr	r0, [r7, #4]
 8003e1c:	f000 f869 	bl	8003ef2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e20:	6878      	ldr	r0, [r7, #4]
 8003e22:	f000 f87a 	bl	8003f1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	f003 0301 	and.w	r3, r3, #1
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d00c      	beq.n	8003e50 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	f003 0301 	and.w	r3, r3, #1
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d007      	beq.n	8003e50 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f06f 0201 	mvn.w	r2, #1
 8003e48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	f7fd fa14 	bl	8001278 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d104      	bne.n	8003e64 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d00c      	beq.n	8003e7e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d007      	beq.n	8003e7e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8003e76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003e78:	6878      	ldr	r0, [r7, #4]
 8003e7a:	f000 f913 	bl	80040a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d00c      	beq.n	8003ea2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d007      	beq.n	8003ea2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003e9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003e9c:	6878      	ldr	r0, [r7, #4]
 8003e9e:	f000 f90b 	bl	80040b8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003ea2:	68bb      	ldr	r3, [r7, #8]
 8003ea4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d00c      	beq.n	8003ec6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d007      	beq.n	8003ec6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003ebe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003ec0:	6878      	ldr	r0, [r7, #4]
 8003ec2:	f000 f834 	bl	8003f2e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	f003 0320 	and.w	r3, r3, #32
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d00c      	beq.n	8003eea <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	f003 0320 	and.w	r3, r3, #32
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d007      	beq.n	8003eea <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f06f 0220 	mvn.w	r2, #32
 8003ee2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003ee4:	6878      	ldr	r0, [r7, #4]
 8003ee6:	f000 f8d3 	bl	8004090 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003eea:	bf00      	nop
 8003eec:	3710      	adds	r7, #16
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}

08003ef2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ef2:	b480      	push	{r7}
 8003ef4:	b083      	sub	sp, #12
 8003ef6:	af00      	add	r7, sp, #0
 8003ef8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003efa:	bf00      	nop
 8003efc:	370c      	adds	r7, #12
 8003efe:	46bd      	mov	sp, r7
 8003f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f04:	4770      	bx	lr

08003f06 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003f06:	b480      	push	{r7}
 8003f08:	b083      	sub	sp, #12
 8003f0a:	af00      	add	r7, sp, #0
 8003f0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003f0e:	bf00      	nop
 8003f10:	370c      	adds	r7, #12
 8003f12:	46bd      	mov	sp, r7
 8003f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f18:	4770      	bx	lr

08003f1a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003f1a:	b480      	push	{r7}
 8003f1c:	b083      	sub	sp, #12
 8003f1e:	af00      	add	r7, sp, #0
 8003f20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003f22:	bf00      	nop
 8003f24:	370c      	adds	r7, #12
 8003f26:	46bd      	mov	sp, r7
 8003f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2c:	4770      	bx	lr

08003f2e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003f2e:	b480      	push	{r7}
 8003f30:	b083      	sub	sp, #12
 8003f32:	af00      	add	r7, sp, #0
 8003f34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003f36:	bf00      	nop
 8003f38:	370c      	adds	r7, #12
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f40:	4770      	bx	lr
	...

08003f44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003f44:	b480      	push	{r7}
 8003f46:	b085      	sub	sp, #20
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
 8003f4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	4a46      	ldr	r2, [pc, #280]	@ (8004070 <TIM_Base_SetConfig+0x12c>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d013      	beq.n	8003f84 <TIM_Base_SetConfig+0x40>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f62:	d00f      	beq.n	8003f84 <TIM_Base_SetConfig+0x40>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	4a43      	ldr	r2, [pc, #268]	@ (8004074 <TIM_Base_SetConfig+0x130>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d00b      	beq.n	8003f84 <TIM_Base_SetConfig+0x40>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	4a42      	ldr	r2, [pc, #264]	@ (8004078 <TIM_Base_SetConfig+0x134>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d007      	beq.n	8003f84 <TIM_Base_SetConfig+0x40>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	4a41      	ldr	r2, [pc, #260]	@ (800407c <TIM_Base_SetConfig+0x138>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d003      	beq.n	8003f84 <TIM_Base_SetConfig+0x40>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	4a40      	ldr	r2, [pc, #256]	@ (8004080 <TIM_Base_SetConfig+0x13c>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d108      	bne.n	8003f96 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	68fa      	ldr	r2, [r7, #12]
 8003f92:	4313      	orrs	r3, r2
 8003f94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	4a35      	ldr	r2, [pc, #212]	@ (8004070 <TIM_Base_SetConfig+0x12c>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d01f      	beq.n	8003fde <TIM_Base_SetConfig+0x9a>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003fa4:	d01b      	beq.n	8003fde <TIM_Base_SetConfig+0x9a>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	4a32      	ldr	r2, [pc, #200]	@ (8004074 <TIM_Base_SetConfig+0x130>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d017      	beq.n	8003fde <TIM_Base_SetConfig+0x9a>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	4a31      	ldr	r2, [pc, #196]	@ (8004078 <TIM_Base_SetConfig+0x134>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d013      	beq.n	8003fde <TIM_Base_SetConfig+0x9a>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	4a30      	ldr	r2, [pc, #192]	@ (800407c <TIM_Base_SetConfig+0x138>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d00f      	beq.n	8003fde <TIM_Base_SetConfig+0x9a>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	4a2f      	ldr	r2, [pc, #188]	@ (8004080 <TIM_Base_SetConfig+0x13c>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d00b      	beq.n	8003fde <TIM_Base_SetConfig+0x9a>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	4a2e      	ldr	r2, [pc, #184]	@ (8004084 <TIM_Base_SetConfig+0x140>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d007      	beq.n	8003fde <TIM_Base_SetConfig+0x9a>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	4a2d      	ldr	r2, [pc, #180]	@ (8004088 <TIM_Base_SetConfig+0x144>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d003      	beq.n	8003fde <TIM_Base_SetConfig+0x9a>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	4a2c      	ldr	r2, [pc, #176]	@ (800408c <TIM_Base_SetConfig+0x148>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d108      	bne.n	8003ff0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003fe4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	68db      	ldr	r3, [r3, #12]
 8003fea:	68fa      	ldr	r2, [r7, #12]
 8003fec:	4313      	orrs	r3, r2
 8003fee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	695b      	ldr	r3, [r3, #20]
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	68fa      	ldr	r2, [r7, #12]
 8004002:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	689a      	ldr	r2, [r3, #8]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	4a16      	ldr	r2, [pc, #88]	@ (8004070 <TIM_Base_SetConfig+0x12c>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d00f      	beq.n	800403c <TIM_Base_SetConfig+0xf8>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	4a18      	ldr	r2, [pc, #96]	@ (8004080 <TIM_Base_SetConfig+0x13c>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d00b      	beq.n	800403c <TIM_Base_SetConfig+0xf8>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	4a17      	ldr	r2, [pc, #92]	@ (8004084 <TIM_Base_SetConfig+0x140>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d007      	beq.n	800403c <TIM_Base_SetConfig+0xf8>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	4a16      	ldr	r2, [pc, #88]	@ (8004088 <TIM_Base_SetConfig+0x144>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d003      	beq.n	800403c <TIM_Base_SetConfig+0xf8>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	4a15      	ldr	r2, [pc, #84]	@ (800408c <TIM_Base_SetConfig+0x148>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d103      	bne.n	8004044 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	691a      	ldr	r2, [r3, #16]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2201      	movs	r2, #1
 8004048:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	691b      	ldr	r3, [r3, #16]
 800404e:	f003 0301 	and.w	r3, r3, #1
 8004052:	2b01      	cmp	r3, #1
 8004054:	d105      	bne.n	8004062 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	691b      	ldr	r3, [r3, #16]
 800405a:	f023 0201 	bic.w	r2, r3, #1
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	611a      	str	r2, [r3, #16]
  }
}
 8004062:	bf00      	nop
 8004064:	3714      	adds	r7, #20
 8004066:	46bd      	mov	sp, r7
 8004068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406c:	4770      	bx	lr
 800406e:	bf00      	nop
 8004070:	40012c00 	.word	0x40012c00
 8004074:	40000400 	.word	0x40000400
 8004078:	40000800 	.word	0x40000800
 800407c:	40000c00 	.word	0x40000c00
 8004080:	40013400 	.word	0x40013400
 8004084:	40014000 	.word	0x40014000
 8004088:	40014400 	.word	0x40014400
 800408c:	40014800 	.word	0x40014800

08004090 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004090:	b480      	push	{r7}
 8004092:	b083      	sub	sp, #12
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004098:	bf00      	nop
 800409a:	370c      	adds	r7, #12
 800409c:	46bd      	mov	sp, r7
 800409e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a2:	4770      	bx	lr

080040a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b083      	sub	sp, #12
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80040ac:	bf00      	nop
 80040ae:	370c      	adds	r7, #12
 80040b0:	46bd      	mov	sp, r7
 80040b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b6:	4770      	bx	lr

080040b8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b083      	sub	sp, #12
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80040c0:	bf00      	nop
 80040c2:	370c      	adds	r7, #12
 80040c4:	46bd      	mov	sp, r7
 80040c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ca:	4770      	bx	lr

080040cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b082      	sub	sp, #8
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d101      	bne.n	80040de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	e040      	b.n	8004160 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d106      	bne.n	80040f4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2200      	movs	r2, #0
 80040ea:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	f7fd faba 	bl	8001668 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2224      	movs	r2, #36	@ 0x24
 80040f8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	681a      	ldr	r2, [r3, #0]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f022 0201 	bic.w	r2, r2, #1
 8004108:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800410e:	2b00      	cmp	r3, #0
 8004110:	d002      	beq.n	8004118 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004112:	6878      	ldr	r0, [r7, #4]
 8004114:	f000 fae0 	bl	80046d8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004118:	6878      	ldr	r0, [r7, #4]
 800411a:	f000 f825 	bl	8004168 <UART_SetConfig>
 800411e:	4603      	mov	r3, r0
 8004120:	2b01      	cmp	r3, #1
 8004122:	d101      	bne.n	8004128 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004124:	2301      	movs	r3, #1
 8004126:	e01b      	b.n	8004160 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	685a      	ldr	r2, [r3, #4]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004136:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	689a      	ldr	r2, [r3, #8]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004146:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	681a      	ldr	r2, [r3, #0]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f042 0201 	orr.w	r2, r2, #1
 8004156:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004158:	6878      	ldr	r0, [r7, #4]
 800415a:	f000 fb5f 	bl	800481c <UART_CheckIdleState>
 800415e:	4603      	mov	r3, r0
}
 8004160:	4618      	mov	r0, r3
 8004162:	3708      	adds	r7, #8
 8004164:	46bd      	mov	sp, r7
 8004166:	bd80      	pop	{r7, pc}

08004168 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004168:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800416c:	b08a      	sub	sp, #40	@ 0x28
 800416e:	af00      	add	r7, sp, #0
 8004170:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004172:	2300      	movs	r3, #0
 8004174:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	689a      	ldr	r2, [r3, #8]
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	691b      	ldr	r3, [r3, #16]
 8004180:	431a      	orrs	r2, r3
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	695b      	ldr	r3, [r3, #20]
 8004186:	431a      	orrs	r2, r3
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	69db      	ldr	r3, [r3, #28]
 800418c:	4313      	orrs	r3, r2
 800418e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	681a      	ldr	r2, [r3, #0]
 8004196:	4ba4      	ldr	r3, [pc, #656]	@ (8004428 <UART_SetConfig+0x2c0>)
 8004198:	4013      	ands	r3, r2
 800419a:	68fa      	ldr	r2, [r7, #12]
 800419c:	6812      	ldr	r2, [r2, #0]
 800419e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80041a0:	430b      	orrs	r3, r1
 80041a2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	68da      	ldr	r2, [r3, #12]
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	430a      	orrs	r2, r1
 80041b8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	699b      	ldr	r3, [r3, #24]
 80041be:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a99      	ldr	r2, [pc, #612]	@ (800442c <UART_SetConfig+0x2c4>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d004      	beq.n	80041d4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	6a1b      	ldr	r3, [r3, #32]
 80041ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041d0:	4313      	orrs	r3, r2
 80041d2:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	689b      	ldr	r3, [r3, #8]
 80041da:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041e4:	430a      	orrs	r2, r1
 80041e6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a90      	ldr	r2, [pc, #576]	@ (8004430 <UART_SetConfig+0x2c8>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d126      	bne.n	8004240 <UART_SetConfig+0xd8>
 80041f2:	4b90      	ldr	r3, [pc, #576]	@ (8004434 <UART_SetConfig+0x2cc>)
 80041f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041f8:	f003 0303 	and.w	r3, r3, #3
 80041fc:	2b03      	cmp	r3, #3
 80041fe:	d81b      	bhi.n	8004238 <UART_SetConfig+0xd0>
 8004200:	a201      	add	r2, pc, #4	@ (adr r2, 8004208 <UART_SetConfig+0xa0>)
 8004202:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004206:	bf00      	nop
 8004208:	08004219 	.word	0x08004219
 800420c:	08004229 	.word	0x08004229
 8004210:	08004221 	.word	0x08004221
 8004214:	08004231 	.word	0x08004231
 8004218:	2301      	movs	r3, #1
 800421a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800421e:	e116      	b.n	800444e <UART_SetConfig+0x2e6>
 8004220:	2302      	movs	r3, #2
 8004222:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004226:	e112      	b.n	800444e <UART_SetConfig+0x2e6>
 8004228:	2304      	movs	r3, #4
 800422a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800422e:	e10e      	b.n	800444e <UART_SetConfig+0x2e6>
 8004230:	2308      	movs	r3, #8
 8004232:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004236:	e10a      	b.n	800444e <UART_SetConfig+0x2e6>
 8004238:	2310      	movs	r3, #16
 800423a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800423e:	e106      	b.n	800444e <UART_SetConfig+0x2e6>
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a7c      	ldr	r2, [pc, #496]	@ (8004438 <UART_SetConfig+0x2d0>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d138      	bne.n	80042bc <UART_SetConfig+0x154>
 800424a:	4b7a      	ldr	r3, [pc, #488]	@ (8004434 <UART_SetConfig+0x2cc>)
 800424c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004250:	f003 030c 	and.w	r3, r3, #12
 8004254:	2b0c      	cmp	r3, #12
 8004256:	d82d      	bhi.n	80042b4 <UART_SetConfig+0x14c>
 8004258:	a201      	add	r2, pc, #4	@ (adr r2, 8004260 <UART_SetConfig+0xf8>)
 800425a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800425e:	bf00      	nop
 8004260:	08004295 	.word	0x08004295
 8004264:	080042b5 	.word	0x080042b5
 8004268:	080042b5 	.word	0x080042b5
 800426c:	080042b5 	.word	0x080042b5
 8004270:	080042a5 	.word	0x080042a5
 8004274:	080042b5 	.word	0x080042b5
 8004278:	080042b5 	.word	0x080042b5
 800427c:	080042b5 	.word	0x080042b5
 8004280:	0800429d 	.word	0x0800429d
 8004284:	080042b5 	.word	0x080042b5
 8004288:	080042b5 	.word	0x080042b5
 800428c:	080042b5 	.word	0x080042b5
 8004290:	080042ad 	.word	0x080042ad
 8004294:	2300      	movs	r3, #0
 8004296:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800429a:	e0d8      	b.n	800444e <UART_SetConfig+0x2e6>
 800429c:	2302      	movs	r3, #2
 800429e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80042a2:	e0d4      	b.n	800444e <UART_SetConfig+0x2e6>
 80042a4:	2304      	movs	r3, #4
 80042a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80042aa:	e0d0      	b.n	800444e <UART_SetConfig+0x2e6>
 80042ac:	2308      	movs	r3, #8
 80042ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80042b2:	e0cc      	b.n	800444e <UART_SetConfig+0x2e6>
 80042b4:	2310      	movs	r3, #16
 80042b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80042ba:	e0c8      	b.n	800444e <UART_SetConfig+0x2e6>
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a5e      	ldr	r2, [pc, #376]	@ (800443c <UART_SetConfig+0x2d4>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d125      	bne.n	8004312 <UART_SetConfig+0x1aa>
 80042c6:	4b5b      	ldr	r3, [pc, #364]	@ (8004434 <UART_SetConfig+0x2cc>)
 80042c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042cc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80042d0:	2b30      	cmp	r3, #48	@ 0x30
 80042d2:	d016      	beq.n	8004302 <UART_SetConfig+0x19a>
 80042d4:	2b30      	cmp	r3, #48	@ 0x30
 80042d6:	d818      	bhi.n	800430a <UART_SetConfig+0x1a2>
 80042d8:	2b20      	cmp	r3, #32
 80042da:	d00a      	beq.n	80042f2 <UART_SetConfig+0x18a>
 80042dc:	2b20      	cmp	r3, #32
 80042de:	d814      	bhi.n	800430a <UART_SetConfig+0x1a2>
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d002      	beq.n	80042ea <UART_SetConfig+0x182>
 80042e4:	2b10      	cmp	r3, #16
 80042e6:	d008      	beq.n	80042fa <UART_SetConfig+0x192>
 80042e8:	e00f      	b.n	800430a <UART_SetConfig+0x1a2>
 80042ea:	2300      	movs	r3, #0
 80042ec:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80042f0:	e0ad      	b.n	800444e <UART_SetConfig+0x2e6>
 80042f2:	2302      	movs	r3, #2
 80042f4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80042f8:	e0a9      	b.n	800444e <UART_SetConfig+0x2e6>
 80042fa:	2304      	movs	r3, #4
 80042fc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004300:	e0a5      	b.n	800444e <UART_SetConfig+0x2e6>
 8004302:	2308      	movs	r3, #8
 8004304:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004308:	e0a1      	b.n	800444e <UART_SetConfig+0x2e6>
 800430a:	2310      	movs	r3, #16
 800430c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004310:	e09d      	b.n	800444e <UART_SetConfig+0x2e6>
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a4a      	ldr	r2, [pc, #296]	@ (8004440 <UART_SetConfig+0x2d8>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d125      	bne.n	8004368 <UART_SetConfig+0x200>
 800431c:	4b45      	ldr	r3, [pc, #276]	@ (8004434 <UART_SetConfig+0x2cc>)
 800431e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004322:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004326:	2bc0      	cmp	r3, #192	@ 0xc0
 8004328:	d016      	beq.n	8004358 <UART_SetConfig+0x1f0>
 800432a:	2bc0      	cmp	r3, #192	@ 0xc0
 800432c:	d818      	bhi.n	8004360 <UART_SetConfig+0x1f8>
 800432e:	2b80      	cmp	r3, #128	@ 0x80
 8004330:	d00a      	beq.n	8004348 <UART_SetConfig+0x1e0>
 8004332:	2b80      	cmp	r3, #128	@ 0x80
 8004334:	d814      	bhi.n	8004360 <UART_SetConfig+0x1f8>
 8004336:	2b00      	cmp	r3, #0
 8004338:	d002      	beq.n	8004340 <UART_SetConfig+0x1d8>
 800433a:	2b40      	cmp	r3, #64	@ 0x40
 800433c:	d008      	beq.n	8004350 <UART_SetConfig+0x1e8>
 800433e:	e00f      	b.n	8004360 <UART_SetConfig+0x1f8>
 8004340:	2300      	movs	r3, #0
 8004342:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004346:	e082      	b.n	800444e <UART_SetConfig+0x2e6>
 8004348:	2302      	movs	r3, #2
 800434a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800434e:	e07e      	b.n	800444e <UART_SetConfig+0x2e6>
 8004350:	2304      	movs	r3, #4
 8004352:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004356:	e07a      	b.n	800444e <UART_SetConfig+0x2e6>
 8004358:	2308      	movs	r3, #8
 800435a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800435e:	e076      	b.n	800444e <UART_SetConfig+0x2e6>
 8004360:	2310      	movs	r3, #16
 8004362:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004366:	e072      	b.n	800444e <UART_SetConfig+0x2e6>
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a35      	ldr	r2, [pc, #212]	@ (8004444 <UART_SetConfig+0x2dc>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d12a      	bne.n	80043c8 <UART_SetConfig+0x260>
 8004372:	4b30      	ldr	r3, [pc, #192]	@ (8004434 <UART_SetConfig+0x2cc>)
 8004374:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004378:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800437c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004380:	d01a      	beq.n	80043b8 <UART_SetConfig+0x250>
 8004382:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004386:	d81b      	bhi.n	80043c0 <UART_SetConfig+0x258>
 8004388:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800438c:	d00c      	beq.n	80043a8 <UART_SetConfig+0x240>
 800438e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004392:	d815      	bhi.n	80043c0 <UART_SetConfig+0x258>
 8004394:	2b00      	cmp	r3, #0
 8004396:	d003      	beq.n	80043a0 <UART_SetConfig+0x238>
 8004398:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800439c:	d008      	beq.n	80043b0 <UART_SetConfig+0x248>
 800439e:	e00f      	b.n	80043c0 <UART_SetConfig+0x258>
 80043a0:	2300      	movs	r3, #0
 80043a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043a6:	e052      	b.n	800444e <UART_SetConfig+0x2e6>
 80043a8:	2302      	movs	r3, #2
 80043aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043ae:	e04e      	b.n	800444e <UART_SetConfig+0x2e6>
 80043b0:	2304      	movs	r3, #4
 80043b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043b6:	e04a      	b.n	800444e <UART_SetConfig+0x2e6>
 80043b8:	2308      	movs	r3, #8
 80043ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043be:	e046      	b.n	800444e <UART_SetConfig+0x2e6>
 80043c0:	2310      	movs	r3, #16
 80043c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043c6:	e042      	b.n	800444e <UART_SetConfig+0x2e6>
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a17      	ldr	r2, [pc, #92]	@ (800442c <UART_SetConfig+0x2c4>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d13a      	bne.n	8004448 <UART_SetConfig+0x2e0>
 80043d2:	4b18      	ldr	r3, [pc, #96]	@ (8004434 <UART_SetConfig+0x2cc>)
 80043d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043d8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80043dc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80043e0:	d01a      	beq.n	8004418 <UART_SetConfig+0x2b0>
 80043e2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80043e6:	d81b      	bhi.n	8004420 <UART_SetConfig+0x2b8>
 80043e8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80043ec:	d00c      	beq.n	8004408 <UART_SetConfig+0x2a0>
 80043ee:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80043f2:	d815      	bhi.n	8004420 <UART_SetConfig+0x2b8>
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d003      	beq.n	8004400 <UART_SetConfig+0x298>
 80043f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80043fc:	d008      	beq.n	8004410 <UART_SetConfig+0x2a8>
 80043fe:	e00f      	b.n	8004420 <UART_SetConfig+0x2b8>
 8004400:	2300      	movs	r3, #0
 8004402:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004406:	e022      	b.n	800444e <UART_SetConfig+0x2e6>
 8004408:	2302      	movs	r3, #2
 800440a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800440e:	e01e      	b.n	800444e <UART_SetConfig+0x2e6>
 8004410:	2304      	movs	r3, #4
 8004412:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004416:	e01a      	b.n	800444e <UART_SetConfig+0x2e6>
 8004418:	2308      	movs	r3, #8
 800441a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800441e:	e016      	b.n	800444e <UART_SetConfig+0x2e6>
 8004420:	2310      	movs	r3, #16
 8004422:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004426:	e012      	b.n	800444e <UART_SetConfig+0x2e6>
 8004428:	efff69f3 	.word	0xefff69f3
 800442c:	40008000 	.word	0x40008000
 8004430:	40013800 	.word	0x40013800
 8004434:	40021000 	.word	0x40021000
 8004438:	40004400 	.word	0x40004400
 800443c:	40004800 	.word	0x40004800
 8004440:	40004c00 	.word	0x40004c00
 8004444:	40005000 	.word	0x40005000
 8004448:	2310      	movs	r3, #16
 800444a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a9f      	ldr	r2, [pc, #636]	@ (80046d0 <UART_SetConfig+0x568>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d17a      	bne.n	800454e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004458:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800445c:	2b08      	cmp	r3, #8
 800445e:	d824      	bhi.n	80044aa <UART_SetConfig+0x342>
 8004460:	a201      	add	r2, pc, #4	@ (adr r2, 8004468 <UART_SetConfig+0x300>)
 8004462:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004466:	bf00      	nop
 8004468:	0800448d 	.word	0x0800448d
 800446c:	080044ab 	.word	0x080044ab
 8004470:	08004495 	.word	0x08004495
 8004474:	080044ab 	.word	0x080044ab
 8004478:	0800449b 	.word	0x0800449b
 800447c:	080044ab 	.word	0x080044ab
 8004480:	080044ab 	.word	0x080044ab
 8004484:	080044ab 	.word	0x080044ab
 8004488:	080044a3 	.word	0x080044a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800448c:	f7fe fa60 	bl	8002950 <HAL_RCC_GetPCLK1Freq>
 8004490:	61f8      	str	r0, [r7, #28]
        break;
 8004492:	e010      	b.n	80044b6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004494:	4b8f      	ldr	r3, [pc, #572]	@ (80046d4 <UART_SetConfig+0x56c>)
 8004496:	61fb      	str	r3, [r7, #28]
        break;
 8004498:	e00d      	b.n	80044b6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800449a:	f7fe f9c1 	bl	8002820 <HAL_RCC_GetSysClockFreq>
 800449e:	61f8      	str	r0, [r7, #28]
        break;
 80044a0:	e009      	b.n	80044b6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80044a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80044a6:	61fb      	str	r3, [r7, #28]
        break;
 80044a8:	e005      	b.n	80044b6 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80044aa:	2300      	movs	r3, #0
 80044ac:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80044b4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80044b6:	69fb      	ldr	r3, [r7, #28]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	f000 80fb 	beq.w	80046b4 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	685a      	ldr	r2, [r3, #4]
 80044c2:	4613      	mov	r3, r2
 80044c4:	005b      	lsls	r3, r3, #1
 80044c6:	4413      	add	r3, r2
 80044c8:	69fa      	ldr	r2, [r7, #28]
 80044ca:	429a      	cmp	r2, r3
 80044cc:	d305      	bcc.n	80044da <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80044d4:	69fa      	ldr	r2, [r7, #28]
 80044d6:	429a      	cmp	r2, r3
 80044d8:	d903      	bls.n	80044e2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80044da:	2301      	movs	r3, #1
 80044dc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80044e0:	e0e8      	b.n	80046b4 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80044e2:	69fb      	ldr	r3, [r7, #28]
 80044e4:	2200      	movs	r2, #0
 80044e6:	461c      	mov	r4, r3
 80044e8:	4615      	mov	r5, r2
 80044ea:	f04f 0200 	mov.w	r2, #0
 80044ee:	f04f 0300 	mov.w	r3, #0
 80044f2:	022b      	lsls	r3, r5, #8
 80044f4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80044f8:	0222      	lsls	r2, r4, #8
 80044fa:	68f9      	ldr	r1, [r7, #12]
 80044fc:	6849      	ldr	r1, [r1, #4]
 80044fe:	0849      	lsrs	r1, r1, #1
 8004500:	2000      	movs	r0, #0
 8004502:	4688      	mov	r8, r1
 8004504:	4681      	mov	r9, r0
 8004506:	eb12 0a08 	adds.w	sl, r2, r8
 800450a:	eb43 0b09 	adc.w	fp, r3, r9
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	2200      	movs	r2, #0
 8004514:	603b      	str	r3, [r7, #0]
 8004516:	607a      	str	r2, [r7, #4]
 8004518:	e9d7 2300 	ldrd	r2, r3, [r7]
 800451c:	4650      	mov	r0, sl
 800451e:	4659      	mov	r1, fp
 8004520:	f7fb fe56 	bl	80001d0 <__aeabi_uldivmod>
 8004524:	4602      	mov	r2, r0
 8004526:	460b      	mov	r3, r1
 8004528:	4613      	mov	r3, r2
 800452a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800452c:	69bb      	ldr	r3, [r7, #24]
 800452e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004532:	d308      	bcc.n	8004546 <UART_SetConfig+0x3de>
 8004534:	69bb      	ldr	r3, [r7, #24]
 8004536:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800453a:	d204      	bcs.n	8004546 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	69ba      	ldr	r2, [r7, #24]
 8004542:	60da      	str	r2, [r3, #12]
 8004544:	e0b6      	b.n	80046b4 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004546:	2301      	movs	r3, #1
 8004548:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800454c:	e0b2      	b.n	80046b4 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	69db      	ldr	r3, [r3, #28]
 8004552:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004556:	d15e      	bne.n	8004616 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004558:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800455c:	2b08      	cmp	r3, #8
 800455e:	d828      	bhi.n	80045b2 <UART_SetConfig+0x44a>
 8004560:	a201      	add	r2, pc, #4	@ (adr r2, 8004568 <UART_SetConfig+0x400>)
 8004562:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004566:	bf00      	nop
 8004568:	0800458d 	.word	0x0800458d
 800456c:	08004595 	.word	0x08004595
 8004570:	0800459d 	.word	0x0800459d
 8004574:	080045b3 	.word	0x080045b3
 8004578:	080045a3 	.word	0x080045a3
 800457c:	080045b3 	.word	0x080045b3
 8004580:	080045b3 	.word	0x080045b3
 8004584:	080045b3 	.word	0x080045b3
 8004588:	080045ab 	.word	0x080045ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800458c:	f7fe f9e0 	bl	8002950 <HAL_RCC_GetPCLK1Freq>
 8004590:	61f8      	str	r0, [r7, #28]
        break;
 8004592:	e014      	b.n	80045be <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004594:	f7fe f9f2 	bl	800297c <HAL_RCC_GetPCLK2Freq>
 8004598:	61f8      	str	r0, [r7, #28]
        break;
 800459a:	e010      	b.n	80045be <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800459c:	4b4d      	ldr	r3, [pc, #308]	@ (80046d4 <UART_SetConfig+0x56c>)
 800459e:	61fb      	str	r3, [r7, #28]
        break;
 80045a0:	e00d      	b.n	80045be <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80045a2:	f7fe f93d 	bl	8002820 <HAL_RCC_GetSysClockFreq>
 80045a6:	61f8      	str	r0, [r7, #28]
        break;
 80045a8:	e009      	b.n	80045be <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80045aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80045ae:	61fb      	str	r3, [r7, #28]
        break;
 80045b0:	e005      	b.n	80045be <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80045b2:	2300      	movs	r3, #0
 80045b4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80045bc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80045be:	69fb      	ldr	r3, [r7, #28]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d077      	beq.n	80046b4 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80045c4:	69fb      	ldr	r3, [r7, #28]
 80045c6:	005a      	lsls	r2, r3, #1
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	085b      	lsrs	r3, r3, #1
 80045ce:	441a      	add	r2, r3
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80045d8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80045da:	69bb      	ldr	r3, [r7, #24]
 80045dc:	2b0f      	cmp	r3, #15
 80045de:	d916      	bls.n	800460e <UART_SetConfig+0x4a6>
 80045e0:	69bb      	ldr	r3, [r7, #24]
 80045e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80045e6:	d212      	bcs.n	800460e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80045e8:	69bb      	ldr	r3, [r7, #24]
 80045ea:	b29b      	uxth	r3, r3
 80045ec:	f023 030f 	bic.w	r3, r3, #15
 80045f0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80045f2:	69bb      	ldr	r3, [r7, #24]
 80045f4:	085b      	lsrs	r3, r3, #1
 80045f6:	b29b      	uxth	r3, r3
 80045f8:	f003 0307 	and.w	r3, r3, #7
 80045fc:	b29a      	uxth	r2, r3
 80045fe:	8afb      	ldrh	r3, [r7, #22]
 8004600:	4313      	orrs	r3, r2
 8004602:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	8afa      	ldrh	r2, [r7, #22]
 800460a:	60da      	str	r2, [r3, #12]
 800460c:	e052      	b.n	80046b4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800460e:	2301      	movs	r3, #1
 8004610:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004614:	e04e      	b.n	80046b4 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004616:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800461a:	2b08      	cmp	r3, #8
 800461c:	d827      	bhi.n	800466e <UART_SetConfig+0x506>
 800461e:	a201      	add	r2, pc, #4	@ (adr r2, 8004624 <UART_SetConfig+0x4bc>)
 8004620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004624:	08004649 	.word	0x08004649
 8004628:	08004651 	.word	0x08004651
 800462c:	08004659 	.word	0x08004659
 8004630:	0800466f 	.word	0x0800466f
 8004634:	0800465f 	.word	0x0800465f
 8004638:	0800466f 	.word	0x0800466f
 800463c:	0800466f 	.word	0x0800466f
 8004640:	0800466f 	.word	0x0800466f
 8004644:	08004667 	.word	0x08004667
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004648:	f7fe f982 	bl	8002950 <HAL_RCC_GetPCLK1Freq>
 800464c:	61f8      	str	r0, [r7, #28]
        break;
 800464e:	e014      	b.n	800467a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004650:	f7fe f994 	bl	800297c <HAL_RCC_GetPCLK2Freq>
 8004654:	61f8      	str	r0, [r7, #28]
        break;
 8004656:	e010      	b.n	800467a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004658:	4b1e      	ldr	r3, [pc, #120]	@ (80046d4 <UART_SetConfig+0x56c>)
 800465a:	61fb      	str	r3, [r7, #28]
        break;
 800465c:	e00d      	b.n	800467a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800465e:	f7fe f8df 	bl	8002820 <HAL_RCC_GetSysClockFreq>
 8004662:	61f8      	str	r0, [r7, #28]
        break;
 8004664:	e009      	b.n	800467a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004666:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800466a:	61fb      	str	r3, [r7, #28]
        break;
 800466c:	e005      	b.n	800467a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800466e:	2300      	movs	r3, #0
 8004670:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004672:	2301      	movs	r3, #1
 8004674:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004678:	bf00      	nop
    }

    if (pclk != 0U)
 800467a:	69fb      	ldr	r3, [r7, #28]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d019      	beq.n	80046b4 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	085a      	lsrs	r2, r3, #1
 8004686:	69fb      	ldr	r3, [r7, #28]
 8004688:	441a      	add	r2, r3
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004692:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004694:	69bb      	ldr	r3, [r7, #24]
 8004696:	2b0f      	cmp	r3, #15
 8004698:	d909      	bls.n	80046ae <UART_SetConfig+0x546>
 800469a:	69bb      	ldr	r3, [r7, #24]
 800469c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80046a0:	d205      	bcs.n	80046ae <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80046a2:	69bb      	ldr	r3, [r7, #24]
 80046a4:	b29a      	uxth	r2, r3
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	60da      	str	r2, [r3, #12]
 80046ac:	e002      	b.n	80046b4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80046ae:	2301      	movs	r3, #1
 80046b0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	2200      	movs	r2, #0
 80046b8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	2200      	movs	r2, #0
 80046be:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80046c0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80046c4:	4618      	mov	r0, r3
 80046c6:	3728      	adds	r7, #40	@ 0x28
 80046c8:	46bd      	mov	sp, r7
 80046ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80046ce:	bf00      	nop
 80046d0:	40008000 	.word	0x40008000
 80046d4:	00f42400 	.word	0x00f42400

080046d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80046d8:	b480      	push	{r7}
 80046da:	b083      	sub	sp, #12
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046e4:	f003 0308 	and.w	r3, r3, #8
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d00a      	beq.n	8004702 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	430a      	orrs	r2, r1
 8004700:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004706:	f003 0301 	and.w	r3, r3, #1
 800470a:	2b00      	cmp	r3, #0
 800470c:	d00a      	beq.n	8004724 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	430a      	orrs	r2, r1
 8004722:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004728:	f003 0302 	and.w	r3, r3, #2
 800472c:	2b00      	cmp	r3, #0
 800472e:	d00a      	beq.n	8004746 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	430a      	orrs	r2, r1
 8004744:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800474a:	f003 0304 	and.w	r3, r3, #4
 800474e:	2b00      	cmp	r3, #0
 8004750:	d00a      	beq.n	8004768 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	430a      	orrs	r2, r1
 8004766:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800476c:	f003 0310 	and.w	r3, r3, #16
 8004770:	2b00      	cmp	r3, #0
 8004772:	d00a      	beq.n	800478a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	689b      	ldr	r3, [r3, #8]
 800477a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	430a      	orrs	r2, r1
 8004788:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800478e:	f003 0320 	and.w	r3, r3, #32
 8004792:	2b00      	cmp	r3, #0
 8004794:	d00a      	beq.n	80047ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	689b      	ldr	r3, [r3, #8]
 800479c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	430a      	orrs	r2, r1
 80047aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d01a      	beq.n	80047ee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	430a      	orrs	r2, r1
 80047cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047d2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80047d6:	d10a      	bne.n	80047ee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	430a      	orrs	r2, r1
 80047ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d00a      	beq.n	8004810 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	430a      	orrs	r2, r1
 800480e:	605a      	str	r2, [r3, #4]
  }
}
 8004810:	bf00      	nop
 8004812:	370c      	adds	r7, #12
 8004814:	46bd      	mov	sp, r7
 8004816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481a:	4770      	bx	lr

0800481c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b098      	sub	sp, #96	@ 0x60
 8004820:	af02      	add	r7, sp, #8
 8004822:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2200      	movs	r2, #0
 8004828:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800482c:	f7fc ffd6 	bl	80017dc <HAL_GetTick>
 8004830:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f003 0308 	and.w	r3, r3, #8
 800483c:	2b08      	cmp	r3, #8
 800483e:	d12e      	bne.n	800489e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004840:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004844:	9300      	str	r3, [sp, #0]
 8004846:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004848:	2200      	movs	r2, #0
 800484a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800484e:	6878      	ldr	r0, [r7, #4]
 8004850:	f000 f88c 	bl	800496c <UART_WaitOnFlagUntilTimeout>
 8004854:	4603      	mov	r3, r0
 8004856:	2b00      	cmp	r3, #0
 8004858:	d021      	beq.n	800489e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004860:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004862:	e853 3f00 	ldrex	r3, [r3]
 8004866:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004868:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800486a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800486e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	461a      	mov	r2, r3
 8004876:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004878:	647b      	str	r3, [r7, #68]	@ 0x44
 800487a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800487c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800487e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004880:	e841 2300 	strex	r3, r2, [r1]
 8004884:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004886:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004888:	2b00      	cmp	r3, #0
 800488a:	d1e6      	bne.n	800485a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2220      	movs	r2, #32
 8004890:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2200      	movs	r2, #0
 8004896:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800489a:	2303      	movs	r3, #3
 800489c:	e062      	b.n	8004964 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f003 0304 	and.w	r3, r3, #4
 80048a8:	2b04      	cmp	r3, #4
 80048aa:	d149      	bne.n	8004940 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80048ac:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80048b0:	9300      	str	r3, [sp, #0]
 80048b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048b4:	2200      	movs	r2, #0
 80048b6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80048ba:	6878      	ldr	r0, [r7, #4]
 80048bc:	f000 f856 	bl	800496c <UART_WaitOnFlagUntilTimeout>
 80048c0:	4603      	mov	r3, r0
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d03c      	beq.n	8004940 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048ce:	e853 3f00 	ldrex	r3, [r3]
 80048d2:	623b      	str	r3, [r7, #32]
   return(result);
 80048d4:	6a3b      	ldr	r3, [r7, #32]
 80048d6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80048da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	461a      	mov	r2, r3
 80048e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80048e4:	633b      	str	r3, [r7, #48]	@ 0x30
 80048e6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048e8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80048ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80048ec:	e841 2300 	strex	r3, r2, [r1]
 80048f0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80048f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d1e6      	bne.n	80048c6 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	3308      	adds	r3, #8
 80048fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	e853 3f00 	ldrex	r3, [r3]
 8004906:	60fb      	str	r3, [r7, #12]
   return(result);
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	f023 0301 	bic.w	r3, r3, #1
 800490e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	3308      	adds	r3, #8
 8004916:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004918:	61fa      	str	r2, [r7, #28]
 800491a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800491c:	69b9      	ldr	r1, [r7, #24]
 800491e:	69fa      	ldr	r2, [r7, #28]
 8004920:	e841 2300 	strex	r3, r2, [r1]
 8004924:	617b      	str	r3, [r7, #20]
   return(result);
 8004926:	697b      	ldr	r3, [r7, #20]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d1e5      	bne.n	80048f8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2220      	movs	r2, #32
 8004930:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2200      	movs	r2, #0
 8004938:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800493c:	2303      	movs	r3, #3
 800493e:	e011      	b.n	8004964 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2220      	movs	r2, #32
 8004944:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2220      	movs	r2, #32
 800494a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2200      	movs	r2, #0
 8004952:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2200      	movs	r2, #0
 8004958:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2200      	movs	r2, #0
 800495e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004962:	2300      	movs	r3, #0
}
 8004964:	4618      	mov	r0, r3
 8004966:	3758      	adds	r7, #88	@ 0x58
 8004968:	46bd      	mov	sp, r7
 800496a:	bd80      	pop	{r7, pc}

0800496c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b084      	sub	sp, #16
 8004970:	af00      	add	r7, sp, #0
 8004972:	60f8      	str	r0, [r7, #12]
 8004974:	60b9      	str	r1, [r7, #8]
 8004976:	603b      	str	r3, [r7, #0]
 8004978:	4613      	mov	r3, r2
 800497a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800497c:	e04f      	b.n	8004a1e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800497e:	69bb      	ldr	r3, [r7, #24]
 8004980:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004984:	d04b      	beq.n	8004a1e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004986:	f7fc ff29 	bl	80017dc <HAL_GetTick>
 800498a:	4602      	mov	r2, r0
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	1ad3      	subs	r3, r2, r3
 8004990:	69ba      	ldr	r2, [r7, #24]
 8004992:	429a      	cmp	r2, r3
 8004994:	d302      	bcc.n	800499c <UART_WaitOnFlagUntilTimeout+0x30>
 8004996:	69bb      	ldr	r3, [r7, #24]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d101      	bne.n	80049a0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800499c:	2303      	movs	r3, #3
 800499e:	e04e      	b.n	8004a3e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f003 0304 	and.w	r3, r3, #4
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d037      	beq.n	8004a1e <UART_WaitOnFlagUntilTimeout+0xb2>
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	2b80      	cmp	r3, #128	@ 0x80
 80049b2:	d034      	beq.n	8004a1e <UART_WaitOnFlagUntilTimeout+0xb2>
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	2b40      	cmp	r3, #64	@ 0x40
 80049b8:	d031      	beq.n	8004a1e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	69db      	ldr	r3, [r3, #28]
 80049c0:	f003 0308 	and.w	r3, r3, #8
 80049c4:	2b08      	cmp	r3, #8
 80049c6:	d110      	bne.n	80049ea <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	2208      	movs	r2, #8
 80049ce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80049d0:	68f8      	ldr	r0, [r7, #12]
 80049d2:	f000 f838 	bl	8004a46 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	2208      	movs	r2, #8
 80049da:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	2200      	movs	r2, #0
 80049e2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80049e6:	2301      	movs	r3, #1
 80049e8:	e029      	b.n	8004a3e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	69db      	ldr	r3, [r3, #28]
 80049f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80049f4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80049f8:	d111      	bne.n	8004a1e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004a02:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004a04:	68f8      	ldr	r0, [r7, #12]
 8004a06:	f000 f81e 	bl	8004a46 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2220      	movs	r2, #32
 8004a0e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	2200      	movs	r2, #0
 8004a16:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004a1a:	2303      	movs	r3, #3
 8004a1c:	e00f      	b.n	8004a3e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	69da      	ldr	r2, [r3, #28]
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	4013      	ands	r3, r2
 8004a28:	68ba      	ldr	r2, [r7, #8]
 8004a2a:	429a      	cmp	r2, r3
 8004a2c:	bf0c      	ite	eq
 8004a2e:	2301      	moveq	r3, #1
 8004a30:	2300      	movne	r3, #0
 8004a32:	b2db      	uxtb	r3, r3
 8004a34:	461a      	mov	r2, r3
 8004a36:	79fb      	ldrb	r3, [r7, #7]
 8004a38:	429a      	cmp	r2, r3
 8004a3a:	d0a0      	beq.n	800497e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004a3c:	2300      	movs	r3, #0
}
 8004a3e:	4618      	mov	r0, r3
 8004a40:	3710      	adds	r7, #16
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bd80      	pop	{r7, pc}

08004a46 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004a46:	b480      	push	{r7}
 8004a48:	b095      	sub	sp, #84	@ 0x54
 8004a4a:	af00      	add	r7, sp, #0
 8004a4c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a56:	e853 3f00 	ldrex	r3, [r3]
 8004a5a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004a5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a5e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004a62:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	461a      	mov	r2, r3
 8004a6a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004a6c:	643b      	str	r3, [r7, #64]	@ 0x40
 8004a6e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a70:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004a72:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004a74:	e841 2300 	strex	r3, r2, [r1]
 8004a78:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004a7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d1e6      	bne.n	8004a4e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	3308      	adds	r3, #8
 8004a86:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a88:	6a3b      	ldr	r3, [r7, #32]
 8004a8a:	e853 3f00 	ldrex	r3, [r3]
 8004a8e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004a90:	69fb      	ldr	r3, [r7, #28]
 8004a92:	f023 0301 	bic.w	r3, r3, #1
 8004a96:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	3308      	adds	r3, #8
 8004a9e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004aa0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004aa2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aa4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004aa6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004aa8:	e841 2300 	strex	r3, r2, [r1]
 8004aac:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d1e5      	bne.n	8004a80 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ab8:	2b01      	cmp	r3, #1
 8004aba:	d118      	bne.n	8004aee <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	e853 3f00 	ldrex	r3, [r3]
 8004ac8:	60bb      	str	r3, [r7, #8]
   return(result);
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	f023 0310 	bic.w	r3, r3, #16
 8004ad0:	647b      	str	r3, [r7, #68]	@ 0x44
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	461a      	mov	r2, r3
 8004ad8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004ada:	61bb      	str	r3, [r7, #24]
 8004adc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ade:	6979      	ldr	r1, [r7, #20]
 8004ae0:	69ba      	ldr	r2, [r7, #24]
 8004ae2:	e841 2300 	strex	r3, r2, [r1]
 8004ae6:	613b      	str	r3, [r7, #16]
   return(result);
 8004ae8:	693b      	ldr	r3, [r7, #16]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d1e6      	bne.n	8004abc <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2220      	movs	r2, #32
 8004af2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2200      	movs	r2, #0
 8004afa:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2200      	movs	r2, #0
 8004b00:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004b02:	bf00      	nop
 8004b04:	3754      	adds	r7, #84	@ 0x54
 8004b06:	46bd      	mov	sp, r7
 8004b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0c:	4770      	bx	lr
	...

08004b10 <__NVIC_SetPriority>:
{
 8004b10:	b480      	push	{r7}
 8004b12:	b083      	sub	sp, #12
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	4603      	mov	r3, r0
 8004b18:	6039      	str	r1, [r7, #0]
 8004b1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	db0a      	blt.n	8004b3a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	b2da      	uxtb	r2, r3
 8004b28:	490c      	ldr	r1, [pc, #48]	@ (8004b5c <__NVIC_SetPriority+0x4c>)
 8004b2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b2e:	0112      	lsls	r2, r2, #4
 8004b30:	b2d2      	uxtb	r2, r2
 8004b32:	440b      	add	r3, r1
 8004b34:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004b38:	e00a      	b.n	8004b50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	b2da      	uxtb	r2, r3
 8004b3e:	4908      	ldr	r1, [pc, #32]	@ (8004b60 <__NVIC_SetPriority+0x50>)
 8004b40:	79fb      	ldrb	r3, [r7, #7]
 8004b42:	f003 030f 	and.w	r3, r3, #15
 8004b46:	3b04      	subs	r3, #4
 8004b48:	0112      	lsls	r2, r2, #4
 8004b4a:	b2d2      	uxtb	r2, r2
 8004b4c:	440b      	add	r3, r1
 8004b4e:	761a      	strb	r2, [r3, #24]
}
 8004b50:	bf00      	nop
 8004b52:	370c      	adds	r7, #12
 8004b54:	46bd      	mov	sp, r7
 8004b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5a:	4770      	bx	lr
 8004b5c:	e000e100 	.word	0xe000e100
 8004b60:	e000ed00 	.word	0xe000ed00

08004b64 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004b64:	b580      	push	{r7, lr}
 8004b66:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004b68:	4b05      	ldr	r3, [pc, #20]	@ (8004b80 <SysTick_Handler+0x1c>)
 8004b6a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004b6c:	f002 f852 	bl	8006c14 <xTaskGetSchedulerState>
 8004b70:	4603      	mov	r3, r0
 8004b72:	2b01      	cmp	r3, #1
 8004b74:	d001      	beq.n	8004b7a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004b76:	f002 ff47 	bl	8007a08 <xPortSysTickHandler>
  }
}
 8004b7a:	bf00      	nop
 8004b7c:	bd80      	pop	{r7, pc}
 8004b7e:	bf00      	nop
 8004b80:	e000e010 	.word	0xe000e010

08004b84 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004b84:	b580      	push	{r7, lr}
 8004b86:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004b88:	2100      	movs	r1, #0
 8004b8a:	f06f 0004 	mvn.w	r0, #4
 8004b8e:	f7ff ffbf 	bl	8004b10 <__NVIC_SetPriority>
#endif
}
 8004b92:	bf00      	nop
 8004b94:	bd80      	pop	{r7, pc}
	...

08004b98 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004b98:	b480      	push	{r7}
 8004b9a:	b083      	sub	sp, #12
 8004b9c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004b9e:	f3ef 8305 	mrs	r3, IPSR
 8004ba2:	603b      	str	r3, [r7, #0]
  return(result);
 8004ba4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d003      	beq.n	8004bb2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004baa:	f06f 0305 	mvn.w	r3, #5
 8004bae:	607b      	str	r3, [r7, #4]
 8004bb0:	e00c      	b.n	8004bcc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004bb2:	4b0a      	ldr	r3, [pc, #40]	@ (8004bdc <osKernelInitialize+0x44>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d105      	bne.n	8004bc6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004bba:	4b08      	ldr	r3, [pc, #32]	@ (8004bdc <osKernelInitialize+0x44>)
 8004bbc:	2201      	movs	r2, #1
 8004bbe:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	607b      	str	r3, [r7, #4]
 8004bc4:	e002      	b.n	8004bcc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004bc6:	f04f 33ff 	mov.w	r3, #4294967295
 8004bca:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004bcc:	687b      	ldr	r3, [r7, #4]
}
 8004bce:	4618      	mov	r0, r3
 8004bd0:	370c      	adds	r7, #12
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd8:	4770      	bx	lr
 8004bda:	bf00      	nop
 8004bdc:	200001cc 	.word	0x200001cc

08004be0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b082      	sub	sp, #8
 8004be4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004be6:	f3ef 8305 	mrs	r3, IPSR
 8004bea:	603b      	str	r3, [r7, #0]
  return(result);
 8004bec:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d003      	beq.n	8004bfa <osKernelStart+0x1a>
    stat = osErrorISR;
 8004bf2:	f06f 0305 	mvn.w	r3, #5
 8004bf6:	607b      	str	r3, [r7, #4]
 8004bf8:	e010      	b.n	8004c1c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004bfa:	4b0b      	ldr	r3, [pc, #44]	@ (8004c28 <osKernelStart+0x48>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	2b01      	cmp	r3, #1
 8004c00:	d109      	bne.n	8004c16 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004c02:	f7ff ffbf 	bl	8004b84 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004c06:	4b08      	ldr	r3, [pc, #32]	@ (8004c28 <osKernelStart+0x48>)
 8004c08:	2202      	movs	r2, #2
 8004c0a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004c0c:	f001 fba4 	bl	8006358 <vTaskStartScheduler>
      stat = osOK;
 8004c10:	2300      	movs	r3, #0
 8004c12:	607b      	str	r3, [r7, #4]
 8004c14:	e002      	b.n	8004c1c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004c16:	f04f 33ff 	mov.w	r3, #4294967295
 8004c1a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004c1c:	687b      	ldr	r3, [r7, #4]
}
 8004c1e:	4618      	mov	r0, r3
 8004c20:	3708      	adds	r7, #8
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bd80      	pop	{r7, pc}
 8004c26:	bf00      	nop
 8004c28:	200001cc 	.word	0x200001cc

08004c2c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b08e      	sub	sp, #56	@ 0x38
 8004c30:	af04      	add	r7, sp, #16
 8004c32:	60f8      	str	r0, [r7, #12]
 8004c34:	60b9      	str	r1, [r7, #8]
 8004c36:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004c38:	2300      	movs	r3, #0
 8004c3a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004c3c:	f3ef 8305 	mrs	r3, IPSR
 8004c40:	617b      	str	r3, [r7, #20]
  return(result);
 8004c42:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d17e      	bne.n	8004d46 <osThreadNew+0x11a>
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d07b      	beq.n	8004d46 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004c4e:	2380      	movs	r3, #128	@ 0x80
 8004c50:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004c52:	2318      	movs	r3, #24
 8004c54:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004c56:	2300      	movs	r3, #0
 8004c58:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8004c5a:	f04f 33ff 	mov.w	r3, #4294967295
 8004c5e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d045      	beq.n	8004cf2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d002      	beq.n	8004c74 <osThreadNew+0x48>
        name = attr->name;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	699b      	ldr	r3, [r3, #24]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d002      	beq.n	8004c82 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	699b      	ldr	r3, [r3, #24]
 8004c80:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004c82:	69fb      	ldr	r3, [r7, #28]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d008      	beq.n	8004c9a <osThreadNew+0x6e>
 8004c88:	69fb      	ldr	r3, [r7, #28]
 8004c8a:	2b38      	cmp	r3, #56	@ 0x38
 8004c8c:	d805      	bhi.n	8004c9a <osThreadNew+0x6e>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	f003 0301 	and.w	r3, r3, #1
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d001      	beq.n	8004c9e <osThreadNew+0x72>
        return (NULL);
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	e054      	b.n	8004d48 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	695b      	ldr	r3, [r3, #20]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d003      	beq.n	8004cae <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	695b      	ldr	r3, [r3, #20]
 8004caa:	089b      	lsrs	r3, r3, #2
 8004cac:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	689b      	ldr	r3, [r3, #8]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d00e      	beq.n	8004cd4 <osThreadNew+0xa8>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	68db      	ldr	r3, [r3, #12]
 8004cba:	2b5b      	cmp	r3, #91	@ 0x5b
 8004cbc:	d90a      	bls.n	8004cd4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d006      	beq.n	8004cd4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	695b      	ldr	r3, [r3, #20]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d002      	beq.n	8004cd4 <osThreadNew+0xa8>
        mem = 1;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	61bb      	str	r3, [r7, #24]
 8004cd2:	e010      	b.n	8004cf6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	689b      	ldr	r3, [r3, #8]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d10c      	bne.n	8004cf6 <osThreadNew+0xca>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	68db      	ldr	r3, [r3, #12]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d108      	bne.n	8004cf6 <osThreadNew+0xca>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	691b      	ldr	r3, [r3, #16]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d104      	bne.n	8004cf6 <osThreadNew+0xca>
          mem = 0;
 8004cec:	2300      	movs	r3, #0
 8004cee:	61bb      	str	r3, [r7, #24]
 8004cf0:	e001      	b.n	8004cf6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004cf6:	69bb      	ldr	r3, [r7, #24]
 8004cf8:	2b01      	cmp	r3, #1
 8004cfa:	d110      	bne.n	8004d1e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004d00:	687a      	ldr	r2, [r7, #4]
 8004d02:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004d04:	9202      	str	r2, [sp, #8]
 8004d06:	9301      	str	r3, [sp, #4]
 8004d08:	69fb      	ldr	r3, [r7, #28]
 8004d0a:	9300      	str	r3, [sp, #0]
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	6a3a      	ldr	r2, [r7, #32]
 8004d10:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004d12:	68f8      	ldr	r0, [r7, #12]
 8004d14:	f001 f944 	bl	8005fa0 <xTaskCreateStatic>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	613b      	str	r3, [r7, #16]
 8004d1c:	e013      	b.n	8004d46 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004d1e:	69bb      	ldr	r3, [r7, #24]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d110      	bne.n	8004d46 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004d24:	6a3b      	ldr	r3, [r7, #32]
 8004d26:	b29a      	uxth	r2, r3
 8004d28:	f107 0310 	add.w	r3, r7, #16
 8004d2c:	9301      	str	r3, [sp, #4]
 8004d2e:	69fb      	ldr	r3, [r7, #28]
 8004d30:	9300      	str	r3, [sp, #0]
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004d36:	68f8      	ldr	r0, [r7, #12]
 8004d38:	f001 f992 	bl	8006060 <xTaskCreate>
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	2b01      	cmp	r3, #1
 8004d40:	d001      	beq.n	8004d46 <osThreadNew+0x11a>
            hTask = NULL;
 8004d42:	2300      	movs	r3, #0
 8004d44:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004d46:	693b      	ldr	r3, [r7, #16]
}
 8004d48:	4618      	mov	r0, r3
 8004d4a:	3728      	adds	r7, #40	@ 0x28
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	bd80      	pop	{r7, pc}

08004d50 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b084      	sub	sp, #16
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004d58:	f3ef 8305 	mrs	r3, IPSR
 8004d5c:	60bb      	str	r3, [r7, #8]
  return(result);
 8004d5e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d003      	beq.n	8004d6c <osDelay+0x1c>
    stat = osErrorISR;
 8004d64:	f06f 0305 	mvn.w	r3, #5
 8004d68:	60fb      	str	r3, [r7, #12]
 8004d6a:	e007      	b.n	8004d7c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d002      	beq.n	8004d7c <osDelay+0x2c>
      vTaskDelay(ticks);
 8004d76:	6878      	ldr	r0, [r7, #4]
 8004d78:	f001 fab8 	bl	80062ec <vTaskDelay>
    }
  }

  return (stat);
 8004d7c:	68fb      	ldr	r3, [r7, #12]
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	3710      	adds	r7, #16
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}

08004d86 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8004d86:	b580      	push	{r7, lr}
 8004d88:	b088      	sub	sp, #32
 8004d8a:	af00      	add	r7, sp, #0
 8004d8c:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8004d8e:	2300      	movs	r3, #0
 8004d90:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004d92:	f3ef 8305 	mrs	r3, IPSR
 8004d96:	60bb      	str	r3, [r7, #8]
  return(result);
 8004d98:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d174      	bne.n	8004e88 <osMutexNew+0x102>
    if (attr != NULL) {
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d003      	beq.n	8004dac <osMutexNew+0x26>
      type = attr->attr_bits;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	61bb      	str	r3, [r7, #24]
 8004daa:	e001      	b.n	8004db0 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8004dac:	2300      	movs	r3, #0
 8004dae:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8004db0:	69bb      	ldr	r3, [r7, #24]
 8004db2:	f003 0301 	and.w	r3, r3, #1
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d002      	beq.n	8004dc0 <osMutexNew+0x3a>
      rmtx = 1U;
 8004dba:	2301      	movs	r3, #1
 8004dbc:	617b      	str	r3, [r7, #20]
 8004dbe:	e001      	b.n	8004dc4 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8004dc4:	69bb      	ldr	r3, [r7, #24]
 8004dc6:	f003 0308 	and.w	r3, r3, #8
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d15c      	bne.n	8004e88 <osMutexNew+0x102>
      mem = -1;
 8004dce:	f04f 33ff 	mov.w	r3, #4294967295
 8004dd2:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d015      	beq.n	8004e06 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	689b      	ldr	r3, [r3, #8]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d006      	beq.n	8004df0 <osMutexNew+0x6a>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	68db      	ldr	r3, [r3, #12]
 8004de6:	2b4f      	cmp	r3, #79	@ 0x4f
 8004de8:	d902      	bls.n	8004df0 <osMutexNew+0x6a>
          mem = 1;
 8004dea:	2301      	movs	r3, #1
 8004dec:	613b      	str	r3, [r7, #16]
 8004dee:	e00c      	b.n	8004e0a <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	689b      	ldr	r3, [r3, #8]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d108      	bne.n	8004e0a <osMutexNew+0x84>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	68db      	ldr	r3, [r3, #12]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d104      	bne.n	8004e0a <osMutexNew+0x84>
            mem = 0;
 8004e00:	2300      	movs	r3, #0
 8004e02:	613b      	str	r3, [r7, #16]
 8004e04:	e001      	b.n	8004e0a <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8004e06:	2300      	movs	r3, #0
 8004e08:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8004e0a:	693b      	ldr	r3, [r7, #16]
 8004e0c:	2b01      	cmp	r3, #1
 8004e0e:	d112      	bne.n	8004e36 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d007      	beq.n	8004e26 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	689b      	ldr	r3, [r3, #8]
 8004e1a:	4619      	mov	r1, r3
 8004e1c:	2004      	movs	r0, #4
 8004e1e:	f000 fb20 	bl	8005462 <xQueueCreateMutexStatic>
 8004e22:	61f8      	str	r0, [r7, #28]
 8004e24:	e016      	b.n	8004e54 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	689b      	ldr	r3, [r3, #8]
 8004e2a:	4619      	mov	r1, r3
 8004e2c:	2001      	movs	r0, #1
 8004e2e:	f000 fb18 	bl	8005462 <xQueueCreateMutexStatic>
 8004e32:	61f8      	str	r0, [r7, #28]
 8004e34:	e00e      	b.n	8004e54 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8004e36:	693b      	ldr	r3, [r7, #16]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d10b      	bne.n	8004e54 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8004e3c:	697b      	ldr	r3, [r7, #20]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d004      	beq.n	8004e4c <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8004e42:	2004      	movs	r0, #4
 8004e44:	f000 faf5 	bl	8005432 <xQueueCreateMutex>
 8004e48:	61f8      	str	r0, [r7, #28]
 8004e4a:	e003      	b.n	8004e54 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8004e4c:	2001      	movs	r0, #1
 8004e4e:	f000 faf0 	bl	8005432 <xQueueCreateMutex>
 8004e52:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8004e54:	69fb      	ldr	r3, [r7, #28]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d00c      	beq.n	8004e74 <osMutexNew+0xee>
        if (attr != NULL) {
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d003      	beq.n	8004e68 <osMutexNew+0xe2>
          name = attr->name;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	60fb      	str	r3, [r7, #12]
 8004e66:	e001      	b.n	8004e6c <osMutexNew+0xe6>
        } else {
          name = NULL;
 8004e68:	2300      	movs	r3, #0
 8004e6a:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8004e6c:	68f9      	ldr	r1, [r7, #12]
 8004e6e:	69f8      	ldr	r0, [r7, #28]
 8004e70:	f001 f838 	bl	8005ee4 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8004e74:	69fb      	ldr	r3, [r7, #28]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d006      	beq.n	8004e88 <osMutexNew+0x102>
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d003      	beq.n	8004e88 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8004e80:	69fb      	ldr	r3, [r7, #28]
 8004e82:	f043 0301 	orr.w	r3, r3, #1
 8004e86:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8004e88:	69fb      	ldr	r3, [r7, #28]
}
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	3720      	adds	r7, #32
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bd80      	pop	{r7, pc}

08004e92 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8004e92:	b580      	push	{r7, lr}
 8004e94:	b086      	sub	sp, #24
 8004e96:	af00      	add	r7, sp, #0
 8004e98:	6078      	str	r0, [r7, #4]
 8004e9a:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	f023 0301 	bic.w	r3, r3, #1
 8004ea2:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	f003 0301 	and.w	r3, r3, #1
 8004eaa:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8004eac:	2300      	movs	r3, #0
 8004eae:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004eb0:	f3ef 8305 	mrs	r3, IPSR
 8004eb4:	60bb      	str	r3, [r7, #8]
  return(result);
 8004eb6:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d003      	beq.n	8004ec4 <osMutexAcquire+0x32>
    stat = osErrorISR;
 8004ebc:	f06f 0305 	mvn.w	r3, #5
 8004ec0:	617b      	str	r3, [r7, #20]
 8004ec2:	e02c      	b.n	8004f1e <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8004ec4:	693b      	ldr	r3, [r7, #16]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d103      	bne.n	8004ed2 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8004eca:	f06f 0303 	mvn.w	r3, #3
 8004ece:	617b      	str	r3, [r7, #20]
 8004ed0:	e025      	b.n	8004f1e <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d011      	beq.n	8004efc <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8004ed8:	6839      	ldr	r1, [r7, #0]
 8004eda:	6938      	ldr	r0, [r7, #16]
 8004edc:	f000 fb11 	bl	8005502 <xQueueTakeMutexRecursive>
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	2b01      	cmp	r3, #1
 8004ee4:	d01b      	beq.n	8004f1e <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d003      	beq.n	8004ef4 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8004eec:	f06f 0301 	mvn.w	r3, #1
 8004ef0:	617b      	str	r3, [r7, #20]
 8004ef2:	e014      	b.n	8004f1e <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8004ef4:	f06f 0302 	mvn.w	r3, #2
 8004ef8:	617b      	str	r3, [r7, #20]
 8004efa:	e010      	b.n	8004f1e <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8004efc:	6839      	ldr	r1, [r7, #0]
 8004efe:	6938      	ldr	r0, [r7, #16]
 8004f00:	f000 fdb8 	bl	8005a74 <xQueueSemaphoreTake>
 8004f04:	4603      	mov	r3, r0
 8004f06:	2b01      	cmp	r3, #1
 8004f08:	d009      	beq.n	8004f1e <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d003      	beq.n	8004f18 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8004f10:	f06f 0301 	mvn.w	r3, #1
 8004f14:	617b      	str	r3, [r7, #20]
 8004f16:	e002      	b.n	8004f1e <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8004f18:	f06f 0302 	mvn.w	r3, #2
 8004f1c:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8004f1e:	697b      	ldr	r3, [r7, #20]
}
 8004f20:	4618      	mov	r0, r3
 8004f22:	3718      	adds	r7, #24
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bd80      	pop	{r7, pc}

08004f28 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b086      	sub	sp, #24
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	f023 0301 	bic.w	r3, r3, #1
 8004f36:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	f003 0301 	and.w	r3, r3, #1
 8004f3e:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8004f40:	2300      	movs	r3, #0
 8004f42:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004f44:	f3ef 8305 	mrs	r3, IPSR
 8004f48:	60bb      	str	r3, [r7, #8]
  return(result);
 8004f4a:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d003      	beq.n	8004f58 <osMutexRelease+0x30>
    stat = osErrorISR;
 8004f50:	f06f 0305 	mvn.w	r3, #5
 8004f54:	617b      	str	r3, [r7, #20]
 8004f56:	e01f      	b.n	8004f98 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8004f58:	693b      	ldr	r3, [r7, #16]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d103      	bne.n	8004f66 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8004f5e:	f06f 0303 	mvn.w	r3, #3
 8004f62:	617b      	str	r3, [r7, #20]
 8004f64:	e018      	b.n	8004f98 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d009      	beq.n	8004f80 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8004f6c:	6938      	ldr	r0, [r7, #16]
 8004f6e:	f000 fa93 	bl	8005498 <xQueueGiveMutexRecursive>
 8004f72:	4603      	mov	r3, r0
 8004f74:	2b01      	cmp	r3, #1
 8004f76:	d00f      	beq.n	8004f98 <osMutexRelease+0x70>
        stat = osErrorResource;
 8004f78:	f06f 0302 	mvn.w	r3, #2
 8004f7c:	617b      	str	r3, [r7, #20]
 8004f7e:	e00b      	b.n	8004f98 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8004f80:	2300      	movs	r3, #0
 8004f82:	2200      	movs	r2, #0
 8004f84:	2100      	movs	r1, #0
 8004f86:	6938      	ldr	r0, [r7, #16]
 8004f88:	f000 faf2 	bl	8005570 <xQueueGenericSend>
 8004f8c:	4603      	mov	r3, r0
 8004f8e:	2b01      	cmp	r3, #1
 8004f90:	d002      	beq.n	8004f98 <osMutexRelease+0x70>
        stat = osErrorResource;
 8004f92:	f06f 0302 	mvn.w	r3, #2
 8004f96:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8004f98:	697b      	ldr	r3, [r7, #20]
}
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	3718      	adds	r7, #24
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd80      	pop	{r7, pc}
	...

08004fa4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004fa4:	b480      	push	{r7}
 8004fa6:	b085      	sub	sp, #20
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	60f8      	str	r0, [r7, #12]
 8004fac:	60b9      	str	r1, [r7, #8]
 8004fae:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	4a07      	ldr	r2, [pc, #28]	@ (8004fd0 <vApplicationGetIdleTaskMemory+0x2c>)
 8004fb4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	4a06      	ldr	r2, [pc, #24]	@ (8004fd4 <vApplicationGetIdleTaskMemory+0x30>)
 8004fba:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2280      	movs	r2, #128	@ 0x80
 8004fc0:	601a      	str	r2, [r3, #0]
}
 8004fc2:	bf00      	nop
 8004fc4:	3714      	adds	r7, #20
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fcc:	4770      	bx	lr
 8004fce:	bf00      	nop
 8004fd0:	200001d0 	.word	0x200001d0
 8004fd4:	2000022c 	.word	0x2000022c

08004fd8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004fd8:	b480      	push	{r7}
 8004fda:	b085      	sub	sp, #20
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	60f8      	str	r0, [r7, #12]
 8004fe0:	60b9      	str	r1, [r7, #8]
 8004fe2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	4a07      	ldr	r2, [pc, #28]	@ (8005004 <vApplicationGetTimerTaskMemory+0x2c>)
 8004fe8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	4a06      	ldr	r2, [pc, #24]	@ (8005008 <vApplicationGetTimerTaskMemory+0x30>)
 8004fee:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004ff6:	601a      	str	r2, [r3, #0]
}
 8004ff8:	bf00      	nop
 8004ffa:	3714      	adds	r7, #20
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005002:	4770      	bx	lr
 8005004:	2000042c 	.word	0x2000042c
 8005008:	20000488 	.word	0x20000488

0800500c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800500c:	b480      	push	{r7}
 800500e:	b083      	sub	sp, #12
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	f103 0208 	add.w	r2, r3, #8
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	f04f 32ff 	mov.w	r2, #4294967295
 8005024:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	f103 0208 	add.w	r2, r3, #8
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	f103 0208 	add.w	r2, r3, #8
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2200      	movs	r2, #0
 800503e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005040:	bf00      	nop
 8005042:	370c      	adds	r7, #12
 8005044:	46bd      	mov	sp, r7
 8005046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504a:	4770      	bx	lr

0800504c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800504c:	b480      	push	{r7}
 800504e:	b083      	sub	sp, #12
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2200      	movs	r2, #0
 8005058:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800505a:	bf00      	nop
 800505c:	370c      	adds	r7, #12
 800505e:	46bd      	mov	sp, r7
 8005060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005064:	4770      	bx	lr

08005066 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005066:	b480      	push	{r7}
 8005068:	b085      	sub	sp, #20
 800506a:	af00      	add	r7, sp, #0
 800506c:	6078      	str	r0, [r7, #4]
 800506e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	68fa      	ldr	r2, [r7, #12]
 800507a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	689a      	ldr	r2, [r3, #8]
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	689b      	ldr	r3, [r3, #8]
 8005088:	683a      	ldr	r2, [r7, #0]
 800508a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	683a      	ldr	r2, [r7, #0]
 8005090:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	687a      	ldr	r2, [r7, #4]
 8005096:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	1c5a      	adds	r2, r3, #1
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	601a      	str	r2, [r3, #0]
}
 80050a2:	bf00      	nop
 80050a4:	3714      	adds	r7, #20
 80050a6:	46bd      	mov	sp, r7
 80050a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ac:	4770      	bx	lr

080050ae <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80050ae:	b480      	push	{r7}
 80050b0:	b085      	sub	sp, #20
 80050b2:	af00      	add	r7, sp, #0
 80050b4:	6078      	str	r0, [r7, #4]
 80050b6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050c4:	d103      	bne.n	80050ce <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	691b      	ldr	r3, [r3, #16]
 80050ca:	60fb      	str	r3, [r7, #12]
 80050cc:	e00c      	b.n	80050e8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	3308      	adds	r3, #8
 80050d2:	60fb      	str	r3, [r7, #12]
 80050d4:	e002      	b.n	80050dc <vListInsert+0x2e>
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	60fb      	str	r3, [r7, #12]
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	68ba      	ldr	r2, [r7, #8]
 80050e4:	429a      	cmp	r2, r3
 80050e6:	d2f6      	bcs.n	80050d6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	685a      	ldr	r2, [r3, #4]
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	685b      	ldr	r3, [r3, #4]
 80050f4:	683a      	ldr	r2, [r7, #0]
 80050f6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	68fa      	ldr	r2, [r7, #12]
 80050fc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	683a      	ldr	r2, [r7, #0]
 8005102:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	687a      	ldr	r2, [r7, #4]
 8005108:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	1c5a      	adds	r2, r3, #1
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	601a      	str	r2, [r3, #0]
}
 8005114:	bf00      	nop
 8005116:	3714      	adds	r7, #20
 8005118:	46bd      	mov	sp, r7
 800511a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511e:	4770      	bx	lr

08005120 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005120:	b480      	push	{r7}
 8005122:	b085      	sub	sp, #20
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	691b      	ldr	r3, [r3, #16]
 800512c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	685b      	ldr	r3, [r3, #4]
 8005132:	687a      	ldr	r2, [r7, #4]
 8005134:	6892      	ldr	r2, [r2, #8]
 8005136:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	689b      	ldr	r3, [r3, #8]
 800513c:	687a      	ldr	r2, [r7, #4]
 800513e:	6852      	ldr	r2, [r2, #4]
 8005140:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	687a      	ldr	r2, [r7, #4]
 8005148:	429a      	cmp	r2, r3
 800514a:	d103      	bne.n	8005154 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	689a      	ldr	r2, [r3, #8]
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2200      	movs	r2, #0
 8005158:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	1e5a      	subs	r2, r3, #1
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
}
 8005168:	4618      	mov	r0, r3
 800516a:	3714      	adds	r7, #20
 800516c:	46bd      	mov	sp, r7
 800516e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005172:	4770      	bx	lr

08005174 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b084      	sub	sp, #16
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
 800517c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d10b      	bne.n	80051a0 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005188:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800518c:	f383 8811 	msr	BASEPRI, r3
 8005190:	f3bf 8f6f 	isb	sy
 8005194:	f3bf 8f4f 	dsb	sy
 8005198:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800519a:	bf00      	nop
 800519c:	bf00      	nop
 800519e:	e7fd      	b.n	800519c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80051a0:	f002 fba2 	bl	80078e8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681a      	ldr	r2, [r3, #0]
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051ac:	68f9      	ldr	r1, [r7, #12]
 80051ae:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80051b0:	fb01 f303 	mul.w	r3, r1, r3
 80051b4:	441a      	add	r2, r3
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	2200      	movs	r2, #0
 80051be:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681a      	ldr	r2, [r3, #0]
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681a      	ldr	r2, [r3, #0]
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051d0:	3b01      	subs	r3, #1
 80051d2:	68f9      	ldr	r1, [r7, #12]
 80051d4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80051d6:	fb01 f303 	mul.w	r3, r1, r3
 80051da:	441a      	add	r2, r3
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	22ff      	movs	r2, #255	@ 0xff
 80051e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	22ff      	movs	r2, #255	@ 0xff
 80051ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d114      	bne.n	8005220 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	691b      	ldr	r3, [r3, #16]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d01a      	beq.n	8005234 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	3310      	adds	r3, #16
 8005202:	4618      	mov	r0, r3
 8005204:	f001 fb36 	bl	8006874 <xTaskRemoveFromEventList>
 8005208:	4603      	mov	r3, r0
 800520a:	2b00      	cmp	r3, #0
 800520c:	d012      	beq.n	8005234 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800520e:	4b0d      	ldr	r3, [pc, #52]	@ (8005244 <xQueueGenericReset+0xd0>)
 8005210:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005214:	601a      	str	r2, [r3, #0]
 8005216:	f3bf 8f4f 	dsb	sy
 800521a:	f3bf 8f6f 	isb	sy
 800521e:	e009      	b.n	8005234 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	3310      	adds	r3, #16
 8005224:	4618      	mov	r0, r3
 8005226:	f7ff fef1 	bl	800500c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	3324      	adds	r3, #36	@ 0x24
 800522e:	4618      	mov	r0, r3
 8005230:	f7ff feec 	bl	800500c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005234:	f002 fb8a 	bl	800794c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005238:	2301      	movs	r3, #1
}
 800523a:	4618      	mov	r0, r3
 800523c:	3710      	adds	r7, #16
 800523e:	46bd      	mov	sp, r7
 8005240:	bd80      	pop	{r7, pc}
 8005242:	bf00      	nop
 8005244:	e000ed04 	.word	0xe000ed04

08005248 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005248:	b580      	push	{r7, lr}
 800524a:	b08e      	sub	sp, #56	@ 0x38
 800524c:	af02      	add	r7, sp, #8
 800524e:	60f8      	str	r0, [r7, #12]
 8005250:	60b9      	str	r1, [r7, #8]
 8005252:	607a      	str	r2, [r7, #4]
 8005254:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d10b      	bne.n	8005274 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800525c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005260:	f383 8811 	msr	BASEPRI, r3
 8005264:	f3bf 8f6f 	isb	sy
 8005268:	f3bf 8f4f 	dsb	sy
 800526c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800526e:	bf00      	nop
 8005270:	bf00      	nop
 8005272:	e7fd      	b.n	8005270 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d10b      	bne.n	8005292 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800527a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800527e:	f383 8811 	msr	BASEPRI, r3
 8005282:	f3bf 8f6f 	isb	sy
 8005286:	f3bf 8f4f 	dsb	sy
 800528a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800528c:	bf00      	nop
 800528e:	bf00      	nop
 8005290:	e7fd      	b.n	800528e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d002      	beq.n	800529e <xQueueGenericCreateStatic+0x56>
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d001      	beq.n	80052a2 <xQueueGenericCreateStatic+0x5a>
 800529e:	2301      	movs	r3, #1
 80052a0:	e000      	b.n	80052a4 <xQueueGenericCreateStatic+0x5c>
 80052a2:	2300      	movs	r3, #0
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d10b      	bne.n	80052c0 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80052a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052ac:	f383 8811 	msr	BASEPRI, r3
 80052b0:	f3bf 8f6f 	isb	sy
 80052b4:	f3bf 8f4f 	dsb	sy
 80052b8:	623b      	str	r3, [r7, #32]
}
 80052ba:	bf00      	nop
 80052bc:	bf00      	nop
 80052be:	e7fd      	b.n	80052bc <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d102      	bne.n	80052cc <xQueueGenericCreateStatic+0x84>
 80052c6:	68bb      	ldr	r3, [r7, #8]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d101      	bne.n	80052d0 <xQueueGenericCreateStatic+0x88>
 80052cc:	2301      	movs	r3, #1
 80052ce:	e000      	b.n	80052d2 <xQueueGenericCreateStatic+0x8a>
 80052d0:	2300      	movs	r3, #0
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d10b      	bne.n	80052ee <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80052d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052da:	f383 8811 	msr	BASEPRI, r3
 80052de:	f3bf 8f6f 	isb	sy
 80052e2:	f3bf 8f4f 	dsb	sy
 80052e6:	61fb      	str	r3, [r7, #28]
}
 80052e8:	bf00      	nop
 80052ea:	bf00      	nop
 80052ec:	e7fd      	b.n	80052ea <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80052ee:	2350      	movs	r3, #80	@ 0x50
 80052f0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80052f2:	697b      	ldr	r3, [r7, #20]
 80052f4:	2b50      	cmp	r3, #80	@ 0x50
 80052f6:	d00b      	beq.n	8005310 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80052f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052fc:	f383 8811 	msr	BASEPRI, r3
 8005300:	f3bf 8f6f 	isb	sy
 8005304:	f3bf 8f4f 	dsb	sy
 8005308:	61bb      	str	r3, [r7, #24]
}
 800530a:	bf00      	nop
 800530c:	bf00      	nop
 800530e:	e7fd      	b.n	800530c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005310:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8005316:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005318:	2b00      	cmp	r3, #0
 800531a:	d00d      	beq.n	8005338 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800531c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800531e:	2201      	movs	r2, #1
 8005320:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005324:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8005328:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800532a:	9300      	str	r3, [sp, #0]
 800532c:	4613      	mov	r3, r2
 800532e:	687a      	ldr	r2, [r7, #4]
 8005330:	68b9      	ldr	r1, [r7, #8]
 8005332:	68f8      	ldr	r0, [r7, #12]
 8005334:	f000 f840 	bl	80053b8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005338:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800533a:	4618      	mov	r0, r3
 800533c:	3730      	adds	r7, #48	@ 0x30
 800533e:	46bd      	mov	sp, r7
 8005340:	bd80      	pop	{r7, pc}

08005342 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005342:	b580      	push	{r7, lr}
 8005344:	b08a      	sub	sp, #40	@ 0x28
 8005346:	af02      	add	r7, sp, #8
 8005348:	60f8      	str	r0, [r7, #12]
 800534a:	60b9      	str	r1, [r7, #8]
 800534c:	4613      	mov	r3, r2
 800534e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d10b      	bne.n	800536e <xQueueGenericCreate+0x2c>
	__asm volatile
 8005356:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800535a:	f383 8811 	msr	BASEPRI, r3
 800535e:	f3bf 8f6f 	isb	sy
 8005362:	f3bf 8f4f 	dsb	sy
 8005366:	613b      	str	r3, [r7, #16]
}
 8005368:	bf00      	nop
 800536a:	bf00      	nop
 800536c:	e7fd      	b.n	800536a <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	68ba      	ldr	r2, [r7, #8]
 8005372:	fb02 f303 	mul.w	r3, r2, r3
 8005376:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005378:	69fb      	ldr	r3, [r7, #28]
 800537a:	3350      	adds	r3, #80	@ 0x50
 800537c:	4618      	mov	r0, r3
 800537e:	f002 fbd5 	bl	8007b2c <pvPortMalloc>
 8005382:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005384:	69bb      	ldr	r3, [r7, #24]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d011      	beq.n	80053ae <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800538a:	69bb      	ldr	r3, [r7, #24]
 800538c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800538e:	697b      	ldr	r3, [r7, #20]
 8005390:	3350      	adds	r3, #80	@ 0x50
 8005392:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005394:	69bb      	ldr	r3, [r7, #24]
 8005396:	2200      	movs	r2, #0
 8005398:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800539c:	79fa      	ldrb	r2, [r7, #7]
 800539e:	69bb      	ldr	r3, [r7, #24]
 80053a0:	9300      	str	r3, [sp, #0]
 80053a2:	4613      	mov	r3, r2
 80053a4:	697a      	ldr	r2, [r7, #20]
 80053a6:	68b9      	ldr	r1, [r7, #8]
 80053a8:	68f8      	ldr	r0, [r7, #12]
 80053aa:	f000 f805 	bl	80053b8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80053ae:	69bb      	ldr	r3, [r7, #24]
	}
 80053b0:	4618      	mov	r0, r3
 80053b2:	3720      	adds	r7, #32
 80053b4:	46bd      	mov	sp, r7
 80053b6:	bd80      	pop	{r7, pc}

080053b8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b084      	sub	sp, #16
 80053bc:	af00      	add	r7, sp, #0
 80053be:	60f8      	str	r0, [r7, #12]
 80053c0:	60b9      	str	r1, [r7, #8]
 80053c2:	607a      	str	r2, [r7, #4]
 80053c4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d103      	bne.n	80053d4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80053cc:	69bb      	ldr	r3, [r7, #24]
 80053ce:	69ba      	ldr	r2, [r7, #24]
 80053d0:	601a      	str	r2, [r3, #0]
 80053d2:	e002      	b.n	80053da <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80053d4:	69bb      	ldr	r3, [r7, #24]
 80053d6:	687a      	ldr	r2, [r7, #4]
 80053d8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80053da:	69bb      	ldr	r3, [r7, #24]
 80053dc:	68fa      	ldr	r2, [r7, #12]
 80053de:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80053e0:	69bb      	ldr	r3, [r7, #24]
 80053e2:	68ba      	ldr	r2, [r7, #8]
 80053e4:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80053e6:	2101      	movs	r1, #1
 80053e8:	69b8      	ldr	r0, [r7, #24]
 80053ea:	f7ff fec3 	bl	8005174 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80053ee:	69bb      	ldr	r3, [r7, #24]
 80053f0:	78fa      	ldrb	r2, [r7, #3]
 80053f2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80053f6:	bf00      	nop
 80053f8:	3710      	adds	r7, #16
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bd80      	pop	{r7, pc}

080053fe <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80053fe:	b580      	push	{r7, lr}
 8005400:	b082      	sub	sp, #8
 8005402:	af00      	add	r7, sp, #0
 8005404:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d00e      	beq.n	800542a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2200      	movs	r2, #0
 8005410:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2200      	movs	r2, #0
 8005416:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2200      	movs	r2, #0
 800541c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800541e:	2300      	movs	r3, #0
 8005420:	2200      	movs	r2, #0
 8005422:	2100      	movs	r1, #0
 8005424:	6878      	ldr	r0, [r7, #4]
 8005426:	f000 f8a3 	bl	8005570 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800542a:	bf00      	nop
 800542c:	3708      	adds	r7, #8
 800542e:	46bd      	mov	sp, r7
 8005430:	bd80      	pop	{r7, pc}

08005432 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8005432:	b580      	push	{r7, lr}
 8005434:	b086      	sub	sp, #24
 8005436:	af00      	add	r7, sp, #0
 8005438:	4603      	mov	r3, r0
 800543a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800543c:	2301      	movs	r3, #1
 800543e:	617b      	str	r3, [r7, #20]
 8005440:	2300      	movs	r3, #0
 8005442:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005444:	79fb      	ldrb	r3, [r7, #7]
 8005446:	461a      	mov	r2, r3
 8005448:	6939      	ldr	r1, [r7, #16]
 800544a:	6978      	ldr	r0, [r7, #20]
 800544c:	f7ff ff79 	bl	8005342 <xQueueGenericCreate>
 8005450:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005452:	68f8      	ldr	r0, [r7, #12]
 8005454:	f7ff ffd3 	bl	80053fe <prvInitialiseMutex>

		return xNewQueue;
 8005458:	68fb      	ldr	r3, [r7, #12]
	}
 800545a:	4618      	mov	r0, r3
 800545c:	3718      	adds	r7, #24
 800545e:	46bd      	mov	sp, r7
 8005460:	bd80      	pop	{r7, pc}

08005462 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8005462:	b580      	push	{r7, lr}
 8005464:	b088      	sub	sp, #32
 8005466:	af02      	add	r7, sp, #8
 8005468:	4603      	mov	r3, r0
 800546a:	6039      	str	r1, [r7, #0]
 800546c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800546e:	2301      	movs	r3, #1
 8005470:	617b      	str	r3, [r7, #20]
 8005472:	2300      	movs	r3, #0
 8005474:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8005476:	79fb      	ldrb	r3, [r7, #7]
 8005478:	9300      	str	r3, [sp, #0]
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	2200      	movs	r2, #0
 800547e:	6939      	ldr	r1, [r7, #16]
 8005480:	6978      	ldr	r0, [r7, #20]
 8005482:	f7ff fee1 	bl	8005248 <xQueueGenericCreateStatic>
 8005486:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005488:	68f8      	ldr	r0, [r7, #12]
 800548a:	f7ff ffb8 	bl	80053fe <prvInitialiseMutex>

		return xNewQueue;
 800548e:	68fb      	ldr	r3, [r7, #12]
	}
 8005490:	4618      	mov	r0, r3
 8005492:	3718      	adds	r7, #24
 8005494:	46bd      	mov	sp, r7
 8005496:	bd80      	pop	{r7, pc}

08005498 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8005498:	b590      	push	{r4, r7, lr}
 800549a:	b087      	sub	sp, #28
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80054a4:	693b      	ldr	r3, [r7, #16]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d10b      	bne.n	80054c2 <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 80054aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054ae:	f383 8811 	msr	BASEPRI, r3
 80054b2:	f3bf 8f6f 	isb	sy
 80054b6:	f3bf 8f4f 	dsb	sy
 80054ba:	60fb      	str	r3, [r7, #12]
}
 80054bc:	bf00      	nop
 80054be:	bf00      	nop
 80054c0:	e7fd      	b.n	80054be <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80054c2:	693b      	ldr	r3, [r7, #16]
 80054c4:	689c      	ldr	r4, [r3, #8]
 80054c6:	f001 fb95 	bl	8006bf4 <xTaskGetCurrentTaskHandle>
 80054ca:	4603      	mov	r3, r0
 80054cc:	429c      	cmp	r4, r3
 80054ce:	d111      	bne.n	80054f4 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 80054d0:	693b      	ldr	r3, [r7, #16]
 80054d2:	68db      	ldr	r3, [r3, #12]
 80054d4:	1e5a      	subs	r2, r3, #1
 80054d6:	693b      	ldr	r3, [r7, #16]
 80054d8:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 80054da:	693b      	ldr	r3, [r7, #16]
 80054dc:	68db      	ldr	r3, [r3, #12]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d105      	bne.n	80054ee <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 80054e2:	2300      	movs	r3, #0
 80054e4:	2200      	movs	r2, #0
 80054e6:	2100      	movs	r1, #0
 80054e8:	6938      	ldr	r0, [r7, #16]
 80054ea:	f000 f841 	bl	8005570 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 80054ee:	2301      	movs	r3, #1
 80054f0:	617b      	str	r3, [r7, #20]
 80054f2:	e001      	b.n	80054f8 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 80054f4:	2300      	movs	r3, #0
 80054f6:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 80054f8:	697b      	ldr	r3, [r7, #20]
	}
 80054fa:	4618      	mov	r0, r3
 80054fc:	371c      	adds	r7, #28
 80054fe:	46bd      	mov	sp, r7
 8005500:	bd90      	pop	{r4, r7, pc}

08005502 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8005502:	b590      	push	{r4, r7, lr}
 8005504:	b087      	sub	sp, #28
 8005506:	af00      	add	r7, sp, #0
 8005508:	6078      	str	r0, [r7, #4]
 800550a:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8005510:	693b      	ldr	r3, [r7, #16]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d10b      	bne.n	800552e <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 8005516:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800551a:	f383 8811 	msr	BASEPRI, r3
 800551e:	f3bf 8f6f 	isb	sy
 8005522:	f3bf 8f4f 	dsb	sy
 8005526:	60fb      	str	r3, [r7, #12]
}
 8005528:	bf00      	nop
 800552a:	bf00      	nop
 800552c:	e7fd      	b.n	800552a <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800552e:	693b      	ldr	r3, [r7, #16]
 8005530:	689c      	ldr	r4, [r3, #8]
 8005532:	f001 fb5f 	bl	8006bf4 <xTaskGetCurrentTaskHandle>
 8005536:	4603      	mov	r3, r0
 8005538:	429c      	cmp	r4, r3
 800553a:	d107      	bne.n	800554c <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800553c:	693b      	ldr	r3, [r7, #16]
 800553e:	68db      	ldr	r3, [r3, #12]
 8005540:	1c5a      	adds	r2, r3, #1
 8005542:	693b      	ldr	r3, [r7, #16]
 8005544:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8005546:	2301      	movs	r3, #1
 8005548:	617b      	str	r3, [r7, #20]
 800554a:	e00c      	b.n	8005566 <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800554c:	6839      	ldr	r1, [r7, #0]
 800554e:	6938      	ldr	r0, [r7, #16]
 8005550:	f000 fa90 	bl	8005a74 <xQueueSemaphoreTake>
 8005554:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d004      	beq.n	8005566 <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800555c:	693b      	ldr	r3, [r7, #16]
 800555e:	68db      	ldr	r3, [r3, #12]
 8005560:	1c5a      	adds	r2, r3, #1
 8005562:	693b      	ldr	r3, [r7, #16]
 8005564:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8005566:	697b      	ldr	r3, [r7, #20]
	}
 8005568:	4618      	mov	r0, r3
 800556a:	371c      	adds	r7, #28
 800556c:	46bd      	mov	sp, r7
 800556e:	bd90      	pop	{r4, r7, pc}

08005570 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b08e      	sub	sp, #56	@ 0x38
 8005574:	af00      	add	r7, sp, #0
 8005576:	60f8      	str	r0, [r7, #12]
 8005578:	60b9      	str	r1, [r7, #8]
 800557a:	607a      	str	r2, [r7, #4]
 800557c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800557e:	2300      	movs	r3, #0
 8005580:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005586:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005588:	2b00      	cmp	r3, #0
 800558a:	d10b      	bne.n	80055a4 <xQueueGenericSend+0x34>
	__asm volatile
 800558c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005590:	f383 8811 	msr	BASEPRI, r3
 8005594:	f3bf 8f6f 	isb	sy
 8005598:	f3bf 8f4f 	dsb	sy
 800559c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800559e:	bf00      	nop
 80055a0:	bf00      	nop
 80055a2:	e7fd      	b.n	80055a0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d103      	bne.n	80055b2 <xQueueGenericSend+0x42>
 80055aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d101      	bne.n	80055b6 <xQueueGenericSend+0x46>
 80055b2:	2301      	movs	r3, #1
 80055b4:	e000      	b.n	80055b8 <xQueueGenericSend+0x48>
 80055b6:	2300      	movs	r3, #0
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d10b      	bne.n	80055d4 <xQueueGenericSend+0x64>
	__asm volatile
 80055bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055c0:	f383 8811 	msr	BASEPRI, r3
 80055c4:	f3bf 8f6f 	isb	sy
 80055c8:	f3bf 8f4f 	dsb	sy
 80055cc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80055ce:	bf00      	nop
 80055d0:	bf00      	nop
 80055d2:	e7fd      	b.n	80055d0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	2b02      	cmp	r3, #2
 80055d8:	d103      	bne.n	80055e2 <xQueueGenericSend+0x72>
 80055da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055de:	2b01      	cmp	r3, #1
 80055e0:	d101      	bne.n	80055e6 <xQueueGenericSend+0x76>
 80055e2:	2301      	movs	r3, #1
 80055e4:	e000      	b.n	80055e8 <xQueueGenericSend+0x78>
 80055e6:	2300      	movs	r3, #0
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d10b      	bne.n	8005604 <xQueueGenericSend+0x94>
	__asm volatile
 80055ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055f0:	f383 8811 	msr	BASEPRI, r3
 80055f4:	f3bf 8f6f 	isb	sy
 80055f8:	f3bf 8f4f 	dsb	sy
 80055fc:	623b      	str	r3, [r7, #32]
}
 80055fe:	bf00      	nop
 8005600:	bf00      	nop
 8005602:	e7fd      	b.n	8005600 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005604:	f001 fb06 	bl	8006c14 <xTaskGetSchedulerState>
 8005608:	4603      	mov	r3, r0
 800560a:	2b00      	cmp	r3, #0
 800560c:	d102      	bne.n	8005614 <xQueueGenericSend+0xa4>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d101      	bne.n	8005618 <xQueueGenericSend+0xa8>
 8005614:	2301      	movs	r3, #1
 8005616:	e000      	b.n	800561a <xQueueGenericSend+0xaa>
 8005618:	2300      	movs	r3, #0
 800561a:	2b00      	cmp	r3, #0
 800561c:	d10b      	bne.n	8005636 <xQueueGenericSend+0xc6>
	__asm volatile
 800561e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005622:	f383 8811 	msr	BASEPRI, r3
 8005626:	f3bf 8f6f 	isb	sy
 800562a:	f3bf 8f4f 	dsb	sy
 800562e:	61fb      	str	r3, [r7, #28]
}
 8005630:	bf00      	nop
 8005632:	bf00      	nop
 8005634:	e7fd      	b.n	8005632 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005636:	f002 f957 	bl	80078e8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800563a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800563c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800563e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005640:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005642:	429a      	cmp	r2, r3
 8005644:	d302      	bcc.n	800564c <xQueueGenericSend+0xdc>
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	2b02      	cmp	r3, #2
 800564a:	d129      	bne.n	80056a0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800564c:	683a      	ldr	r2, [r7, #0]
 800564e:	68b9      	ldr	r1, [r7, #8]
 8005650:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005652:	f000 fb37 	bl	8005cc4 <prvCopyDataToQueue>
 8005656:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005658:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800565a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800565c:	2b00      	cmp	r3, #0
 800565e:	d010      	beq.n	8005682 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005660:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005662:	3324      	adds	r3, #36	@ 0x24
 8005664:	4618      	mov	r0, r3
 8005666:	f001 f905 	bl	8006874 <xTaskRemoveFromEventList>
 800566a:	4603      	mov	r3, r0
 800566c:	2b00      	cmp	r3, #0
 800566e:	d013      	beq.n	8005698 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005670:	4b3f      	ldr	r3, [pc, #252]	@ (8005770 <xQueueGenericSend+0x200>)
 8005672:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005676:	601a      	str	r2, [r3, #0]
 8005678:	f3bf 8f4f 	dsb	sy
 800567c:	f3bf 8f6f 	isb	sy
 8005680:	e00a      	b.n	8005698 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005682:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005684:	2b00      	cmp	r3, #0
 8005686:	d007      	beq.n	8005698 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005688:	4b39      	ldr	r3, [pc, #228]	@ (8005770 <xQueueGenericSend+0x200>)
 800568a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800568e:	601a      	str	r2, [r3, #0]
 8005690:	f3bf 8f4f 	dsb	sy
 8005694:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005698:	f002 f958 	bl	800794c <vPortExitCritical>
				return pdPASS;
 800569c:	2301      	movs	r3, #1
 800569e:	e063      	b.n	8005768 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d103      	bne.n	80056ae <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80056a6:	f002 f951 	bl	800794c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80056aa:	2300      	movs	r3, #0
 80056ac:	e05c      	b.n	8005768 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80056ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d106      	bne.n	80056c2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80056b4:	f107 0314 	add.w	r3, r7, #20
 80056b8:	4618      	mov	r0, r3
 80056ba:	f001 f93f 	bl	800693c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80056be:	2301      	movs	r3, #1
 80056c0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80056c2:	f002 f943 	bl	800794c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80056c6:	f000 feaf 	bl	8006428 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80056ca:	f002 f90d 	bl	80078e8 <vPortEnterCritical>
 80056ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056d0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80056d4:	b25b      	sxtb	r3, r3
 80056d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056da:	d103      	bne.n	80056e4 <xQueueGenericSend+0x174>
 80056dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056de:	2200      	movs	r2, #0
 80056e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80056e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056e6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80056ea:	b25b      	sxtb	r3, r3
 80056ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056f0:	d103      	bne.n	80056fa <xQueueGenericSend+0x18a>
 80056f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056f4:	2200      	movs	r2, #0
 80056f6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80056fa:	f002 f927 	bl	800794c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80056fe:	1d3a      	adds	r2, r7, #4
 8005700:	f107 0314 	add.w	r3, r7, #20
 8005704:	4611      	mov	r1, r2
 8005706:	4618      	mov	r0, r3
 8005708:	f001 f92e 	bl	8006968 <xTaskCheckForTimeOut>
 800570c:	4603      	mov	r3, r0
 800570e:	2b00      	cmp	r3, #0
 8005710:	d124      	bne.n	800575c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005712:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005714:	f000 fbce 	bl	8005eb4 <prvIsQueueFull>
 8005718:	4603      	mov	r3, r0
 800571a:	2b00      	cmp	r3, #0
 800571c:	d018      	beq.n	8005750 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800571e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005720:	3310      	adds	r3, #16
 8005722:	687a      	ldr	r2, [r7, #4]
 8005724:	4611      	mov	r1, r2
 8005726:	4618      	mov	r0, r3
 8005728:	f001 f852 	bl	80067d0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800572c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800572e:	f000 fb59 	bl	8005de4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005732:	f000 fe87 	bl	8006444 <xTaskResumeAll>
 8005736:	4603      	mov	r3, r0
 8005738:	2b00      	cmp	r3, #0
 800573a:	f47f af7c 	bne.w	8005636 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800573e:	4b0c      	ldr	r3, [pc, #48]	@ (8005770 <xQueueGenericSend+0x200>)
 8005740:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005744:	601a      	str	r2, [r3, #0]
 8005746:	f3bf 8f4f 	dsb	sy
 800574a:	f3bf 8f6f 	isb	sy
 800574e:	e772      	b.n	8005636 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005750:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005752:	f000 fb47 	bl	8005de4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005756:	f000 fe75 	bl	8006444 <xTaskResumeAll>
 800575a:	e76c      	b.n	8005636 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800575c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800575e:	f000 fb41 	bl	8005de4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005762:	f000 fe6f 	bl	8006444 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005766:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005768:	4618      	mov	r0, r3
 800576a:	3738      	adds	r7, #56	@ 0x38
 800576c:	46bd      	mov	sp, r7
 800576e:	bd80      	pop	{r7, pc}
 8005770:	e000ed04 	.word	0xe000ed04

08005774 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b090      	sub	sp, #64	@ 0x40
 8005778:	af00      	add	r7, sp, #0
 800577a:	60f8      	str	r0, [r7, #12]
 800577c:	60b9      	str	r1, [r7, #8]
 800577e:	607a      	str	r2, [r7, #4]
 8005780:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8005786:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005788:	2b00      	cmp	r3, #0
 800578a:	d10b      	bne.n	80057a4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800578c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005790:	f383 8811 	msr	BASEPRI, r3
 8005794:	f3bf 8f6f 	isb	sy
 8005798:	f3bf 8f4f 	dsb	sy
 800579c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800579e:	bf00      	nop
 80057a0:	bf00      	nop
 80057a2:	e7fd      	b.n	80057a0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d103      	bne.n	80057b2 <xQueueGenericSendFromISR+0x3e>
 80057aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d101      	bne.n	80057b6 <xQueueGenericSendFromISR+0x42>
 80057b2:	2301      	movs	r3, #1
 80057b4:	e000      	b.n	80057b8 <xQueueGenericSendFromISR+0x44>
 80057b6:	2300      	movs	r3, #0
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d10b      	bne.n	80057d4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80057bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057c0:	f383 8811 	msr	BASEPRI, r3
 80057c4:	f3bf 8f6f 	isb	sy
 80057c8:	f3bf 8f4f 	dsb	sy
 80057cc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80057ce:	bf00      	nop
 80057d0:	bf00      	nop
 80057d2:	e7fd      	b.n	80057d0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	2b02      	cmp	r3, #2
 80057d8:	d103      	bne.n	80057e2 <xQueueGenericSendFromISR+0x6e>
 80057da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057de:	2b01      	cmp	r3, #1
 80057e0:	d101      	bne.n	80057e6 <xQueueGenericSendFromISR+0x72>
 80057e2:	2301      	movs	r3, #1
 80057e4:	e000      	b.n	80057e8 <xQueueGenericSendFromISR+0x74>
 80057e6:	2300      	movs	r3, #0
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d10b      	bne.n	8005804 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80057ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057f0:	f383 8811 	msr	BASEPRI, r3
 80057f4:	f3bf 8f6f 	isb	sy
 80057f8:	f3bf 8f4f 	dsb	sy
 80057fc:	623b      	str	r3, [r7, #32]
}
 80057fe:	bf00      	nop
 8005800:	bf00      	nop
 8005802:	e7fd      	b.n	8005800 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005804:	f002 f950 	bl	8007aa8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005808:	f3ef 8211 	mrs	r2, BASEPRI
 800580c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005810:	f383 8811 	msr	BASEPRI, r3
 8005814:	f3bf 8f6f 	isb	sy
 8005818:	f3bf 8f4f 	dsb	sy
 800581c:	61fa      	str	r2, [r7, #28]
 800581e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005820:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005822:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005824:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005826:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005828:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800582a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800582c:	429a      	cmp	r2, r3
 800582e:	d302      	bcc.n	8005836 <xQueueGenericSendFromISR+0xc2>
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	2b02      	cmp	r3, #2
 8005834:	d12f      	bne.n	8005896 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005836:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005838:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800583c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005840:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005842:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005844:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005846:	683a      	ldr	r2, [r7, #0]
 8005848:	68b9      	ldr	r1, [r7, #8]
 800584a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800584c:	f000 fa3a 	bl	8005cc4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005850:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8005854:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005858:	d112      	bne.n	8005880 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800585a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800585c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800585e:	2b00      	cmp	r3, #0
 8005860:	d016      	beq.n	8005890 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005862:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005864:	3324      	adds	r3, #36	@ 0x24
 8005866:	4618      	mov	r0, r3
 8005868:	f001 f804 	bl	8006874 <xTaskRemoveFromEventList>
 800586c:	4603      	mov	r3, r0
 800586e:	2b00      	cmp	r3, #0
 8005870:	d00e      	beq.n	8005890 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d00b      	beq.n	8005890 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2201      	movs	r2, #1
 800587c:	601a      	str	r2, [r3, #0]
 800587e:	e007      	b.n	8005890 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005880:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005884:	3301      	adds	r3, #1
 8005886:	b2db      	uxtb	r3, r3
 8005888:	b25a      	sxtb	r2, r3
 800588a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800588c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005890:	2301      	movs	r3, #1
 8005892:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8005894:	e001      	b.n	800589a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005896:	2300      	movs	r3, #0
 8005898:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800589a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800589c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800589e:	697b      	ldr	r3, [r7, #20]
 80058a0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80058a4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80058a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80058a8:	4618      	mov	r0, r3
 80058aa:	3740      	adds	r7, #64	@ 0x40
 80058ac:	46bd      	mov	sp, r7
 80058ae:	bd80      	pop	{r7, pc}

080058b0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b08c      	sub	sp, #48	@ 0x30
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	60f8      	str	r0, [r7, #12]
 80058b8:	60b9      	str	r1, [r7, #8]
 80058ba:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80058bc:	2300      	movs	r3, #0
 80058be:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80058c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d10b      	bne.n	80058e2 <xQueueReceive+0x32>
	__asm volatile
 80058ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058ce:	f383 8811 	msr	BASEPRI, r3
 80058d2:	f3bf 8f6f 	isb	sy
 80058d6:	f3bf 8f4f 	dsb	sy
 80058da:	623b      	str	r3, [r7, #32]
}
 80058dc:	bf00      	nop
 80058de:	bf00      	nop
 80058e0:	e7fd      	b.n	80058de <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80058e2:	68bb      	ldr	r3, [r7, #8]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d103      	bne.n	80058f0 <xQueueReceive+0x40>
 80058e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d101      	bne.n	80058f4 <xQueueReceive+0x44>
 80058f0:	2301      	movs	r3, #1
 80058f2:	e000      	b.n	80058f6 <xQueueReceive+0x46>
 80058f4:	2300      	movs	r3, #0
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d10b      	bne.n	8005912 <xQueueReceive+0x62>
	__asm volatile
 80058fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058fe:	f383 8811 	msr	BASEPRI, r3
 8005902:	f3bf 8f6f 	isb	sy
 8005906:	f3bf 8f4f 	dsb	sy
 800590a:	61fb      	str	r3, [r7, #28]
}
 800590c:	bf00      	nop
 800590e:	bf00      	nop
 8005910:	e7fd      	b.n	800590e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005912:	f001 f97f 	bl	8006c14 <xTaskGetSchedulerState>
 8005916:	4603      	mov	r3, r0
 8005918:	2b00      	cmp	r3, #0
 800591a:	d102      	bne.n	8005922 <xQueueReceive+0x72>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d101      	bne.n	8005926 <xQueueReceive+0x76>
 8005922:	2301      	movs	r3, #1
 8005924:	e000      	b.n	8005928 <xQueueReceive+0x78>
 8005926:	2300      	movs	r3, #0
 8005928:	2b00      	cmp	r3, #0
 800592a:	d10b      	bne.n	8005944 <xQueueReceive+0x94>
	__asm volatile
 800592c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005930:	f383 8811 	msr	BASEPRI, r3
 8005934:	f3bf 8f6f 	isb	sy
 8005938:	f3bf 8f4f 	dsb	sy
 800593c:	61bb      	str	r3, [r7, #24]
}
 800593e:	bf00      	nop
 8005940:	bf00      	nop
 8005942:	e7fd      	b.n	8005940 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005944:	f001 ffd0 	bl	80078e8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005948:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800594a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800594c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800594e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005950:	2b00      	cmp	r3, #0
 8005952:	d01f      	beq.n	8005994 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005954:	68b9      	ldr	r1, [r7, #8]
 8005956:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005958:	f000 fa1e 	bl	8005d98 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800595c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800595e:	1e5a      	subs	r2, r3, #1
 8005960:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005962:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005964:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005966:	691b      	ldr	r3, [r3, #16]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d00f      	beq.n	800598c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800596c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800596e:	3310      	adds	r3, #16
 8005970:	4618      	mov	r0, r3
 8005972:	f000 ff7f 	bl	8006874 <xTaskRemoveFromEventList>
 8005976:	4603      	mov	r3, r0
 8005978:	2b00      	cmp	r3, #0
 800597a:	d007      	beq.n	800598c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800597c:	4b3c      	ldr	r3, [pc, #240]	@ (8005a70 <xQueueReceive+0x1c0>)
 800597e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005982:	601a      	str	r2, [r3, #0]
 8005984:	f3bf 8f4f 	dsb	sy
 8005988:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800598c:	f001 ffde 	bl	800794c <vPortExitCritical>
				return pdPASS;
 8005990:	2301      	movs	r3, #1
 8005992:	e069      	b.n	8005a68 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d103      	bne.n	80059a2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800599a:	f001 ffd7 	bl	800794c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800599e:	2300      	movs	r3, #0
 80059a0:	e062      	b.n	8005a68 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80059a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d106      	bne.n	80059b6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80059a8:	f107 0310 	add.w	r3, r7, #16
 80059ac:	4618      	mov	r0, r3
 80059ae:	f000 ffc5 	bl	800693c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80059b2:	2301      	movs	r3, #1
 80059b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80059b6:	f001 ffc9 	bl	800794c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80059ba:	f000 fd35 	bl	8006428 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80059be:	f001 ff93 	bl	80078e8 <vPortEnterCritical>
 80059c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059c4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80059c8:	b25b      	sxtb	r3, r3
 80059ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059ce:	d103      	bne.n	80059d8 <xQueueReceive+0x128>
 80059d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059d2:	2200      	movs	r2, #0
 80059d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80059d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059da:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80059de:	b25b      	sxtb	r3, r3
 80059e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059e4:	d103      	bne.n	80059ee <xQueueReceive+0x13e>
 80059e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059e8:	2200      	movs	r2, #0
 80059ea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80059ee:	f001 ffad 	bl	800794c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80059f2:	1d3a      	adds	r2, r7, #4
 80059f4:	f107 0310 	add.w	r3, r7, #16
 80059f8:	4611      	mov	r1, r2
 80059fa:	4618      	mov	r0, r3
 80059fc:	f000 ffb4 	bl	8006968 <xTaskCheckForTimeOut>
 8005a00:	4603      	mov	r3, r0
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d123      	bne.n	8005a4e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005a06:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005a08:	f000 fa3e 	bl	8005e88 <prvIsQueueEmpty>
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d017      	beq.n	8005a42 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005a12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a14:	3324      	adds	r3, #36	@ 0x24
 8005a16:	687a      	ldr	r2, [r7, #4]
 8005a18:	4611      	mov	r1, r2
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	f000 fed8 	bl	80067d0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005a20:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005a22:	f000 f9df 	bl	8005de4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005a26:	f000 fd0d 	bl	8006444 <xTaskResumeAll>
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d189      	bne.n	8005944 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8005a30:	4b0f      	ldr	r3, [pc, #60]	@ (8005a70 <xQueueReceive+0x1c0>)
 8005a32:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a36:	601a      	str	r2, [r3, #0]
 8005a38:	f3bf 8f4f 	dsb	sy
 8005a3c:	f3bf 8f6f 	isb	sy
 8005a40:	e780      	b.n	8005944 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005a42:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005a44:	f000 f9ce 	bl	8005de4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005a48:	f000 fcfc 	bl	8006444 <xTaskResumeAll>
 8005a4c:	e77a      	b.n	8005944 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005a4e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005a50:	f000 f9c8 	bl	8005de4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005a54:	f000 fcf6 	bl	8006444 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005a58:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005a5a:	f000 fa15 	bl	8005e88 <prvIsQueueEmpty>
 8005a5e:	4603      	mov	r3, r0
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	f43f af6f 	beq.w	8005944 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005a66:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005a68:	4618      	mov	r0, r3
 8005a6a:	3730      	adds	r7, #48	@ 0x30
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	bd80      	pop	{r7, pc}
 8005a70:	e000ed04 	.word	0xe000ed04

08005a74 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b08e      	sub	sp, #56	@ 0x38
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
 8005a7c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005a7e:	2300      	movs	r3, #0
 8005a80:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005a86:	2300      	movs	r3, #0
 8005a88:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005a8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d10b      	bne.n	8005aa8 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8005a90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a94:	f383 8811 	msr	BASEPRI, r3
 8005a98:	f3bf 8f6f 	isb	sy
 8005a9c:	f3bf 8f4f 	dsb	sy
 8005aa0:	623b      	str	r3, [r7, #32]
}
 8005aa2:	bf00      	nop
 8005aa4:	bf00      	nop
 8005aa6:	e7fd      	b.n	8005aa4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005aa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005aaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d00b      	beq.n	8005ac8 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8005ab0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ab4:	f383 8811 	msr	BASEPRI, r3
 8005ab8:	f3bf 8f6f 	isb	sy
 8005abc:	f3bf 8f4f 	dsb	sy
 8005ac0:	61fb      	str	r3, [r7, #28]
}
 8005ac2:	bf00      	nop
 8005ac4:	bf00      	nop
 8005ac6:	e7fd      	b.n	8005ac4 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005ac8:	f001 f8a4 	bl	8006c14 <xTaskGetSchedulerState>
 8005acc:	4603      	mov	r3, r0
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d102      	bne.n	8005ad8 <xQueueSemaphoreTake+0x64>
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d101      	bne.n	8005adc <xQueueSemaphoreTake+0x68>
 8005ad8:	2301      	movs	r3, #1
 8005ada:	e000      	b.n	8005ade <xQueueSemaphoreTake+0x6a>
 8005adc:	2300      	movs	r3, #0
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d10b      	bne.n	8005afa <xQueueSemaphoreTake+0x86>
	__asm volatile
 8005ae2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ae6:	f383 8811 	msr	BASEPRI, r3
 8005aea:	f3bf 8f6f 	isb	sy
 8005aee:	f3bf 8f4f 	dsb	sy
 8005af2:	61bb      	str	r3, [r7, #24]
}
 8005af4:	bf00      	nop
 8005af6:	bf00      	nop
 8005af8:	e7fd      	b.n	8005af6 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005afa:	f001 fef5 	bl	80078e8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005afe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b02:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005b04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d024      	beq.n	8005b54 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005b0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b0c:	1e5a      	subs	r2, r3, #1
 8005b0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b10:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005b12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d104      	bne.n	8005b24 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8005b1a:	f001 f9f5 	bl	8006f08 <pvTaskIncrementMutexHeldCount>
 8005b1e:	4602      	mov	r2, r0
 8005b20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b22:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005b24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b26:	691b      	ldr	r3, [r3, #16]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d00f      	beq.n	8005b4c <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005b2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b2e:	3310      	adds	r3, #16
 8005b30:	4618      	mov	r0, r3
 8005b32:	f000 fe9f 	bl	8006874 <xTaskRemoveFromEventList>
 8005b36:	4603      	mov	r3, r0
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d007      	beq.n	8005b4c <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005b3c:	4b54      	ldr	r3, [pc, #336]	@ (8005c90 <xQueueSemaphoreTake+0x21c>)
 8005b3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005b42:	601a      	str	r2, [r3, #0]
 8005b44:	f3bf 8f4f 	dsb	sy
 8005b48:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005b4c:	f001 fefe 	bl	800794c <vPortExitCritical>
				return pdPASS;
 8005b50:	2301      	movs	r3, #1
 8005b52:	e098      	b.n	8005c86 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d112      	bne.n	8005b80 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005b5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d00b      	beq.n	8005b78 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8005b60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b64:	f383 8811 	msr	BASEPRI, r3
 8005b68:	f3bf 8f6f 	isb	sy
 8005b6c:	f3bf 8f4f 	dsb	sy
 8005b70:	617b      	str	r3, [r7, #20]
}
 8005b72:	bf00      	nop
 8005b74:	bf00      	nop
 8005b76:	e7fd      	b.n	8005b74 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005b78:	f001 fee8 	bl	800794c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	e082      	b.n	8005c86 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005b80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d106      	bne.n	8005b94 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005b86:	f107 030c 	add.w	r3, r7, #12
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	f000 fed6 	bl	800693c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005b90:	2301      	movs	r3, #1
 8005b92:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005b94:	f001 feda 	bl	800794c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005b98:	f000 fc46 	bl	8006428 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005b9c:	f001 fea4 	bl	80078e8 <vPortEnterCritical>
 8005ba0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ba2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005ba6:	b25b      	sxtb	r3, r3
 8005ba8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bac:	d103      	bne.n	8005bb6 <xQueueSemaphoreTake+0x142>
 8005bae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005bb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bb8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005bbc:	b25b      	sxtb	r3, r3
 8005bbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bc2:	d103      	bne.n	8005bcc <xQueueSemaphoreTake+0x158>
 8005bc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005bcc:	f001 febe 	bl	800794c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005bd0:	463a      	mov	r2, r7
 8005bd2:	f107 030c 	add.w	r3, r7, #12
 8005bd6:	4611      	mov	r1, r2
 8005bd8:	4618      	mov	r0, r3
 8005bda:	f000 fec5 	bl	8006968 <xTaskCheckForTimeOut>
 8005bde:	4603      	mov	r3, r0
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d132      	bne.n	8005c4a <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005be4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005be6:	f000 f94f 	bl	8005e88 <prvIsQueueEmpty>
 8005bea:	4603      	mov	r3, r0
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d026      	beq.n	8005c3e <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005bf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d109      	bne.n	8005c0c <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8005bf8:	f001 fe76 	bl	80078e8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005bfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bfe:	689b      	ldr	r3, [r3, #8]
 8005c00:	4618      	mov	r0, r3
 8005c02:	f001 f825 	bl	8006c50 <xTaskPriorityInherit>
 8005c06:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8005c08:	f001 fea0 	bl	800794c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005c0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c0e:	3324      	adds	r3, #36	@ 0x24
 8005c10:	683a      	ldr	r2, [r7, #0]
 8005c12:	4611      	mov	r1, r2
 8005c14:	4618      	mov	r0, r3
 8005c16:	f000 fddb 	bl	80067d0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005c1a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005c1c:	f000 f8e2 	bl	8005de4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005c20:	f000 fc10 	bl	8006444 <xTaskResumeAll>
 8005c24:	4603      	mov	r3, r0
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	f47f af67 	bne.w	8005afa <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8005c2c:	4b18      	ldr	r3, [pc, #96]	@ (8005c90 <xQueueSemaphoreTake+0x21c>)
 8005c2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005c32:	601a      	str	r2, [r3, #0]
 8005c34:	f3bf 8f4f 	dsb	sy
 8005c38:	f3bf 8f6f 	isb	sy
 8005c3c:	e75d      	b.n	8005afa <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005c3e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005c40:	f000 f8d0 	bl	8005de4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005c44:	f000 fbfe 	bl	8006444 <xTaskResumeAll>
 8005c48:	e757      	b.n	8005afa <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005c4a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005c4c:	f000 f8ca 	bl	8005de4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005c50:	f000 fbf8 	bl	8006444 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005c54:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005c56:	f000 f917 	bl	8005e88 <prvIsQueueEmpty>
 8005c5a:	4603      	mov	r3, r0
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	f43f af4c 	beq.w	8005afa <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005c62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d00d      	beq.n	8005c84 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8005c68:	f001 fe3e 	bl	80078e8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005c6c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005c6e:	f000 f811 	bl	8005c94 <prvGetDisinheritPriorityAfterTimeout>
 8005c72:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005c74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c76:	689b      	ldr	r3, [r3, #8]
 8005c78:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	f001 f8c0 	bl	8006e00 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005c80:	f001 fe64 	bl	800794c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005c84:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005c86:	4618      	mov	r0, r3
 8005c88:	3738      	adds	r7, #56	@ 0x38
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	bd80      	pop	{r7, pc}
 8005c8e:	bf00      	nop
 8005c90:	e000ed04 	.word	0xe000ed04

08005c94 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005c94:	b480      	push	{r7}
 8005c96:	b085      	sub	sp, #20
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d006      	beq.n	8005cb2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8005cae:	60fb      	str	r3, [r7, #12]
 8005cb0:	e001      	b.n	8005cb6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
	}
 8005cb8:	4618      	mov	r0, r3
 8005cba:	3714      	adds	r7, #20
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc2:	4770      	bx	lr

08005cc4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b086      	sub	sp, #24
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	60f8      	str	r0, [r7, #12]
 8005ccc:	60b9      	str	r1, [r7, #8]
 8005cce:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cd8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d10d      	bne.n	8005cfe <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d14d      	bne.n	8005d86 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	689b      	ldr	r3, [r3, #8]
 8005cee:	4618      	mov	r0, r3
 8005cf0:	f001 f816 	bl	8006d20 <xTaskPriorityDisinherit>
 8005cf4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	609a      	str	r2, [r3, #8]
 8005cfc:	e043      	b.n	8005d86 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d119      	bne.n	8005d38 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	6858      	ldr	r0, [r3, #4]
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d0c:	461a      	mov	r2, r3
 8005d0e:	68b9      	ldr	r1, [r7, #8]
 8005d10:	f002 f926 	bl	8007f60 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	685a      	ldr	r2, [r3, #4]
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d1c:	441a      	add	r2, r3
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	685a      	ldr	r2, [r3, #4]
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	689b      	ldr	r3, [r3, #8]
 8005d2a:	429a      	cmp	r2, r3
 8005d2c:	d32b      	bcc.n	8005d86 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681a      	ldr	r2, [r3, #0]
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	605a      	str	r2, [r3, #4]
 8005d36:	e026      	b.n	8005d86 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	68d8      	ldr	r0, [r3, #12]
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d40:	461a      	mov	r2, r3
 8005d42:	68b9      	ldr	r1, [r7, #8]
 8005d44:	f002 f90c 	bl	8007f60 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	68da      	ldr	r2, [r3, #12]
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d50:	425b      	negs	r3, r3
 8005d52:	441a      	add	r2, r3
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	68da      	ldr	r2, [r3, #12]
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	429a      	cmp	r2, r3
 8005d62:	d207      	bcs.n	8005d74 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	689a      	ldr	r2, [r3, #8]
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d6c:	425b      	negs	r3, r3
 8005d6e:	441a      	add	r2, r3
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2b02      	cmp	r3, #2
 8005d78:	d105      	bne.n	8005d86 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005d7a:	693b      	ldr	r3, [r7, #16]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d002      	beq.n	8005d86 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005d80:	693b      	ldr	r3, [r7, #16]
 8005d82:	3b01      	subs	r3, #1
 8005d84:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005d86:	693b      	ldr	r3, [r7, #16]
 8005d88:	1c5a      	adds	r2, r3, #1
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8005d8e:	697b      	ldr	r3, [r7, #20]
}
 8005d90:	4618      	mov	r0, r3
 8005d92:	3718      	adds	r7, #24
 8005d94:	46bd      	mov	sp, r7
 8005d96:	bd80      	pop	{r7, pc}

08005d98 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b082      	sub	sp, #8
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
 8005da0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d018      	beq.n	8005ddc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	68da      	ldr	r2, [r3, #12]
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005db2:	441a      	add	r2, r3
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	68da      	ldr	r2, [r3, #12]
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	689b      	ldr	r3, [r3, #8]
 8005dc0:	429a      	cmp	r2, r3
 8005dc2:	d303      	bcc.n	8005dcc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681a      	ldr	r2, [r3, #0]
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	68d9      	ldr	r1, [r3, #12]
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dd4:	461a      	mov	r2, r3
 8005dd6:	6838      	ldr	r0, [r7, #0]
 8005dd8:	f002 f8c2 	bl	8007f60 <memcpy>
	}
}
 8005ddc:	bf00      	nop
 8005dde:	3708      	adds	r7, #8
 8005de0:	46bd      	mov	sp, r7
 8005de2:	bd80      	pop	{r7, pc}

08005de4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b084      	sub	sp, #16
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005dec:	f001 fd7c 	bl	80078e8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005df6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005df8:	e011      	b.n	8005e1e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d012      	beq.n	8005e28 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	3324      	adds	r3, #36	@ 0x24
 8005e06:	4618      	mov	r0, r3
 8005e08:	f000 fd34 	bl	8006874 <xTaskRemoveFromEventList>
 8005e0c:	4603      	mov	r3, r0
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d001      	beq.n	8005e16 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005e12:	f000 fe0d 	bl	8006a30 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005e16:	7bfb      	ldrb	r3, [r7, #15]
 8005e18:	3b01      	subs	r3, #1
 8005e1a:	b2db      	uxtb	r3, r3
 8005e1c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005e1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	dce9      	bgt.n	8005dfa <prvUnlockQueue+0x16>
 8005e26:	e000      	b.n	8005e2a <prvUnlockQueue+0x46>
					break;
 8005e28:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	22ff      	movs	r2, #255	@ 0xff
 8005e2e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8005e32:	f001 fd8b 	bl	800794c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005e36:	f001 fd57 	bl	80078e8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005e40:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005e42:	e011      	b.n	8005e68 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	691b      	ldr	r3, [r3, #16]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d012      	beq.n	8005e72 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	3310      	adds	r3, #16
 8005e50:	4618      	mov	r0, r3
 8005e52:	f000 fd0f 	bl	8006874 <xTaskRemoveFromEventList>
 8005e56:	4603      	mov	r3, r0
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d001      	beq.n	8005e60 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005e5c:	f000 fde8 	bl	8006a30 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005e60:	7bbb      	ldrb	r3, [r7, #14]
 8005e62:	3b01      	subs	r3, #1
 8005e64:	b2db      	uxtb	r3, r3
 8005e66:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005e68:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	dce9      	bgt.n	8005e44 <prvUnlockQueue+0x60>
 8005e70:	e000      	b.n	8005e74 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005e72:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	22ff      	movs	r2, #255	@ 0xff
 8005e78:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005e7c:	f001 fd66 	bl	800794c <vPortExitCritical>
}
 8005e80:	bf00      	nop
 8005e82:	3710      	adds	r7, #16
 8005e84:	46bd      	mov	sp, r7
 8005e86:	bd80      	pop	{r7, pc}

08005e88 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b084      	sub	sp, #16
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005e90:	f001 fd2a 	bl	80078e8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d102      	bne.n	8005ea2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005e9c:	2301      	movs	r3, #1
 8005e9e:	60fb      	str	r3, [r7, #12]
 8005ea0:	e001      	b.n	8005ea6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005ea6:	f001 fd51 	bl	800794c <vPortExitCritical>

	return xReturn;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
}
 8005eac:	4618      	mov	r0, r3
 8005eae:	3710      	adds	r7, #16
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	bd80      	pop	{r7, pc}

08005eb4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b084      	sub	sp, #16
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005ebc:	f001 fd14 	bl	80078e8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ec8:	429a      	cmp	r2, r3
 8005eca:	d102      	bne.n	8005ed2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005ecc:	2301      	movs	r3, #1
 8005ece:	60fb      	str	r3, [r7, #12]
 8005ed0:	e001      	b.n	8005ed6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005ed6:	f001 fd39 	bl	800794c <vPortExitCritical>

	return xReturn;
 8005eda:	68fb      	ldr	r3, [r7, #12]
}
 8005edc:	4618      	mov	r0, r3
 8005ede:	3710      	adds	r7, #16
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	bd80      	pop	{r7, pc}

08005ee4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005ee4:	b480      	push	{r7}
 8005ee6:	b085      	sub	sp, #20
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
 8005eec:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005eee:	2300      	movs	r3, #0
 8005ef0:	60fb      	str	r3, [r7, #12]
 8005ef2:	e014      	b.n	8005f1e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005ef4:	4a0f      	ldr	r2, [pc, #60]	@ (8005f34 <vQueueAddToRegistry+0x50>)
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d10b      	bne.n	8005f18 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005f00:	490c      	ldr	r1, [pc, #48]	@ (8005f34 <vQueueAddToRegistry+0x50>)
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	683a      	ldr	r2, [r7, #0]
 8005f06:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005f0a:	4a0a      	ldr	r2, [pc, #40]	@ (8005f34 <vQueueAddToRegistry+0x50>)
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	00db      	lsls	r3, r3, #3
 8005f10:	4413      	add	r3, r2
 8005f12:	687a      	ldr	r2, [r7, #4]
 8005f14:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005f16:	e006      	b.n	8005f26 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	3301      	adds	r3, #1
 8005f1c:	60fb      	str	r3, [r7, #12]
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	2b07      	cmp	r3, #7
 8005f22:	d9e7      	bls.n	8005ef4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005f24:	bf00      	nop
 8005f26:	bf00      	nop
 8005f28:	3714      	adds	r7, #20
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f30:	4770      	bx	lr
 8005f32:	bf00      	nop
 8005f34:	20000888 	.word	0x20000888

08005f38 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b086      	sub	sp, #24
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	60f8      	str	r0, [r7, #12]
 8005f40:	60b9      	str	r1, [r7, #8]
 8005f42:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005f48:	f001 fcce 	bl	80078e8 <vPortEnterCritical>
 8005f4c:	697b      	ldr	r3, [r7, #20]
 8005f4e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005f52:	b25b      	sxtb	r3, r3
 8005f54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f58:	d103      	bne.n	8005f62 <vQueueWaitForMessageRestricted+0x2a>
 8005f5a:	697b      	ldr	r3, [r7, #20]
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005f62:	697b      	ldr	r3, [r7, #20]
 8005f64:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005f68:	b25b      	sxtb	r3, r3
 8005f6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f6e:	d103      	bne.n	8005f78 <vQueueWaitForMessageRestricted+0x40>
 8005f70:	697b      	ldr	r3, [r7, #20]
 8005f72:	2200      	movs	r2, #0
 8005f74:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005f78:	f001 fce8 	bl	800794c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005f7c:	697b      	ldr	r3, [r7, #20]
 8005f7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d106      	bne.n	8005f92 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005f84:	697b      	ldr	r3, [r7, #20]
 8005f86:	3324      	adds	r3, #36	@ 0x24
 8005f88:	687a      	ldr	r2, [r7, #4]
 8005f8a:	68b9      	ldr	r1, [r7, #8]
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	f000 fc45 	bl	800681c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005f92:	6978      	ldr	r0, [r7, #20]
 8005f94:	f7ff ff26 	bl	8005de4 <prvUnlockQueue>
	}
 8005f98:	bf00      	nop
 8005f9a:	3718      	adds	r7, #24
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	bd80      	pop	{r7, pc}

08005fa0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b08e      	sub	sp, #56	@ 0x38
 8005fa4:	af04      	add	r7, sp, #16
 8005fa6:	60f8      	str	r0, [r7, #12]
 8005fa8:	60b9      	str	r1, [r7, #8]
 8005faa:	607a      	str	r2, [r7, #4]
 8005fac:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005fae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d10b      	bne.n	8005fcc <xTaskCreateStatic+0x2c>
	__asm volatile
 8005fb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fb8:	f383 8811 	msr	BASEPRI, r3
 8005fbc:	f3bf 8f6f 	isb	sy
 8005fc0:	f3bf 8f4f 	dsb	sy
 8005fc4:	623b      	str	r3, [r7, #32]
}
 8005fc6:	bf00      	nop
 8005fc8:	bf00      	nop
 8005fca:	e7fd      	b.n	8005fc8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005fcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d10b      	bne.n	8005fea <xTaskCreateStatic+0x4a>
	__asm volatile
 8005fd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fd6:	f383 8811 	msr	BASEPRI, r3
 8005fda:	f3bf 8f6f 	isb	sy
 8005fde:	f3bf 8f4f 	dsb	sy
 8005fe2:	61fb      	str	r3, [r7, #28]
}
 8005fe4:	bf00      	nop
 8005fe6:	bf00      	nop
 8005fe8:	e7fd      	b.n	8005fe6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005fea:	235c      	movs	r3, #92	@ 0x5c
 8005fec:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005fee:	693b      	ldr	r3, [r7, #16]
 8005ff0:	2b5c      	cmp	r3, #92	@ 0x5c
 8005ff2:	d00b      	beq.n	800600c <xTaskCreateStatic+0x6c>
	__asm volatile
 8005ff4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ff8:	f383 8811 	msr	BASEPRI, r3
 8005ffc:	f3bf 8f6f 	isb	sy
 8006000:	f3bf 8f4f 	dsb	sy
 8006004:	61bb      	str	r3, [r7, #24]
}
 8006006:	bf00      	nop
 8006008:	bf00      	nop
 800600a:	e7fd      	b.n	8006008 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800600c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800600e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006010:	2b00      	cmp	r3, #0
 8006012:	d01e      	beq.n	8006052 <xTaskCreateStatic+0xb2>
 8006014:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006016:	2b00      	cmp	r3, #0
 8006018:	d01b      	beq.n	8006052 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800601a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800601c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800601e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006020:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006022:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006026:	2202      	movs	r2, #2
 8006028:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800602c:	2300      	movs	r3, #0
 800602e:	9303      	str	r3, [sp, #12]
 8006030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006032:	9302      	str	r3, [sp, #8]
 8006034:	f107 0314 	add.w	r3, r7, #20
 8006038:	9301      	str	r3, [sp, #4]
 800603a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800603c:	9300      	str	r3, [sp, #0]
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	687a      	ldr	r2, [r7, #4]
 8006042:	68b9      	ldr	r1, [r7, #8]
 8006044:	68f8      	ldr	r0, [r7, #12]
 8006046:	f000 f850 	bl	80060ea <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800604a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800604c:	f000 f8de 	bl	800620c <prvAddNewTaskToReadyList>
 8006050:	e001      	b.n	8006056 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8006052:	2300      	movs	r3, #0
 8006054:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006056:	697b      	ldr	r3, [r7, #20]
	}
 8006058:	4618      	mov	r0, r3
 800605a:	3728      	adds	r7, #40	@ 0x28
 800605c:	46bd      	mov	sp, r7
 800605e:	bd80      	pop	{r7, pc}

08006060 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006060:	b580      	push	{r7, lr}
 8006062:	b08c      	sub	sp, #48	@ 0x30
 8006064:	af04      	add	r7, sp, #16
 8006066:	60f8      	str	r0, [r7, #12]
 8006068:	60b9      	str	r1, [r7, #8]
 800606a:	603b      	str	r3, [r7, #0]
 800606c:	4613      	mov	r3, r2
 800606e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006070:	88fb      	ldrh	r3, [r7, #6]
 8006072:	009b      	lsls	r3, r3, #2
 8006074:	4618      	mov	r0, r3
 8006076:	f001 fd59 	bl	8007b2c <pvPortMalloc>
 800607a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800607c:	697b      	ldr	r3, [r7, #20]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d00e      	beq.n	80060a0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006082:	205c      	movs	r0, #92	@ 0x5c
 8006084:	f001 fd52 	bl	8007b2c <pvPortMalloc>
 8006088:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800608a:	69fb      	ldr	r3, [r7, #28]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d003      	beq.n	8006098 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006090:	69fb      	ldr	r3, [r7, #28]
 8006092:	697a      	ldr	r2, [r7, #20]
 8006094:	631a      	str	r2, [r3, #48]	@ 0x30
 8006096:	e005      	b.n	80060a4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006098:	6978      	ldr	r0, [r7, #20]
 800609a:	f001 fe15 	bl	8007cc8 <vPortFree>
 800609e:	e001      	b.n	80060a4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80060a0:	2300      	movs	r3, #0
 80060a2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80060a4:	69fb      	ldr	r3, [r7, #28]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d017      	beq.n	80060da <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80060aa:	69fb      	ldr	r3, [r7, #28]
 80060ac:	2200      	movs	r2, #0
 80060ae:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80060b2:	88fa      	ldrh	r2, [r7, #6]
 80060b4:	2300      	movs	r3, #0
 80060b6:	9303      	str	r3, [sp, #12]
 80060b8:	69fb      	ldr	r3, [r7, #28]
 80060ba:	9302      	str	r3, [sp, #8]
 80060bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060be:	9301      	str	r3, [sp, #4]
 80060c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060c2:	9300      	str	r3, [sp, #0]
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	68b9      	ldr	r1, [r7, #8]
 80060c8:	68f8      	ldr	r0, [r7, #12]
 80060ca:	f000 f80e 	bl	80060ea <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80060ce:	69f8      	ldr	r0, [r7, #28]
 80060d0:	f000 f89c 	bl	800620c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80060d4:	2301      	movs	r3, #1
 80060d6:	61bb      	str	r3, [r7, #24]
 80060d8:	e002      	b.n	80060e0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80060da:	f04f 33ff 	mov.w	r3, #4294967295
 80060de:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80060e0:	69bb      	ldr	r3, [r7, #24]
	}
 80060e2:	4618      	mov	r0, r3
 80060e4:	3720      	adds	r7, #32
 80060e6:	46bd      	mov	sp, r7
 80060e8:	bd80      	pop	{r7, pc}

080060ea <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80060ea:	b580      	push	{r7, lr}
 80060ec:	b088      	sub	sp, #32
 80060ee:	af00      	add	r7, sp, #0
 80060f0:	60f8      	str	r0, [r7, #12]
 80060f2:	60b9      	str	r1, [r7, #8]
 80060f4:	607a      	str	r2, [r7, #4]
 80060f6:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80060f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060fa:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	009b      	lsls	r3, r3, #2
 8006100:	461a      	mov	r2, r3
 8006102:	21a5      	movs	r1, #165	@ 0xa5
 8006104:	f001 ff00 	bl	8007f08 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006108:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800610a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006112:	3b01      	subs	r3, #1
 8006114:	009b      	lsls	r3, r3, #2
 8006116:	4413      	add	r3, r2
 8006118:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800611a:	69bb      	ldr	r3, [r7, #24]
 800611c:	f023 0307 	bic.w	r3, r3, #7
 8006120:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006122:	69bb      	ldr	r3, [r7, #24]
 8006124:	f003 0307 	and.w	r3, r3, #7
 8006128:	2b00      	cmp	r3, #0
 800612a:	d00b      	beq.n	8006144 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800612c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006130:	f383 8811 	msr	BASEPRI, r3
 8006134:	f3bf 8f6f 	isb	sy
 8006138:	f3bf 8f4f 	dsb	sy
 800613c:	617b      	str	r3, [r7, #20]
}
 800613e:	bf00      	nop
 8006140:	bf00      	nop
 8006142:	e7fd      	b.n	8006140 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d01f      	beq.n	800618a <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800614a:	2300      	movs	r3, #0
 800614c:	61fb      	str	r3, [r7, #28]
 800614e:	e012      	b.n	8006176 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006150:	68ba      	ldr	r2, [r7, #8]
 8006152:	69fb      	ldr	r3, [r7, #28]
 8006154:	4413      	add	r3, r2
 8006156:	7819      	ldrb	r1, [r3, #0]
 8006158:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800615a:	69fb      	ldr	r3, [r7, #28]
 800615c:	4413      	add	r3, r2
 800615e:	3334      	adds	r3, #52	@ 0x34
 8006160:	460a      	mov	r2, r1
 8006162:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006164:	68ba      	ldr	r2, [r7, #8]
 8006166:	69fb      	ldr	r3, [r7, #28]
 8006168:	4413      	add	r3, r2
 800616a:	781b      	ldrb	r3, [r3, #0]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d006      	beq.n	800617e <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006170:	69fb      	ldr	r3, [r7, #28]
 8006172:	3301      	adds	r3, #1
 8006174:	61fb      	str	r3, [r7, #28]
 8006176:	69fb      	ldr	r3, [r7, #28]
 8006178:	2b0f      	cmp	r3, #15
 800617a:	d9e9      	bls.n	8006150 <prvInitialiseNewTask+0x66>
 800617c:	e000      	b.n	8006180 <prvInitialiseNewTask+0x96>
			{
				break;
 800617e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006180:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006182:	2200      	movs	r2, #0
 8006184:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006188:	e003      	b.n	8006192 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800618a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800618c:	2200      	movs	r2, #0
 800618e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006192:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006194:	2b37      	cmp	r3, #55	@ 0x37
 8006196:	d901      	bls.n	800619c <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006198:	2337      	movs	r3, #55	@ 0x37
 800619a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800619c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800619e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80061a0:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80061a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061a4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80061a6:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80061a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061aa:	2200      	movs	r2, #0
 80061ac:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80061ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061b0:	3304      	adds	r3, #4
 80061b2:	4618      	mov	r0, r3
 80061b4:	f7fe ff4a 	bl	800504c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80061b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061ba:	3318      	adds	r3, #24
 80061bc:	4618      	mov	r0, r3
 80061be:	f7fe ff45 	bl	800504c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80061c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80061c6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80061c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061ca:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80061ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061d0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80061d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80061d6:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80061d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061da:	2200      	movs	r2, #0
 80061dc:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80061de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061e0:	2200      	movs	r2, #0
 80061e2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80061e6:	683a      	ldr	r2, [r7, #0]
 80061e8:	68f9      	ldr	r1, [r7, #12]
 80061ea:	69b8      	ldr	r0, [r7, #24]
 80061ec:	f001 fa4e 	bl	800768c <pxPortInitialiseStack>
 80061f0:	4602      	mov	r2, r0
 80061f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061f4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80061f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d002      	beq.n	8006202 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80061fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006200:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006202:	bf00      	nop
 8006204:	3720      	adds	r7, #32
 8006206:	46bd      	mov	sp, r7
 8006208:	bd80      	pop	{r7, pc}
	...

0800620c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b082      	sub	sp, #8
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006214:	f001 fb68 	bl	80078e8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006218:	4b2d      	ldr	r3, [pc, #180]	@ (80062d0 <prvAddNewTaskToReadyList+0xc4>)
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	3301      	adds	r3, #1
 800621e:	4a2c      	ldr	r2, [pc, #176]	@ (80062d0 <prvAddNewTaskToReadyList+0xc4>)
 8006220:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006222:	4b2c      	ldr	r3, [pc, #176]	@ (80062d4 <prvAddNewTaskToReadyList+0xc8>)
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d109      	bne.n	800623e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800622a:	4a2a      	ldr	r2, [pc, #168]	@ (80062d4 <prvAddNewTaskToReadyList+0xc8>)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006230:	4b27      	ldr	r3, [pc, #156]	@ (80062d0 <prvAddNewTaskToReadyList+0xc4>)
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	2b01      	cmp	r3, #1
 8006236:	d110      	bne.n	800625a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006238:	f000 fc1e 	bl	8006a78 <prvInitialiseTaskLists>
 800623c:	e00d      	b.n	800625a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800623e:	4b26      	ldr	r3, [pc, #152]	@ (80062d8 <prvAddNewTaskToReadyList+0xcc>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d109      	bne.n	800625a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006246:	4b23      	ldr	r3, [pc, #140]	@ (80062d4 <prvAddNewTaskToReadyList+0xc8>)
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006250:	429a      	cmp	r2, r3
 8006252:	d802      	bhi.n	800625a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006254:	4a1f      	ldr	r2, [pc, #124]	@ (80062d4 <prvAddNewTaskToReadyList+0xc8>)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800625a:	4b20      	ldr	r3, [pc, #128]	@ (80062dc <prvAddNewTaskToReadyList+0xd0>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	3301      	adds	r3, #1
 8006260:	4a1e      	ldr	r2, [pc, #120]	@ (80062dc <prvAddNewTaskToReadyList+0xd0>)
 8006262:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006264:	4b1d      	ldr	r3, [pc, #116]	@ (80062dc <prvAddNewTaskToReadyList+0xd0>)
 8006266:	681a      	ldr	r2, [r3, #0]
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006270:	4b1b      	ldr	r3, [pc, #108]	@ (80062e0 <prvAddNewTaskToReadyList+0xd4>)
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	429a      	cmp	r2, r3
 8006276:	d903      	bls.n	8006280 <prvAddNewTaskToReadyList+0x74>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800627c:	4a18      	ldr	r2, [pc, #96]	@ (80062e0 <prvAddNewTaskToReadyList+0xd4>)
 800627e:	6013      	str	r3, [r2, #0]
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006284:	4613      	mov	r3, r2
 8006286:	009b      	lsls	r3, r3, #2
 8006288:	4413      	add	r3, r2
 800628a:	009b      	lsls	r3, r3, #2
 800628c:	4a15      	ldr	r2, [pc, #84]	@ (80062e4 <prvAddNewTaskToReadyList+0xd8>)
 800628e:	441a      	add	r2, r3
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	3304      	adds	r3, #4
 8006294:	4619      	mov	r1, r3
 8006296:	4610      	mov	r0, r2
 8006298:	f7fe fee5 	bl	8005066 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800629c:	f001 fb56 	bl	800794c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80062a0:	4b0d      	ldr	r3, [pc, #52]	@ (80062d8 <prvAddNewTaskToReadyList+0xcc>)
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d00e      	beq.n	80062c6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80062a8:	4b0a      	ldr	r3, [pc, #40]	@ (80062d4 <prvAddNewTaskToReadyList+0xc8>)
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062b2:	429a      	cmp	r2, r3
 80062b4:	d207      	bcs.n	80062c6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80062b6:	4b0c      	ldr	r3, [pc, #48]	@ (80062e8 <prvAddNewTaskToReadyList+0xdc>)
 80062b8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80062bc:	601a      	str	r2, [r3, #0]
 80062be:	f3bf 8f4f 	dsb	sy
 80062c2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80062c6:	bf00      	nop
 80062c8:	3708      	adds	r7, #8
 80062ca:	46bd      	mov	sp, r7
 80062cc:	bd80      	pop	{r7, pc}
 80062ce:	bf00      	nop
 80062d0:	20000d9c 	.word	0x20000d9c
 80062d4:	200008c8 	.word	0x200008c8
 80062d8:	20000da8 	.word	0x20000da8
 80062dc:	20000db8 	.word	0x20000db8
 80062e0:	20000da4 	.word	0x20000da4
 80062e4:	200008cc 	.word	0x200008cc
 80062e8:	e000ed04 	.word	0xe000ed04

080062ec <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b084      	sub	sp, #16
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80062f4:	2300      	movs	r3, #0
 80062f6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d018      	beq.n	8006330 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80062fe:	4b14      	ldr	r3, [pc, #80]	@ (8006350 <vTaskDelay+0x64>)
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d00b      	beq.n	800631e <vTaskDelay+0x32>
	__asm volatile
 8006306:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800630a:	f383 8811 	msr	BASEPRI, r3
 800630e:	f3bf 8f6f 	isb	sy
 8006312:	f3bf 8f4f 	dsb	sy
 8006316:	60bb      	str	r3, [r7, #8]
}
 8006318:	bf00      	nop
 800631a:	bf00      	nop
 800631c:	e7fd      	b.n	800631a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800631e:	f000 f883 	bl	8006428 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006322:	2100      	movs	r1, #0
 8006324:	6878      	ldr	r0, [r7, #4]
 8006326:	f000 fe03 	bl	8006f30 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800632a:	f000 f88b 	bl	8006444 <xTaskResumeAll>
 800632e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d107      	bne.n	8006346 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8006336:	4b07      	ldr	r3, [pc, #28]	@ (8006354 <vTaskDelay+0x68>)
 8006338:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800633c:	601a      	str	r2, [r3, #0]
 800633e:	f3bf 8f4f 	dsb	sy
 8006342:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006346:	bf00      	nop
 8006348:	3710      	adds	r7, #16
 800634a:	46bd      	mov	sp, r7
 800634c:	bd80      	pop	{r7, pc}
 800634e:	bf00      	nop
 8006350:	20000dc4 	.word	0x20000dc4
 8006354:	e000ed04 	.word	0xe000ed04

08006358 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b08a      	sub	sp, #40	@ 0x28
 800635c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800635e:	2300      	movs	r3, #0
 8006360:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006362:	2300      	movs	r3, #0
 8006364:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006366:	463a      	mov	r2, r7
 8006368:	1d39      	adds	r1, r7, #4
 800636a:	f107 0308 	add.w	r3, r7, #8
 800636e:	4618      	mov	r0, r3
 8006370:	f7fe fe18 	bl	8004fa4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006374:	6839      	ldr	r1, [r7, #0]
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	68ba      	ldr	r2, [r7, #8]
 800637a:	9202      	str	r2, [sp, #8]
 800637c:	9301      	str	r3, [sp, #4]
 800637e:	2300      	movs	r3, #0
 8006380:	9300      	str	r3, [sp, #0]
 8006382:	2300      	movs	r3, #0
 8006384:	460a      	mov	r2, r1
 8006386:	4922      	ldr	r1, [pc, #136]	@ (8006410 <vTaskStartScheduler+0xb8>)
 8006388:	4822      	ldr	r0, [pc, #136]	@ (8006414 <vTaskStartScheduler+0xbc>)
 800638a:	f7ff fe09 	bl	8005fa0 <xTaskCreateStatic>
 800638e:	4603      	mov	r3, r0
 8006390:	4a21      	ldr	r2, [pc, #132]	@ (8006418 <vTaskStartScheduler+0xc0>)
 8006392:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006394:	4b20      	ldr	r3, [pc, #128]	@ (8006418 <vTaskStartScheduler+0xc0>)
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d002      	beq.n	80063a2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800639c:	2301      	movs	r3, #1
 800639e:	617b      	str	r3, [r7, #20]
 80063a0:	e001      	b.n	80063a6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80063a2:	2300      	movs	r3, #0
 80063a4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80063a6:	697b      	ldr	r3, [r7, #20]
 80063a8:	2b01      	cmp	r3, #1
 80063aa:	d102      	bne.n	80063b2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80063ac:	f000 fe14 	bl	8006fd8 <xTimerCreateTimerTask>
 80063b0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80063b2:	697b      	ldr	r3, [r7, #20]
 80063b4:	2b01      	cmp	r3, #1
 80063b6:	d116      	bne.n	80063e6 <vTaskStartScheduler+0x8e>
	__asm volatile
 80063b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063bc:	f383 8811 	msr	BASEPRI, r3
 80063c0:	f3bf 8f6f 	isb	sy
 80063c4:	f3bf 8f4f 	dsb	sy
 80063c8:	613b      	str	r3, [r7, #16]
}
 80063ca:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80063cc:	4b13      	ldr	r3, [pc, #76]	@ (800641c <vTaskStartScheduler+0xc4>)
 80063ce:	f04f 32ff 	mov.w	r2, #4294967295
 80063d2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80063d4:	4b12      	ldr	r3, [pc, #72]	@ (8006420 <vTaskStartScheduler+0xc8>)
 80063d6:	2201      	movs	r2, #1
 80063d8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80063da:	4b12      	ldr	r3, [pc, #72]	@ (8006424 <vTaskStartScheduler+0xcc>)
 80063dc:	2200      	movs	r2, #0
 80063de:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80063e0:	f001 f9de 	bl	80077a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80063e4:	e00f      	b.n	8006406 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80063e6:	697b      	ldr	r3, [r7, #20]
 80063e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063ec:	d10b      	bne.n	8006406 <vTaskStartScheduler+0xae>
	__asm volatile
 80063ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063f2:	f383 8811 	msr	BASEPRI, r3
 80063f6:	f3bf 8f6f 	isb	sy
 80063fa:	f3bf 8f4f 	dsb	sy
 80063fe:	60fb      	str	r3, [r7, #12]
}
 8006400:	bf00      	nop
 8006402:	bf00      	nop
 8006404:	e7fd      	b.n	8006402 <vTaskStartScheduler+0xaa>
}
 8006406:	bf00      	nop
 8006408:	3718      	adds	r7, #24
 800640a:	46bd      	mov	sp, r7
 800640c:	bd80      	pop	{r7, pc}
 800640e:	bf00      	nop
 8006410:	08007fb8 	.word	0x08007fb8
 8006414:	08006a49 	.word	0x08006a49
 8006418:	20000dc0 	.word	0x20000dc0
 800641c:	20000dbc 	.word	0x20000dbc
 8006420:	20000da8 	.word	0x20000da8
 8006424:	20000da0 	.word	0x20000da0

08006428 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006428:	b480      	push	{r7}
 800642a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800642c:	4b04      	ldr	r3, [pc, #16]	@ (8006440 <vTaskSuspendAll+0x18>)
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	3301      	adds	r3, #1
 8006432:	4a03      	ldr	r2, [pc, #12]	@ (8006440 <vTaskSuspendAll+0x18>)
 8006434:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006436:	bf00      	nop
 8006438:	46bd      	mov	sp, r7
 800643a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643e:	4770      	bx	lr
 8006440:	20000dc4 	.word	0x20000dc4

08006444 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006444:	b580      	push	{r7, lr}
 8006446:	b084      	sub	sp, #16
 8006448:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800644a:	2300      	movs	r3, #0
 800644c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800644e:	2300      	movs	r3, #0
 8006450:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006452:	4b42      	ldr	r3, [pc, #264]	@ (800655c <xTaskResumeAll+0x118>)
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d10b      	bne.n	8006472 <xTaskResumeAll+0x2e>
	__asm volatile
 800645a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800645e:	f383 8811 	msr	BASEPRI, r3
 8006462:	f3bf 8f6f 	isb	sy
 8006466:	f3bf 8f4f 	dsb	sy
 800646a:	603b      	str	r3, [r7, #0]
}
 800646c:	bf00      	nop
 800646e:	bf00      	nop
 8006470:	e7fd      	b.n	800646e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006472:	f001 fa39 	bl	80078e8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006476:	4b39      	ldr	r3, [pc, #228]	@ (800655c <xTaskResumeAll+0x118>)
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	3b01      	subs	r3, #1
 800647c:	4a37      	ldr	r2, [pc, #220]	@ (800655c <xTaskResumeAll+0x118>)
 800647e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006480:	4b36      	ldr	r3, [pc, #216]	@ (800655c <xTaskResumeAll+0x118>)
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d162      	bne.n	800654e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006488:	4b35      	ldr	r3, [pc, #212]	@ (8006560 <xTaskResumeAll+0x11c>)
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d05e      	beq.n	800654e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006490:	e02f      	b.n	80064f2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006492:	4b34      	ldr	r3, [pc, #208]	@ (8006564 <xTaskResumeAll+0x120>)
 8006494:	68db      	ldr	r3, [r3, #12]
 8006496:	68db      	ldr	r3, [r3, #12]
 8006498:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	3318      	adds	r3, #24
 800649e:	4618      	mov	r0, r3
 80064a0:	f7fe fe3e 	bl	8005120 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	3304      	adds	r3, #4
 80064a8:	4618      	mov	r0, r3
 80064aa:	f7fe fe39 	bl	8005120 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80064b2:	4b2d      	ldr	r3, [pc, #180]	@ (8006568 <xTaskResumeAll+0x124>)
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	429a      	cmp	r2, r3
 80064b8:	d903      	bls.n	80064c2 <xTaskResumeAll+0x7e>
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064be:	4a2a      	ldr	r2, [pc, #168]	@ (8006568 <xTaskResumeAll+0x124>)
 80064c0:	6013      	str	r3, [r2, #0]
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80064c6:	4613      	mov	r3, r2
 80064c8:	009b      	lsls	r3, r3, #2
 80064ca:	4413      	add	r3, r2
 80064cc:	009b      	lsls	r3, r3, #2
 80064ce:	4a27      	ldr	r2, [pc, #156]	@ (800656c <xTaskResumeAll+0x128>)
 80064d0:	441a      	add	r2, r3
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	3304      	adds	r3, #4
 80064d6:	4619      	mov	r1, r3
 80064d8:	4610      	mov	r0, r2
 80064da:	f7fe fdc4 	bl	8005066 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80064e2:	4b23      	ldr	r3, [pc, #140]	@ (8006570 <xTaskResumeAll+0x12c>)
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064e8:	429a      	cmp	r2, r3
 80064ea:	d302      	bcc.n	80064f2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80064ec:	4b21      	ldr	r3, [pc, #132]	@ (8006574 <xTaskResumeAll+0x130>)
 80064ee:	2201      	movs	r2, #1
 80064f0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80064f2:	4b1c      	ldr	r3, [pc, #112]	@ (8006564 <xTaskResumeAll+0x120>)
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d1cb      	bne.n	8006492 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d001      	beq.n	8006504 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006500:	f000 fb58 	bl	8006bb4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006504:	4b1c      	ldr	r3, [pc, #112]	@ (8006578 <xTaskResumeAll+0x134>)
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d010      	beq.n	8006532 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006510:	f000 f846 	bl	80065a0 <xTaskIncrementTick>
 8006514:	4603      	mov	r3, r0
 8006516:	2b00      	cmp	r3, #0
 8006518:	d002      	beq.n	8006520 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800651a:	4b16      	ldr	r3, [pc, #88]	@ (8006574 <xTaskResumeAll+0x130>)
 800651c:	2201      	movs	r2, #1
 800651e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	3b01      	subs	r3, #1
 8006524:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d1f1      	bne.n	8006510 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800652c:	4b12      	ldr	r3, [pc, #72]	@ (8006578 <xTaskResumeAll+0x134>)
 800652e:	2200      	movs	r2, #0
 8006530:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006532:	4b10      	ldr	r3, [pc, #64]	@ (8006574 <xTaskResumeAll+0x130>)
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d009      	beq.n	800654e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800653a:	2301      	movs	r3, #1
 800653c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800653e:	4b0f      	ldr	r3, [pc, #60]	@ (800657c <xTaskResumeAll+0x138>)
 8006540:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006544:	601a      	str	r2, [r3, #0]
 8006546:	f3bf 8f4f 	dsb	sy
 800654a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800654e:	f001 f9fd 	bl	800794c <vPortExitCritical>

	return xAlreadyYielded;
 8006552:	68bb      	ldr	r3, [r7, #8]
}
 8006554:	4618      	mov	r0, r3
 8006556:	3710      	adds	r7, #16
 8006558:	46bd      	mov	sp, r7
 800655a:	bd80      	pop	{r7, pc}
 800655c:	20000dc4 	.word	0x20000dc4
 8006560:	20000d9c 	.word	0x20000d9c
 8006564:	20000d5c 	.word	0x20000d5c
 8006568:	20000da4 	.word	0x20000da4
 800656c:	200008cc 	.word	0x200008cc
 8006570:	200008c8 	.word	0x200008c8
 8006574:	20000db0 	.word	0x20000db0
 8006578:	20000dac 	.word	0x20000dac
 800657c:	e000ed04 	.word	0xe000ed04

08006580 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006580:	b480      	push	{r7}
 8006582:	b083      	sub	sp, #12
 8006584:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006586:	4b05      	ldr	r3, [pc, #20]	@ (800659c <xTaskGetTickCount+0x1c>)
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800658c:	687b      	ldr	r3, [r7, #4]
}
 800658e:	4618      	mov	r0, r3
 8006590:	370c      	adds	r7, #12
 8006592:	46bd      	mov	sp, r7
 8006594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006598:	4770      	bx	lr
 800659a:	bf00      	nop
 800659c:	20000da0 	.word	0x20000da0

080065a0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b086      	sub	sp, #24
 80065a4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80065a6:	2300      	movs	r3, #0
 80065a8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80065aa:	4b4f      	ldr	r3, [pc, #316]	@ (80066e8 <xTaskIncrementTick+0x148>)
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	f040 8090 	bne.w	80066d4 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80065b4:	4b4d      	ldr	r3, [pc, #308]	@ (80066ec <xTaskIncrementTick+0x14c>)
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	3301      	adds	r3, #1
 80065ba:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80065bc:	4a4b      	ldr	r2, [pc, #300]	@ (80066ec <xTaskIncrementTick+0x14c>)
 80065be:	693b      	ldr	r3, [r7, #16]
 80065c0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80065c2:	693b      	ldr	r3, [r7, #16]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d121      	bne.n	800660c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80065c8:	4b49      	ldr	r3, [pc, #292]	@ (80066f0 <xTaskIncrementTick+0x150>)
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d00b      	beq.n	80065ea <xTaskIncrementTick+0x4a>
	__asm volatile
 80065d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065d6:	f383 8811 	msr	BASEPRI, r3
 80065da:	f3bf 8f6f 	isb	sy
 80065de:	f3bf 8f4f 	dsb	sy
 80065e2:	603b      	str	r3, [r7, #0]
}
 80065e4:	bf00      	nop
 80065e6:	bf00      	nop
 80065e8:	e7fd      	b.n	80065e6 <xTaskIncrementTick+0x46>
 80065ea:	4b41      	ldr	r3, [pc, #260]	@ (80066f0 <xTaskIncrementTick+0x150>)
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	60fb      	str	r3, [r7, #12]
 80065f0:	4b40      	ldr	r3, [pc, #256]	@ (80066f4 <xTaskIncrementTick+0x154>)
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	4a3e      	ldr	r2, [pc, #248]	@ (80066f0 <xTaskIncrementTick+0x150>)
 80065f6:	6013      	str	r3, [r2, #0]
 80065f8:	4a3e      	ldr	r2, [pc, #248]	@ (80066f4 <xTaskIncrementTick+0x154>)
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	6013      	str	r3, [r2, #0]
 80065fe:	4b3e      	ldr	r3, [pc, #248]	@ (80066f8 <xTaskIncrementTick+0x158>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	3301      	adds	r3, #1
 8006604:	4a3c      	ldr	r2, [pc, #240]	@ (80066f8 <xTaskIncrementTick+0x158>)
 8006606:	6013      	str	r3, [r2, #0]
 8006608:	f000 fad4 	bl	8006bb4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800660c:	4b3b      	ldr	r3, [pc, #236]	@ (80066fc <xTaskIncrementTick+0x15c>)
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	693a      	ldr	r2, [r7, #16]
 8006612:	429a      	cmp	r2, r3
 8006614:	d349      	bcc.n	80066aa <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006616:	4b36      	ldr	r3, [pc, #216]	@ (80066f0 <xTaskIncrementTick+0x150>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d104      	bne.n	800662a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006620:	4b36      	ldr	r3, [pc, #216]	@ (80066fc <xTaskIncrementTick+0x15c>)
 8006622:	f04f 32ff 	mov.w	r2, #4294967295
 8006626:	601a      	str	r2, [r3, #0]
					break;
 8006628:	e03f      	b.n	80066aa <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800662a:	4b31      	ldr	r3, [pc, #196]	@ (80066f0 <xTaskIncrementTick+0x150>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	68db      	ldr	r3, [r3, #12]
 8006630:	68db      	ldr	r3, [r3, #12]
 8006632:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006634:	68bb      	ldr	r3, [r7, #8]
 8006636:	685b      	ldr	r3, [r3, #4]
 8006638:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800663a:	693a      	ldr	r2, [r7, #16]
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	429a      	cmp	r2, r3
 8006640:	d203      	bcs.n	800664a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006642:	4a2e      	ldr	r2, [pc, #184]	@ (80066fc <xTaskIncrementTick+0x15c>)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006648:	e02f      	b.n	80066aa <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800664a:	68bb      	ldr	r3, [r7, #8]
 800664c:	3304      	adds	r3, #4
 800664e:	4618      	mov	r0, r3
 8006650:	f7fe fd66 	bl	8005120 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006654:	68bb      	ldr	r3, [r7, #8]
 8006656:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006658:	2b00      	cmp	r3, #0
 800665a:	d004      	beq.n	8006666 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800665c:	68bb      	ldr	r3, [r7, #8]
 800665e:	3318      	adds	r3, #24
 8006660:	4618      	mov	r0, r3
 8006662:	f7fe fd5d 	bl	8005120 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006666:	68bb      	ldr	r3, [r7, #8]
 8006668:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800666a:	4b25      	ldr	r3, [pc, #148]	@ (8006700 <xTaskIncrementTick+0x160>)
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	429a      	cmp	r2, r3
 8006670:	d903      	bls.n	800667a <xTaskIncrementTick+0xda>
 8006672:	68bb      	ldr	r3, [r7, #8]
 8006674:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006676:	4a22      	ldr	r2, [pc, #136]	@ (8006700 <xTaskIncrementTick+0x160>)
 8006678:	6013      	str	r3, [r2, #0]
 800667a:	68bb      	ldr	r3, [r7, #8]
 800667c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800667e:	4613      	mov	r3, r2
 8006680:	009b      	lsls	r3, r3, #2
 8006682:	4413      	add	r3, r2
 8006684:	009b      	lsls	r3, r3, #2
 8006686:	4a1f      	ldr	r2, [pc, #124]	@ (8006704 <xTaskIncrementTick+0x164>)
 8006688:	441a      	add	r2, r3
 800668a:	68bb      	ldr	r3, [r7, #8]
 800668c:	3304      	adds	r3, #4
 800668e:	4619      	mov	r1, r3
 8006690:	4610      	mov	r0, r2
 8006692:	f7fe fce8 	bl	8005066 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006696:	68bb      	ldr	r3, [r7, #8]
 8006698:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800669a:	4b1b      	ldr	r3, [pc, #108]	@ (8006708 <xTaskIncrementTick+0x168>)
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066a0:	429a      	cmp	r2, r3
 80066a2:	d3b8      	bcc.n	8006616 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80066a4:	2301      	movs	r3, #1
 80066a6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80066a8:	e7b5      	b.n	8006616 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80066aa:	4b17      	ldr	r3, [pc, #92]	@ (8006708 <xTaskIncrementTick+0x168>)
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066b0:	4914      	ldr	r1, [pc, #80]	@ (8006704 <xTaskIncrementTick+0x164>)
 80066b2:	4613      	mov	r3, r2
 80066b4:	009b      	lsls	r3, r3, #2
 80066b6:	4413      	add	r3, r2
 80066b8:	009b      	lsls	r3, r3, #2
 80066ba:	440b      	add	r3, r1
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	2b01      	cmp	r3, #1
 80066c0:	d901      	bls.n	80066c6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80066c2:	2301      	movs	r3, #1
 80066c4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80066c6:	4b11      	ldr	r3, [pc, #68]	@ (800670c <xTaskIncrementTick+0x16c>)
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d007      	beq.n	80066de <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80066ce:	2301      	movs	r3, #1
 80066d0:	617b      	str	r3, [r7, #20]
 80066d2:	e004      	b.n	80066de <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80066d4:	4b0e      	ldr	r3, [pc, #56]	@ (8006710 <xTaskIncrementTick+0x170>)
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	3301      	adds	r3, #1
 80066da:	4a0d      	ldr	r2, [pc, #52]	@ (8006710 <xTaskIncrementTick+0x170>)
 80066dc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80066de:	697b      	ldr	r3, [r7, #20]
}
 80066e0:	4618      	mov	r0, r3
 80066e2:	3718      	adds	r7, #24
 80066e4:	46bd      	mov	sp, r7
 80066e6:	bd80      	pop	{r7, pc}
 80066e8:	20000dc4 	.word	0x20000dc4
 80066ec:	20000da0 	.word	0x20000da0
 80066f0:	20000d54 	.word	0x20000d54
 80066f4:	20000d58 	.word	0x20000d58
 80066f8:	20000db4 	.word	0x20000db4
 80066fc:	20000dbc 	.word	0x20000dbc
 8006700:	20000da4 	.word	0x20000da4
 8006704:	200008cc 	.word	0x200008cc
 8006708:	200008c8 	.word	0x200008c8
 800670c:	20000db0 	.word	0x20000db0
 8006710:	20000dac 	.word	0x20000dac

08006714 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006714:	b480      	push	{r7}
 8006716:	b085      	sub	sp, #20
 8006718:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800671a:	4b28      	ldr	r3, [pc, #160]	@ (80067bc <vTaskSwitchContext+0xa8>)
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d003      	beq.n	800672a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006722:	4b27      	ldr	r3, [pc, #156]	@ (80067c0 <vTaskSwitchContext+0xac>)
 8006724:	2201      	movs	r2, #1
 8006726:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006728:	e042      	b.n	80067b0 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800672a:	4b25      	ldr	r3, [pc, #148]	@ (80067c0 <vTaskSwitchContext+0xac>)
 800672c:	2200      	movs	r2, #0
 800672e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006730:	4b24      	ldr	r3, [pc, #144]	@ (80067c4 <vTaskSwitchContext+0xb0>)
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	60fb      	str	r3, [r7, #12]
 8006736:	e011      	b.n	800675c <vTaskSwitchContext+0x48>
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d10b      	bne.n	8006756 <vTaskSwitchContext+0x42>
	__asm volatile
 800673e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006742:	f383 8811 	msr	BASEPRI, r3
 8006746:	f3bf 8f6f 	isb	sy
 800674a:	f3bf 8f4f 	dsb	sy
 800674e:	607b      	str	r3, [r7, #4]
}
 8006750:	bf00      	nop
 8006752:	bf00      	nop
 8006754:	e7fd      	b.n	8006752 <vTaskSwitchContext+0x3e>
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	3b01      	subs	r3, #1
 800675a:	60fb      	str	r3, [r7, #12]
 800675c:	491a      	ldr	r1, [pc, #104]	@ (80067c8 <vTaskSwitchContext+0xb4>)
 800675e:	68fa      	ldr	r2, [r7, #12]
 8006760:	4613      	mov	r3, r2
 8006762:	009b      	lsls	r3, r3, #2
 8006764:	4413      	add	r3, r2
 8006766:	009b      	lsls	r3, r3, #2
 8006768:	440b      	add	r3, r1
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d0e3      	beq.n	8006738 <vTaskSwitchContext+0x24>
 8006770:	68fa      	ldr	r2, [r7, #12]
 8006772:	4613      	mov	r3, r2
 8006774:	009b      	lsls	r3, r3, #2
 8006776:	4413      	add	r3, r2
 8006778:	009b      	lsls	r3, r3, #2
 800677a:	4a13      	ldr	r2, [pc, #76]	@ (80067c8 <vTaskSwitchContext+0xb4>)
 800677c:	4413      	add	r3, r2
 800677e:	60bb      	str	r3, [r7, #8]
 8006780:	68bb      	ldr	r3, [r7, #8]
 8006782:	685b      	ldr	r3, [r3, #4]
 8006784:	685a      	ldr	r2, [r3, #4]
 8006786:	68bb      	ldr	r3, [r7, #8]
 8006788:	605a      	str	r2, [r3, #4]
 800678a:	68bb      	ldr	r3, [r7, #8]
 800678c:	685a      	ldr	r2, [r3, #4]
 800678e:	68bb      	ldr	r3, [r7, #8]
 8006790:	3308      	adds	r3, #8
 8006792:	429a      	cmp	r2, r3
 8006794:	d104      	bne.n	80067a0 <vTaskSwitchContext+0x8c>
 8006796:	68bb      	ldr	r3, [r7, #8]
 8006798:	685b      	ldr	r3, [r3, #4]
 800679a:	685a      	ldr	r2, [r3, #4]
 800679c:	68bb      	ldr	r3, [r7, #8]
 800679e:	605a      	str	r2, [r3, #4]
 80067a0:	68bb      	ldr	r3, [r7, #8]
 80067a2:	685b      	ldr	r3, [r3, #4]
 80067a4:	68db      	ldr	r3, [r3, #12]
 80067a6:	4a09      	ldr	r2, [pc, #36]	@ (80067cc <vTaskSwitchContext+0xb8>)
 80067a8:	6013      	str	r3, [r2, #0]
 80067aa:	4a06      	ldr	r2, [pc, #24]	@ (80067c4 <vTaskSwitchContext+0xb0>)
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	6013      	str	r3, [r2, #0]
}
 80067b0:	bf00      	nop
 80067b2:	3714      	adds	r7, #20
 80067b4:	46bd      	mov	sp, r7
 80067b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ba:	4770      	bx	lr
 80067bc:	20000dc4 	.word	0x20000dc4
 80067c0:	20000db0 	.word	0x20000db0
 80067c4:	20000da4 	.word	0x20000da4
 80067c8:	200008cc 	.word	0x200008cc
 80067cc:	200008c8 	.word	0x200008c8

080067d0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b084      	sub	sp, #16
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
 80067d8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d10b      	bne.n	80067f8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80067e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067e4:	f383 8811 	msr	BASEPRI, r3
 80067e8:	f3bf 8f6f 	isb	sy
 80067ec:	f3bf 8f4f 	dsb	sy
 80067f0:	60fb      	str	r3, [r7, #12]
}
 80067f2:	bf00      	nop
 80067f4:	bf00      	nop
 80067f6:	e7fd      	b.n	80067f4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80067f8:	4b07      	ldr	r3, [pc, #28]	@ (8006818 <vTaskPlaceOnEventList+0x48>)
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	3318      	adds	r3, #24
 80067fe:	4619      	mov	r1, r3
 8006800:	6878      	ldr	r0, [r7, #4]
 8006802:	f7fe fc54 	bl	80050ae <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006806:	2101      	movs	r1, #1
 8006808:	6838      	ldr	r0, [r7, #0]
 800680a:	f000 fb91 	bl	8006f30 <prvAddCurrentTaskToDelayedList>
}
 800680e:	bf00      	nop
 8006810:	3710      	adds	r7, #16
 8006812:	46bd      	mov	sp, r7
 8006814:	bd80      	pop	{r7, pc}
 8006816:	bf00      	nop
 8006818:	200008c8 	.word	0x200008c8

0800681c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800681c:	b580      	push	{r7, lr}
 800681e:	b086      	sub	sp, #24
 8006820:	af00      	add	r7, sp, #0
 8006822:	60f8      	str	r0, [r7, #12]
 8006824:	60b9      	str	r1, [r7, #8]
 8006826:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d10b      	bne.n	8006846 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800682e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006832:	f383 8811 	msr	BASEPRI, r3
 8006836:	f3bf 8f6f 	isb	sy
 800683a:	f3bf 8f4f 	dsb	sy
 800683e:	617b      	str	r3, [r7, #20]
}
 8006840:	bf00      	nop
 8006842:	bf00      	nop
 8006844:	e7fd      	b.n	8006842 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006846:	4b0a      	ldr	r3, [pc, #40]	@ (8006870 <vTaskPlaceOnEventListRestricted+0x54>)
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	3318      	adds	r3, #24
 800684c:	4619      	mov	r1, r3
 800684e:	68f8      	ldr	r0, [r7, #12]
 8006850:	f7fe fc09 	bl	8005066 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d002      	beq.n	8006860 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800685a:	f04f 33ff 	mov.w	r3, #4294967295
 800685e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006860:	6879      	ldr	r1, [r7, #4]
 8006862:	68b8      	ldr	r0, [r7, #8]
 8006864:	f000 fb64 	bl	8006f30 <prvAddCurrentTaskToDelayedList>
	}
 8006868:	bf00      	nop
 800686a:	3718      	adds	r7, #24
 800686c:	46bd      	mov	sp, r7
 800686e:	bd80      	pop	{r7, pc}
 8006870:	200008c8 	.word	0x200008c8

08006874 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b086      	sub	sp, #24
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	68db      	ldr	r3, [r3, #12]
 8006880:	68db      	ldr	r3, [r3, #12]
 8006882:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006884:	693b      	ldr	r3, [r7, #16]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d10b      	bne.n	80068a2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800688a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800688e:	f383 8811 	msr	BASEPRI, r3
 8006892:	f3bf 8f6f 	isb	sy
 8006896:	f3bf 8f4f 	dsb	sy
 800689a:	60fb      	str	r3, [r7, #12]
}
 800689c:	bf00      	nop
 800689e:	bf00      	nop
 80068a0:	e7fd      	b.n	800689e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80068a2:	693b      	ldr	r3, [r7, #16]
 80068a4:	3318      	adds	r3, #24
 80068a6:	4618      	mov	r0, r3
 80068a8:	f7fe fc3a 	bl	8005120 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80068ac:	4b1d      	ldr	r3, [pc, #116]	@ (8006924 <xTaskRemoveFromEventList+0xb0>)
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d11d      	bne.n	80068f0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80068b4:	693b      	ldr	r3, [r7, #16]
 80068b6:	3304      	adds	r3, #4
 80068b8:	4618      	mov	r0, r3
 80068ba:	f7fe fc31 	bl	8005120 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80068be:	693b      	ldr	r3, [r7, #16]
 80068c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068c2:	4b19      	ldr	r3, [pc, #100]	@ (8006928 <xTaskRemoveFromEventList+0xb4>)
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	429a      	cmp	r2, r3
 80068c8:	d903      	bls.n	80068d2 <xTaskRemoveFromEventList+0x5e>
 80068ca:	693b      	ldr	r3, [r7, #16]
 80068cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068ce:	4a16      	ldr	r2, [pc, #88]	@ (8006928 <xTaskRemoveFromEventList+0xb4>)
 80068d0:	6013      	str	r3, [r2, #0]
 80068d2:	693b      	ldr	r3, [r7, #16]
 80068d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068d6:	4613      	mov	r3, r2
 80068d8:	009b      	lsls	r3, r3, #2
 80068da:	4413      	add	r3, r2
 80068dc:	009b      	lsls	r3, r3, #2
 80068de:	4a13      	ldr	r2, [pc, #76]	@ (800692c <xTaskRemoveFromEventList+0xb8>)
 80068e0:	441a      	add	r2, r3
 80068e2:	693b      	ldr	r3, [r7, #16]
 80068e4:	3304      	adds	r3, #4
 80068e6:	4619      	mov	r1, r3
 80068e8:	4610      	mov	r0, r2
 80068ea:	f7fe fbbc 	bl	8005066 <vListInsertEnd>
 80068ee:	e005      	b.n	80068fc <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80068f0:	693b      	ldr	r3, [r7, #16]
 80068f2:	3318      	adds	r3, #24
 80068f4:	4619      	mov	r1, r3
 80068f6:	480e      	ldr	r0, [pc, #56]	@ (8006930 <xTaskRemoveFromEventList+0xbc>)
 80068f8:	f7fe fbb5 	bl	8005066 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80068fc:	693b      	ldr	r3, [r7, #16]
 80068fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006900:	4b0c      	ldr	r3, [pc, #48]	@ (8006934 <xTaskRemoveFromEventList+0xc0>)
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006906:	429a      	cmp	r2, r3
 8006908:	d905      	bls.n	8006916 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800690a:	2301      	movs	r3, #1
 800690c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800690e:	4b0a      	ldr	r3, [pc, #40]	@ (8006938 <xTaskRemoveFromEventList+0xc4>)
 8006910:	2201      	movs	r2, #1
 8006912:	601a      	str	r2, [r3, #0]
 8006914:	e001      	b.n	800691a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8006916:	2300      	movs	r3, #0
 8006918:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800691a:	697b      	ldr	r3, [r7, #20]
}
 800691c:	4618      	mov	r0, r3
 800691e:	3718      	adds	r7, #24
 8006920:	46bd      	mov	sp, r7
 8006922:	bd80      	pop	{r7, pc}
 8006924:	20000dc4 	.word	0x20000dc4
 8006928:	20000da4 	.word	0x20000da4
 800692c:	200008cc 	.word	0x200008cc
 8006930:	20000d5c 	.word	0x20000d5c
 8006934:	200008c8 	.word	0x200008c8
 8006938:	20000db0 	.word	0x20000db0

0800693c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800693c:	b480      	push	{r7}
 800693e:	b083      	sub	sp, #12
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006944:	4b06      	ldr	r3, [pc, #24]	@ (8006960 <vTaskInternalSetTimeOutState+0x24>)
 8006946:	681a      	ldr	r2, [r3, #0]
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800694c:	4b05      	ldr	r3, [pc, #20]	@ (8006964 <vTaskInternalSetTimeOutState+0x28>)
 800694e:	681a      	ldr	r2, [r3, #0]
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	605a      	str	r2, [r3, #4]
}
 8006954:	bf00      	nop
 8006956:	370c      	adds	r7, #12
 8006958:	46bd      	mov	sp, r7
 800695a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695e:	4770      	bx	lr
 8006960:	20000db4 	.word	0x20000db4
 8006964:	20000da0 	.word	0x20000da0

08006968 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b088      	sub	sp, #32
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
 8006970:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d10b      	bne.n	8006990 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8006978:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800697c:	f383 8811 	msr	BASEPRI, r3
 8006980:	f3bf 8f6f 	isb	sy
 8006984:	f3bf 8f4f 	dsb	sy
 8006988:	613b      	str	r3, [r7, #16]
}
 800698a:	bf00      	nop
 800698c:	bf00      	nop
 800698e:	e7fd      	b.n	800698c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d10b      	bne.n	80069ae <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8006996:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800699a:	f383 8811 	msr	BASEPRI, r3
 800699e:	f3bf 8f6f 	isb	sy
 80069a2:	f3bf 8f4f 	dsb	sy
 80069a6:	60fb      	str	r3, [r7, #12]
}
 80069a8:	bf00      	nop
 80069aa:	bf00      	nop
 80069ac:	e7fd      	b.n	80069aa <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80069ae:	f000 ff9b 	bl	80078e8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80069b2:	4b1d      	ldr	r3, [pc, #116]	@ (8006a28 <xTaskCheckForTimeOut+0xc0>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	685b      	ldr	r3, [r3, #4]
 80069bc:	69ba      	ldr	r2, [r7, #24]
 80069be:	1ad3      	subs	r3, r2, r3
 80069c0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069ca:	d102      	bne.n	80069d2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80069cc:	2300      	movs	r3, #0
 80069ce:	61fb      	str	r3, [r7, #28]
 80069d0:	e023      	b.n	8006a1a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681a      	ldr	r2, [r3, #0]
 80069d6:	4b15      	ldr	r3, [pc, #84]	@ (8006a2c <xTaskCheckForTimeOut+0xc4>)
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	429a      	cmp	r2, r3
 80069dc:	d007      	beq.n	80069ee <xTaskCheckForTimeOut+0x86>
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	685b      	ldr	r3, [r3, #4]
 80069e2:	69ba      	ldr	r2, [r7, #24]
 80069e4:	429a      	cmp	r2, r3
 80069e6:	d302      	bcc.n	80069ee <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80069e8:	2301      	movs	r3, #1
 80069ea:	61fb      	str	r3, [r7, #28]
 80069ec:	e015      	b.n	8006a1a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	697a      	ldr	r2, [r7, #20]
 80069f4:	429a      	cmp	r2, r3
 80069f6:	d20b      	bcs.n	8006a10 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	681a      	ldr	r2, [r3, #0]
 80069fc:	697b      	ldr	r3, [r7, #20]
 80069fe:	1ad2      	subs	r2, r2, r3
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006a04:	6878      	ldr	r0, [r7, #4]
 8006a06:	f7ff ff99 	bl	800693c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	61fb      	str	r3, [r7, #28]
 8006a0e:	e004      	b.n	8006a1a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	2200      	movs	r2, #0
 8006a14:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006a16:	2301      	movs	r3, #1
 8006a18:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006a1a:	f000 ff97 	bl	800794c <vPortExitCritical>

	return xReturn;
 8006a1e:	69fb      	ldr	r3, [r7, #28]
}
 8006a20:	4618      	mov	r0, r3
 8006a22:	3720      	adds	r7, #32
 8006a24:	46bd      	mov	sp, r7
 8006a26:	bd80      	pop	{r7, pc}
 8006a28:	20000da0 	.word	0x20000da0
 8006a2c:	20000db4 	.word	0x20000db4

08006a30 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006a30:	b480      	push	{r7}
 8006a32:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006a34:	4b03      	ldr	r3, [pc, #12]	@ (8006a44 <vTaskMissedYield+0x14>)
 8006a36:	2201      	movs	r2, #1
 8006a38:	601a      	str	r2, [r3, #0]
}
 8006a3a:	bf00      	nop
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a42:	4770      	bx	lr
 8006a44:	20000db0 	.word	0x20000db0

08006a48 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b082      	sub	sp, #8
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006a50:	f000 f852 	bl	8006af8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006a54:	4b06      	ldr	r3, [pc, #24]	@ (8006a70 <prvIdleTask+0x28>)
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	2b01      	cmp	r3, #1
 8006a5a:	d9f9      	bls.n	8006a50 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006a5c:	4b05      	ldr	r3, [pc, #20]	@ (8006a74 <prvIdleTask+0x2c>)
 8006a5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006a62:	601a      	str	r2, [r3, #0]
 8006a64:	f3bf 8f4f 	dsb	sy
 8006a68:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006a6c:	e7f0      	b.n	8006a50 <prvIdleTask+0x8>
 8006a6e:	bf00      	nop
 8006a70:	200008cc 	.word	0x200008cc
 8006a74:	e000ed04 	.word	0xe000ed04

08006a78 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b082      	sub	sp, #8
 8006a7c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006a7e:	2300      	movs	r3, #0
 8006a80:	607b      	str	r3, [r7, #4]
 8006a82:	e00c      	b.n	8006a9e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006a84:	687a      	ldr	r2, [r7, #4]
 8006a86:	4613      	mov	r3, r2
 8006a88:	009b      	lsls	r3, r3, #2
 8006a8a:	4413      	add	r3, r2
 8006a8c:	009b      	lsls	r3, r3, #2
 8006a8e:	4a12      	ldr	r2, [pc, #72]	@ (8006ad8 <prvInitialiseTaskLists+0x60>)
 8006a90:	4413      	add	r3, r2
 8006a92:	4618      	mov	r0, r3
 8006a94:	f7fe faba 	bl	800500c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	3301      	adds	r3, #1
 8006a9c:	607b      	str	r3, [r7, #4]
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	2b37      	cmp	r3, #55	@ 0x37
 8006aa2:	d9ef      	bls.n	8006a84 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006aa4:	480d      	ldr	r0, [pc, #52]	@ (8006adc <prvInitialiseTaskLists+0x64>)
 8006aa6:	f7fe fab1 	bl	800500c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006aaa:	480d      	ldr	r0, [pc, #52]	@ (8006ae0 <prvInitialiseTaskLists+0x68>)
 8006aac:	f7fe faae 	bl	800500c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006ab0:	480c      	ldr	r0, [pc, #48]	@ (8006ae4 <prvInitialiseTaskLists+0x6c>)
 8006ab2:	f7fe faab 	bl	800500c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006ab6:	480c      	ldr	r0, [pc, #48]	@ (8006ae8 <prvInitialiseTaskLists+0x70>)
 8006ab8:	f7fe faa8 	bl	800500c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006abc:	480b      	ldr	r0, [pc, #44]	@ (8006aec <prvInitialiseTaskLists+0x74>)
 8006abe:	f7fe faa5 	bl	800500c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006ac2:	4b0b      	ldr	r3, [pc, #44]	@ (8006af0 <prvInitialiseTaskLists+0x78>)
 8006ac4:	4a05      	ldr	r2, [pc, #20]	@ (8006adc <prvInitialiseTaskLists+0x64>)
 8006ac6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006ac8:	4b0a      	ldr	r3, [pc, #40]	@ (8006af4 <prvInitialiseTaskLists+0x7c>)
 8006aca:	4a05      	ldr	r2, [pc, #20]	@ (8006ae0 <prvInitialiseTaskLists+0x68>)
 8006acc:	601a      	str	r2, [r3, #0]
}
 8006ace:	bf00      	nop
 8006ad0:	3708      	adds	r7, #8
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	bd80      	pop	{r7, pc}
 8006ad6:	bf00      	nop
 8006ad8:	200008cc 	.word	0x200008cc
 8006adc:	20000d2c 	.word	0x20000d2c
 8006ae0:	20000d40 	.word	0x20000d40
 8006ae4:	20000d5c 	.word	0x20000d5c
 8006ae8:	20000d70 	.word	0x20000d70
 8006aec:	20000d88 	.word	0x20000d88
 8006af0:	20000d54 	.word	0x20000d54
 8006af4:	20000d58 	.word	0x20000d58

08006af8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b082      	sub	sp, #8
 8006afc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006afe:	e019      	b.n	8006b34 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006b00:	f000 fef2 	bl	80078e8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b04:	4b10      	ldr	r3, [pc, #64]	@ (8006b48 <prvCheckTasksWaitingTermination+0x50>)
 8006b06:	68db      	ldr	r3, [r3, #12]
 8006b08:	68db      	ldr	r3, [r3, #12]
 8006b0a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	3304      	adds	r3, #4
 8006b10:	4618      	mov	r0, r3
 8006b12:	f7fe fb05 	bl	8005120 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006b16:	4b0d      	ldr	r3, [pc, #52]	@ (8006b4c <prvCheckTasksWaitingTermination+0x54>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	3b01      	subs	r3, #1
 8006b1c:	4a0b      	ldr	r2, [pc, #44]	@ (8006b4c <prvCheckTasksWaitingTermination+0x54>)
 8006b1e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006b20:	4b0b      	ldr	r3, [pc, #44]	@ (8006b50 <prvCheckTasksWaitingTermination+0x58>)
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	3b01      	subs	r3, #1
 8006b26:	4a0a      	ldr	r2, [pc, #40]	@ (8006b50 <prvCheckTasksWaitingTermination+0x58>)
 8006b28:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006b2a:	f000 ff0f 	bl	800794c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006b2e:	6878      	ldr	r0, [r7, #4]
 8006b30:	f000 f810 	bl	8006b54 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006b34:	4b06      	ldr	r3, [pc, #24]	@ (8006b50 <prvCheckTasksWaitingTermination+0x58>)
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d1e1      	bne.n	8006b00 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006b3c:	bf00      	nop
 8006b3e:	bf00      	nop
 8006b40:	3708      	adds	r7, #8
 8006b42:	46bd      	mov	sp, r7
 8006b44:	bd80      	pop	{r7, pc}
 8006b46:	bf00      	nop
 8006b48:	20000d70 	.word	0x20000d70
 8006b4c:	20000d9c 	.word	0x20000d9c
 8006b50:	20000d84 	.word	0x20000d84

08006b54 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b084      	sub	sp, #16
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d108      	bne.n	8006b78 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	f001 f8ac 	bl	8007cc8 <vPortFree>
				vPortFree( pxTCB );
 8006b70:	6878      	ldr	r0, [r7, #4]
 8006b72:	f001 f8a9 	bl	8007cc8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006b76:	e019      	b.n	8006bac <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8006b7e:	2b01      	cmp	r3, #1
 8006b80:	d103      	bne.n	8006b8a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006b82:	6878      	ldr	r0, [r7, #4]
 8006b84:	f001 f8a0 	bl	8007cc8 <vPortFree>
	}
 8006b88:	e010      	b.n	8006bac <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8006b90:	2b02      	cmp	r3, #2
 8006b92:	d00b      	beq.n	8006bac <prvDeleteTCB+0x58>
	__asm volatile
 8006b94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b98:	f383 8811 	msr	BASEPRI, r3
 8006b9c:	f3bf 8f6f 	isb	sy
 8006ba0:	f3bf 8f4f 	dsb	sy
 8006ba4:	60fb      	str	r3, [r7, #12]
}
 8006ba6:	bf00      	nop
 8006ba8:	bf00      	nop
 8006baa:	e7fd      	b.n	8006ba8 <prvDeleteTCB+0x54>
	}
 8006bac:	bf00      	nop
 8006bae:	3710      	adds	r7, #16
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	bd80      	pop	{r7, pc}

08006bb4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006bb4:	b480      	push	{r7}
 8006bb6:	b083      	sub	sp, #12
 8006bb8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006bba:	4b0c      	ldr	r3, [pc, #48]	@ (8006bec <prvResetNextTaskUnblockTime+0x38>)
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d104      	bne.n	8006bce <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006bc4:	4b0a      	ldr	r3, [pc, #40]	@ (8006bf0 <prvResetNextTaskUnblockTime+0x3c>)
 8006bc6:	f04f 32ff 	mov.w	r2, #4294967295
 8006bca:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006bcc:	e008      	b.n	8006be0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006bce:	4b07      	ldr	r3, [pc, #28]	@ (8006bec <prvResetNextTaskUnblockTime+0x38>)
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	68db      	ldr	r3, [r3, #12]
 8006bd4:	68db      	ldr	r3, [r3, #12]
 8006bd6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	685b      	ldr	r3, [r3, #4]
 8006bdc:	4a04      	ldr	r2, [pc, #16]	@ (8006bf0 <prvResetNextTaskUnblockTime+0x3c>)
 8006bde:	6013      	str	r3, [r2, #0]
}
 8006be0:	bf00      	nop
 8006be2:	370c      	adds	r7, #12
 8006be4:	46bd      	mov	sp, r7
 8006be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bea:	4770      	bx	lr
 8006bec:	20000d54 	.word	0x20000d54
 8006bf0:	20000dbc 	.word	0x20000dbc

08006bf4 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8006bf4:	b480      	push	{r7}
 8006bf6:	b083      	sub	sp, #12
 8006bf8:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8006bfa:	4b05      	ldr	r3, [pc, #20]	@ (8006c10 <xTaskGetCurrentTaskHandle+0x1c>)
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	607b      	str	r3, [r7, #4]

		return xReturn;
 8006c00:	687b      	ldr	r3, [r7, #4]
	}
 8006c02:	4618      	mov	r0, r3
 8006c04:	370c      	adds	r7, #12
 8006c06:	46bd      	mov	sp, r7
 8006c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0c:	4770      	bx	lr
 8006c0e:	bf00      	nop
 8006c10:	200008c8 	.word	0x200008c8

08006c14 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006c14:	b480      	push	{r7}
 8006c16:	b083      	sub	sp, #12
 8006c18:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006c1a:	4b0b      	ldr	r3, [pc, #44]	@ (8006c48 <xTaskGetSchedulerState+0x34>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d102      	bne.n	8006c28 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006c22:	2301      	movs	r3, #1
 8006c24:	607b      	str	r3, [r7, #4]
 8006c26:	e008      	b.n	8006c3a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006c28:	4b08      	ldr	r3, [pc, #32]	@ (8006c4c <xTaskGetSchedulerState+0x38>)
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d102      	bne.n	8006c36 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006c30:	2302      	movs	r3, #2
 8006c32:	607b      	str	r3, [r7, #4]
 8006c34:	e001      	b.n	8006c3a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006c36:	2300      	movs	r3, #0
 8006c38:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006c3a:	687b      	ldr	r3, [r7, #4]
	}
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	370c      	adds	r7, #12
 8006c40:	46bd      	mov	sp, r7
 8006c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c46:	4770      	bx	lr
 8006c48:	20000da8 	.word	0x20000da8
 8006c4c:	20000dc4 	.word	0x20000dc4

08006c50 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b084      	sub	sp, #16
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d051      	beq.n	8006d0a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006c66:	68bb      	ldr	r3, [r7, #8]
 8006c68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c6a:	4b2a      	ldr	r3, [pc, #168]	@ (8006d14 <xTaskPriorityInherit+0xc4>)
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c70:	429a      	cmp	r2, r3
 8006c72:	d241      	bcs.n	8006cf8 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006c74:	68bb      	ldr	r3, [r7, #8]
 8006c76:	699b      	ldr	r3, [r3, #24]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	db06      	blt.n	8006c8a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c7c:	4b25      	ldr	r3, [pc, #148]	@ (8006d14 <xTaskPriorityInherit+0xc4>)
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c82:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006c86:	68bb      	ldr	r3, [r7, #8]
 8006c88:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006c8a:	68bb      	ldr	r3, [r7, #8]
 8006c8c:	6959      	ldr	r1, [r3, #20]
 8006c8e:	68bb      	ldr	r3, [r7, #8]
 8006c90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c92:	4613      	mov	r3, r2
 8006c94:	009b      	lsls	r3, r3, #2
 8006c96:	4413      	add	r3, r2
 8006c98:	009b      	lsls	r3, r3, #2
 8006c9a:	4a1f      	ldr	r2, [pc, #124]	@ (8006d18 <xTaskPriorityInherit+0xc8>)
 8006c9c:	4413      	add	r3, r2
 8006c9e:	4299      	cmp	r1, r3
 8006ca0:	d122      	bne.n	8006ce8 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006ca2:	68bb      	ldr	r3, [r7, #8]
 8006ca4:	3304      	adds	r3, #4
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	f7fe fa3a 	bl	8005120 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006cac:	4b19      	ldr	r3, [pc, #100]	@ (8006d14 <xTaskPriorityInherit+0xc4>)
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006cb2:	68bb      	ldr	r3, [r7, #8]
 8006cb4:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006cb6:	68bb      	ldr	r3, [r7, #8]
 8006cb8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006cba:	4b18      	ldr	r3, [pc, #96]	@ (8006d1c <xTaskPriorityInherit+0xcc>)
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	429a      	cmp	r2, r3
 8006cc0:	d903      	bls.n	8006cca <xTaskPriorityInherit+0x7a>
 8006cc2:	68bb      	ldr	r3, [r7, #8]
 8006cc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cc6:	4a15      	ldr	r2, [pc, #84]	@ (8006d1c <xTaskPriorityInherit+0xcc>)
 8006cc8:	6013      	str	r3, [r2, #0]
 8006cca:	68bb      	ldr	r3, [r7, #8]
 8006ccc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006cce:	4613      	mov	r3, r2
 8006cd0:	009b      	lsls	r3, r3, #2
 8006cd2:	4413      	add	r3, r2
 8006cd4:	009b      	lsls	r3, r3, #2
 8006cd6:	4a10      	ldr	r2, [pc, #64]	@ (8006d18 <xTaskPriorityInherit+0xc8>)
 8006cd8:	441a      	add	r2, r3
 8006cda:	68bb      	ldr	r3, [r7, #8]
 8006cdc:	3304      	adds	r3, #4
 8006cde:	4619      	mov	r1, r3
 8006ce0:	4610      	mov	r0, r2
 8006ce2:	f7fe f9c0 	bl	8005066 <vListInsertEnd>
 8006ce6:	e004      	b.n	8006cf2 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006ce8:	4b0a      	ldr	r3, [pc, #40]	@ (8006d14 <xTaskPriorityInherit+0xc4>)
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006cee:	68bb      	ldr	r3, [r7, #8]
 8006cf0:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006cf2:	2301      	movs	r3, #1
 8006cf4:	60fb      	str	r3, [r7, #12]
 8006cf6:	e008      	b.n	8006d0a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006cf8:	68bb      	ldr	r3, [r7, #8]
 8006cfa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006cfc:	4b05      	ldr	r3, [pc, #20]	@ (8006d14 <xTaskPriorityInherit+0xc4>)
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d02:	429a      	cmp	r2, r3
 8006d04:	d201      	bcs.n	8006d0a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006d06:	2301      	movs	r3, #1
 8006d08:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
	}
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	3710      	adds	r7, #16
 8006d10:	46bd      	mov	sp, r7
 8006d12:	bd80      	pop	{r7, pc}
 8006d14:	200008c8 	.word	0x200008c8
 8006d18:	200008cc 	.word	0x200008cc
 8006d1c:	20000da4 	.word	0x20000da4

08006d20 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b086      	sub	sp, #24
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d058      	beq.n	8006de8 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006d36:	4b2f      	ldr	r3, [pc, #188]	@ (8006df4 <xTaskPriorityDisinherit+0xd4>)
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	693a      	ldr	r2, [r7, #16]
 8006d3c:	429a      	cmp	r2, r3
 8006d3e:	d00b      	beq.n	8006d58 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8006d40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d44:	f383 8811 	msr	BASEPRI, r3
 8006d48:	f3bf 8f6f 	isb	sy
 8006d4c:	f3bf 8f4f 	dsb	sy
 8006d50:	60fb      	str	r3, [r7, #12]
}
 8006d52:	bf00      	nop
 8006d54:	bf00      	nop
 8006d56:	e7fd      	b.n	8006d54 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006d58:	693b      	ldr	r3, [r7, #16]
 8006d5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d10b      	bne.n	8006d78 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8006d60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d64:	f383 8811 	msr	BASEPRI, r3
 8006d68:	f3bf 8f6f 	isb	sy
 8006d6c:	f3bf 8f4f 	dsb	sy
 8006d70:	60bb      	str	r3, [r7, #8]
}
 8006d72:	bf00      	nop
 8006d74:	bf00      	nop
 8006d76:	e7fd      	b.n	8006d74 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8006d78:	693b      	ldr	r3, [r7, #16]
 8006d7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d7c:	1e5a      	subs	r2, r3, #1
 8006d7e:	693b      	ldr	r3, [r7, #16]
 8006d80:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006d82:	693b      	ldr	r3, [r7, #16]
 8006d84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d86:	693b      	ldr	r3, [r7, #16]
 8006d88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d8a:	429a      	cmp	r2, r3
 8006d8c:	d02c      	beq.n	8006de8 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006d8e:	693b      	ldr	r3, [r7, #16]
 8006d90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d128      	bne.n	8006de8 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006d96:	693b      	ldr	r3, [r7, #16]
 8006d98:	3304      	adds	r3, #4
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	f7fe f9c0 	bl	8005120 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006da0:	693b      	ldr	r3, [r7, #16]
 8006da2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006da4:	693b      	ldr	r3, [r7, #16]
 8006da6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006da8:	693b      	ldr	r3, [r7, #16]
 8006daa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dac:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006db0:	693b      	ldr	r3, [r7, #16]
 8006db2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006db4:	693b      	ldr	r3, [r7, #16]
 8006db6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006db8:	4b0f      	ldr	r3, [pc, #60]	@ (8006df8 <xTaskPriorityDisinherit+0xd8>)
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	429a      	cmp	r2, r3
 8006dbe:	d903      	bls.n	8006dc8 <xTaskPriorityDisinherit+0xa8>
 8006dc0:	693b      	ldr	r3, [r7, #16]
 8006dc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dc4:	4a0c      	ldr	r2, [pc, #48]	@ (8006df8 <xTaskPriorityDisinherit+0xd8>)
 8006dc6:	6013      	str	r3, [r2, #0]
 8006dc8:	693b      	ldr	r3, [r7, #16]
 8006dca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006dcc:	4613      	mov	r3, r2
 8006dce:	009b      	lsls	r3, r3, #2
 8006dd0:	4413      	add	r3, r2
 8006dd2:	009b      	lsls	r3, r3, #2
 8006dd4:	4a09      	ldr	r2, [pc, #36]	@ (8006dfc <xTaskPriorityDisinherit+0xdc>)
 8006dd6:	441a      	add	r2, r3
 8006dd8:	693b      	ldr	r3, [r7, #16]
 8006dda:	3304      	adds	r3, #4
 8006ddc:	4619      	mov	r1, r3
 8006dde:	4610      	mov	r0, r2
 8006de0:	f7fe f941 	bl	8005066 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006de4:	2301      	movs	r3, #1
 8006de6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006de8:	697b      	ldr	r3, [r7, #20]
	}
 8006dea:	4618      	mov	r0, r3
 8006dec:	3718      	adds	r7, #24
 8006dee:	46bd      	mov	sp, r7
 8006df0:	bd80      	pop	{r7, pc}
 8006df2:	bf00      	nop
 8006df4:	200008c8 	.word	0x200008c8
 8006df8:	20000da4 	.word	0x20000da4
 8006dfc:	200008cc 	.word	0x200008cc

08006e00 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b088      	sub	sp, #32
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
 8006e08:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8006e0e:	2301      	movs	r3, #1
 8006e10:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d06c      	beq.n	8006ef2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006e18:	69bb      	ldr	r3, [r7, #24]
 8006e1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d10b      	bne.n	8006e38 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8006e20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e24:	f383 8811 	msr	BASEPRI, r3
 8006e28:	f3bf 8f6f 	isb	sy
 8006e2c:	f3bf 8f4f 	dsb	sy
 8006e30:	60fb      	str	r3, [r7, #12]
}
 8006e32:	bf00      	nop
 8006e34:	bf00      	nop
 8006e36:	e7fd      	b.n	8006e34 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006e38:	69bb      	ldr	r3, [r7, #24]
 8006e3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006e3c:	683a      	ldr	r2, [r7, #0]
 8006e3e:	429a      	cmp	r2, r3
 8006e40:	d902      	bls.n	8006e48 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	61fb      	str	r3, [r7, #28]
 8006e46:	e002      	b.n	8006e4e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006e48:	69bb      	ldr	r3, [r7, #24]
 8006e4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006e4c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006e4e:	69bb      	ldr	r3, [r7, #24]
 8006e50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e52:	69fa      	ldr	r2, [r7, #28]
 8006e54:	429a      	cmp	r2, r3
 8006e56:	d04c      	beq.n	8006ef2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006e58:	69bb      	ldr	r3, [r7, #24]
 8006e5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e5c:	697a      	ldr	r2, [r7, #20]
 8006e5e:	429a      	cmp	r2, r3
 8006e60:	d147      	bne.n	8006ef2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8006e62:	4b26      	ldr	r3, [pc, #152]	@ (8006efc <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	69ba      	ldr	r2, [r7, #24]
 8006e68:	429a      	cmp	r2, r3
 8006e6a:	d10b      	bne.n	8006e84 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8006e6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e70:	f383 8811 	msr	BASEPRI, r3
 8006e74:	f3bf 8f6f 	isb	sy
 8006e78:	f3bf 8f4f 	dsb	sy
 8006e7c:	60bb      	str	r3, [r7, #8]
}
 8006e7e:	bf00      	nop
 8006e80:	bf00      	nop
 8006e82:	e7fd      	b.n	8006e80 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006e84:	69bb      	ldr	r3, [r7, #24]
 8006e86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e88:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8006e8a:	69bb      	ldr	r3, [r7, #24]
 8006e8c:	69fa      	ldr	r2, [r7, #28]
 8006e8e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006e90:	69bb      	ldr	r3, [r7, #24]
 8006e92:	699b      	ldr	r3, [r3, #24]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	db04      	blt.n	8006ea2 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e98:	69fb      	ldr	r3, [r7, #28]
 8006e9a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006e9e:	69bb      	ldr	r3, [r7, #24]
 8006ea0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006ea2:	69bb      	ldr	r3, [r7, #24]
 8006ea4:	6959      	ldr	r1, [r3, #20]
 8006ea6:	693a      	ldr	r2, [r7, #16]
 8006ea8:	4613      	mov	r3, r2
 8006eaa:	009b      	lsls	r3, r3, #2
 8006eac:	4413      	add	r3, r2
 8006eae:	009b      	lsls	r3, r3, #2
 8006eb0:	4a13      	ldr	r2, [pc, #76]	@ (8006f00 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8006eb2:	4413      	add	r3, r2
 8006eb4:	4299      	cmp	r1, r3
 8006eb6:	d11c      	bne.n	8006ef2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006eb8:	69bb      	ldr	r3, [r7, #24]
 8006eba:	3304      	adds	r3, #4
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	f7fe f92f 	bl	8005120 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8006ec2:	69bb      	ldr	r3, [r7, #24]
 8006ec4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ec6:	4b0f      	ldr	r3, [pc, #60]	@ (8006f04 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	429a      	cmp	r2, r3
 8006ecc:	d903      	bls.n	8006ed6 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8006ece:	69bb      	ldr	r3, [r7, #24]
 8006ed0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ed2:	4a0c      	ldr	r2, [pc, #48]	@ (8006f04 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8006ed4:	6013      	str	r3, [r2, #0]
 8006ed6:	69bb      	ldr	r3, [r7, #24]
 8006ed8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006eda:	4613      	mov	r3, r2
 8006edc:	009b      	lsls	r3, r3, #2
 8006ede:	4413      	add	r3, r2
 8006ee0:	009b      	lsls	r3, r3, #2
 8006ee2:	4a07      	ldr	r2, [pc, #28]	@ (8006f00 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8006ee4:	441a      	add	r2, r3
 8006ee6:	69bb      	ldr	r3, [r7, #24]
 8006ee8:	3304      	adds	r3, #4
 8006eea:	4619      	mov	r1, r3
 8006eec:	4610      	mov	r0, r2
 8006eee:	f7fe f8ba 	bl	8005066 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006ef2:	bf00      	nop
 8006ef4:	3720      	adds	r7, #32
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	bd80      	pop	{r7, pc}
 8006efa:	bf00      	nop
 8006efc:	200008c8 	.word	0x200008c8
 8006f00:	200008cc 	.word	0x200008cc
 8006f04:	20000da4 	.word	0x20000da4

08006f08 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8006f08:	b480      	push	{r7}
 8006f0a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006f0c:	4b07      	ldr	r3, [pc, #28]	@ (8006f2c <pvTaskIncrementMutexHeldCount+0x24>)
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d004      	beq.n	8006f1e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006f14:	4b05      	ldr	r3, [pc, #20]	@ (8006f2c <pvTaskIncrementMutexHeldCount+0x24>)
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006f1a:	3201      	adds	r2, #1
 8006f1c:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8006f1e:	4b03      	ldr	r3, [pc, #12]	@ (8006f2c <pvTaskIncrementMutexHeldCount+0x24>)
 8006f20:	681b      	ldr	r3, [r3, #0]
	}
 8006f22:	4618      	mov	r0, r3
 8006f24:	46bd      	mov	sp, r7
 8006f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2a:	4770      	bx	lr
 8006f2c:	200008c8 	.word	0x200008c8

08006f30 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b084      	sub	sp, #16
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
 8006f38:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006f3a:	4b21      	ldr	r3, [pc, #132]	@ (8006fc0 <prvAddCurrentTaskToDelayedList+0x90>)
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006f40:	4b20      	ldr	r3, [pc, #128]	@ (8006fc4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	3304      	adds	r3, #4
 8006f46:	4618      	mov	r0, r3
 8006f48:	f7fe f8ea 	bl	8005120 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f52:	d10a      	bne.n	8006f6a <prvAddCurrentTaskToDelayedList+0x3a>
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d007      	beq.n	8006f6a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006f5a:	4b1a      	ldr	r3, [pc, #104]	@ (8006fc4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	3304      	adds	r3, #4
 8006f60:	4619      	mov	r1, r3
 8006f62:	4819      	ldr	r0, [pc, #100]	@ (8006fc8 <prvAddCurrentTaskToDelayedList+0x98>)
 8006f64:	f7fe f87f 	bl	8005066 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006f68:	e026      	b.n	8006fb8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006f6a:	68fa      	ldr	r2, [r7, #12]
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	4413      	add	r3, r2
 8006f70:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006f72:	4b14      	ldr	r3, [pc, #80]	@ (8006fc4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	68ba      	ldr	r2, [r7, #8]
 8006f78:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006f7a:	68ba      	ldr	r2, [r7, #8]
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	429a      	cmp	r2, r3
 8006f80:	d209      	bcs.n	8006f96 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006f82:	4b12      	ldr	r3, [pc, #72]	@ (8006fcc <prvAddCurrentTaskToDelayedList+0x9c>)
 8006f84:	681a      	ldr	r2, [r3, #0]
 8006f86:	4b0f      	ldr	r3, [pc, #60]	@ (8006fc4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	3304      	adds	r3, #4
 8006f8c:	4619      	mov	r1, r3
 8006f8e:	4610      	mov	r0, r2
 8006f90:	f7fe f88d 	bl	80050ae <vListInsert>
}
 8006f94:	e010      	b.n	8006fb8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006f96:	4b0e      	ldr	r3, [pc, #56]	@ (8006fd0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006f98:	681a      	ldr	r2, [r3, #0]
 8006f9a:	4b0a      	ldr	r3, [pc, #40]	@ (8006fc4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	3304      	adds	r3, #4
 8006fa0:	4619      	mov	r1, r3
 8006fa2:	4610      	mov	r0, r2
 8006fa4:	f7fe f883 	bl	80050ae <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006fa8:	4b0a      	ldr	r3, [pc, #40]	@ (8006fd4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	68ba      	ldr	r2, [r7, #8]
 8006fae:	429a      	cmp	r2, r3
 8006fb0:	d202      	bcs.n	8006fb8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006fb2:	4a08      	ldr	r2, [pc, #32]	@ (8006fd4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006fb4:	68bb      	ldr	r3, [r7, #8]
 8006fb6:	6013      	str	r3, [r2, #0]
}
 8006fb8:	bf00      	nop
 8006fba:	3710      	adds	r7, #16
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	bd80      	pop	{r7, pc}
 8006fc0:	20000da0 	.word	0x20000da0
 8006fc4:	200008c8 	.word	0x200008c8
 8006fc8:	20000d88 	.word	0x20000d88
 8006fcc:	20000d58 	.word	0x20000d58
 8006fd0:	20000d54 	.word	0x20000d54
 8006fd4:	20000dbc 	.word	0x20000dbc

08006fd8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b08a      	sub	sp, #40	@ 0x28
 8006fdc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006fde:	2300      	movs	r3, #0
 8006fe0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006fe2:	f000 fb13 	bl	800760c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006fe6:	4b1d      	ldr	r3, [pc, #116]	@ (800705c <xTimerCreateTimerTask+0x84>)
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d021      	beq.n	8007032 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006fee:	2300      	movs	r3, #0
 8006ff0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006ff6:	1d3a      	adds	r2, r7, #4
 8006ff8:	f107 0108 	add.w	r1, r7, #8
 8006ffc:	f107 030c 	add.w	r3, r7, #12
 8007000:	4618      	mov	r0, r3
 8007002:	f7fd ffe9 	bl	8004fd8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007006:	6879      	ldr	r1, [r7, #4]
 8007008:	68bb      	ldr	r3, [r7, #8]
 800700a:	68fa      	ldr	r2, [r7, #12]
 800700c:	9202      	str	r2, [sp, #8]
 800700e:	9301      	str	r3, [sp, #4]
 8007010:	2302      	movs	r3, #2
 8007012:	9300      	str	r3, [sp, #0]
 8007014:	2300      	movs	r3, #0
 8007016:	460a      	mov	r2, r1
 8007018:	4911      	ldr	r1, [pc, #68]	@ (8007060 <xTimerCreateTimerTask+0x88>)
 800701a:	4812      	ldr	r0, [pc, #72]	@ (8007064 <xTimerCreateTimerTask+0x8c>)
 800701c:	f7fe ffc0 	bl	8005fa0 <xTaskCreateStatic>
 8007020:	4603      	mov	r3, r0
 8007022:	4a11      	ldr	r2, [pc, #68]	@ (8007068 <xTimerCreateTimerTask+0x90>)
 8007024:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007026:	4b10      	ldr	r3, [pc, #64]	@ (8007068 <xTimerCreateTimerTask+0x90>)
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d001      	beq.n	8007032 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800702e:	2301      	movs	r3, #1
 8007030:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007032:	697b      	ldr	r3, [r7, #20]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d10b      	bne.n	8007050 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8007038:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800703c:	f383 8811 	msr	BASEPRI, r3
 8007040:	f3bf 8f6f 	isb	sy
 8007044:	f3bf 8f4f 	dsb	sy
 8007048:	613b      	str	r3, [r7, #16]
}
 800704a:	bf00      	nop
 800704c:	bf00      	nop
 800704e:	e7fd      	b.n	800704c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007050:	697b      	ldr	r3, [r7, #20]
}
 8007052:	4618      	mov	r0, r3
 8007054:	3718      	adds	r7, #24
 8007056:	46bd      	mov	sp, r7
 8007058:	bd80      	pop	{r7, pc}
 800705a:	bf00      	nop
 800705c:	20000df8 	.word	0x20000df8
 8007060:	08007fc0 	.word	0x08007fc0
 8007064:	080071a5 	.word	0x080071a5
 8007068:	20000dfc 	.word	0x20000dfc

0800706c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b08a      	sub	sp, #40	@ 0x28
 8007070:	af00      	add	r7, sp, #0
 8007072:	60f8      	str	r0, [r7, #12]
 8007074:	60b9      	str	r1, [r7, #8]
 8007076:	607a      	str	r2, [r7, #4]
 8007078:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800707a:	2300      	movs	r3, #0
 800707c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d10b      	bne.n	800709c <xTimerGenericCommand+0x30>
	__asm volatile
 8007084:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007088:	f383 8811 	msr	BASEPRI, r3
 800708c:	f3bf 8f6f 	isb	sy
 8007090:	f3bf 8f4f 	dsb	sy
 8007094:	623b      	str	r3, [r7, #32]
}
 8007096:	bf00      	nop
 8007098:	bf00      	nop
 800709a:	e7fd      	b.n	8007098 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800709c:	4b19      	ldr	r3, [pc, #100]	@ (8007104 <xTimerGenericCommand+0x98>)
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d02a      	beq.n	80070fa <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80070a4:	68bb      	ldr	r3, [r7, #8]
 80070a6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80070b0:	68bb      	ldr	r3, [r7, #8]
 80070b2:	2b05      	cmp	r3, #5
 80070b4:	dc18      	bgt.n	80070e8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80070b6:	f7ff fdad 	bl	8006c14 <xTaskGetSchedulerState>
 80070ba:	4603      	mov	r3, r0
 80070bc:	2b02      	cmp	r3, #2
 80070be:	d109      	bne.n	80070d4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80070c0:	4b10      	ldr	r3, [pc, #64]	@ (8007104 <xTimerGenericCommand+0x98>)
 80070c2:	6818      	ldr	r0, [r3, #0]
 80070c4:	f107 0110 	add.w	r1, r7, #16
 80070c8:	2300      	movs	r3, #0
 80070ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80070cc:	f7fe fa50 	bl	8005570 <xQueueGenericSend>
 80070d0:	6278      	str	r0, [r7, #36]	@ 0x24
 80070d2:	e012      	b.n	80070fa <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80070d4:	4b0b      	ldr	r3, [pc, #44]	@ (8007104 <xTimerGenericCommand+0x98>)
 80070d6:	6818      	ldr	r0, [r3, #0]
 80070d8:	f107 0110 	add.w	r1, r7, #16
 80070dc:	2300      	movs	r3, #0
 80070de:	2200      	movs	r2, #0
 80070e0:	f7fe fa46 	bl	8005570 <xQueueGenericSend>
 80070e4:	6278      	str	r0, [r7, #36]	@ 0x24
 80070e6:	e008      	b.n	80070fa <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80070e8:	4b06      	ldr	r3, [pc, #24]	@ (8007104 <xTimerGenericCommand+0x98>)
 80070ea:	6818      	ldr	r0, [r3, #0]
 80070ec:	f107 0110 	add.w	r1, r7, #16
 80070f0:	2300      	movs	r3, #0
 80070f2:	683a      	ldr	r2, [r7, #0]
 80070f4:	f7fe fb3e 	bl	8005774 <xQueueGenericSendFromISR>
 80070f8:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80070fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80070fc:	4618      	mov	r0, r3
 80070fe:	3728      	adds	r7, #40	@ 0x28
 8007100:	46bd      	mov	sp, r7
 8007102:	bd80      	pop	{r7, pc}
 8007104:	20000df8 	.word	0x20000df8

08007108 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b088      	sub	sp, #32
 800710c:	af02      	add	r7, sp, #8
 800710e:	6078      	str	r0, [r7, #4]
 8007110:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007112:	4b23      	ldr	r3, [pc, #140]	@ (80071a0 <prvProcessExpiredTimer+0x98>)
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	68db      	ldr	r3, [r3, #12]
 8007118:	68db      	ldr	r3, [r3, #12]
 800711a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800711c:	697b      	ldr	r3, [r7, #20]
 800711e:	3304      	adds	r3, #4
 8007120:	4618      	mov	r0, r3
 8007122:	f7fd fffd 	bl	8005120 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007126:	697b      	ldr	r3, [r7, #20]
 8007128:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800712c:	f003 0304 	and.w	r3, r3, #4
 8007130:	2b00      	cmp	r3, #0
 8007132:	d023      	beq.n	800717c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007134:	697b      	ldr	r3, [r7, #20]
 8007136:	699a      	ldr	r2, [r3, #24]
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	18d1      	adds	r1, r2, r3
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	683a      	ldr	r2, [r7, #0]
 8007140:	6978      	ldr	r0, [r7, #20]
 8007142:	f000 f8d5 	bl	80072f0 <prvInsertTimerInActiveList>
 8007146:	4603      	mov	r3, r0
 8007148:	2b00      	cmp	r3, #0
 800714a:	d020      	beq.n	800718e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800714c:	2300      	movs	r3, #0
 800714e:	9300      	str	r3, [sp, #0]
 8007150:	2300      	movs	r3, #0
 8007152:	687a      	ldr	r2, [r7, #4]
 8007154:	2100      	movs	r1, #0
 8007156:	6978      	ldr	r0, [r7, #20]
 8007158:	f7ff ff88 	bl	800706c <xTimerGenericCommand>
 800715c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800715e:	693b      	ldr	r3, [r7, #16]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d114      	bne.n	800718e <prvProcessExpiredTimer+0x86>
	__asm volatile
 8007164:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007168:	f383 8811 	msr	BASEPRI, r3
 800716c:	f3bf 8f6f 	isb	sy
 8007170:	f3bf 8f4f 	dsb	sy
 8007174:	60fb      	str	r3, [r7, #12]
}
 8007176:	bf00      	nop
 8007178:	bf00      	nop
 800717a:	e7fd      	b.n	8007178 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800717c:	697b      	ldr	r3, [r7, #20]
 800717e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007182:	f023 0301 	bic.w	r3, r3, #1
 8007186:	b2da      	uxtb	r2, r3
 8007188:	697b      	ldr	r3, [r7, #20]
 800718a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800718e:	697b      	ldr	r3, [r7, #20]
 8007190:	6a1b      	ldr	r3, [r3, #32]
 8007192:	6978      	ldr	r0, [r7, #20]
 8007194:	4798      	blx	r3
}
 8007196:	bf00      	nop
 8007198:	3718      	adds	r7, #24
 800719a:	46bd      	mov	sp, r7
 800719c:	bd80      	pop	{r7, pc}
 800719e:	bf00      	nop
 80071a0:	20000df0 	.word	0x20000df0

080071a4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b084      	sub	sp, #16
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80071ac:	f107 0308 	add.w	r3, r7, #8
 80071b0:	4618      	mov	r0, r3
 80071b2:	f000 f859 	bl	8007268 <prvGetNextExpireTime>
 80071b6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80071b8:	68bb      	ldr	r3, [r7, #8]
 80071ba:	4619      	mov	r1, r3
 80071bc:	68f8      	ldr	r0, [r7, #12]
 80071be:	f000 f805 	bl	80071cc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80071c2:	f000 f8d7 	bl	8007374 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80071c6:	bf00      	nop
 80071c8:	e7f0      	b.n	80071ac <prvTimerTask+0x8>
	...

080071cc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b084      	sub	sp, #16
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
 80071d4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80071d6:	f7ff f927 	bl	8006428 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80071da:	f107 0308 	add.w	r3, r7, #8
 80071de:	4618      	mov	r0, r3
 80071e0:	f000 f866 	bl	80072b0 <prvSampleTimeNow>
 80071e4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80071e6:	68bb      	ldr	r3, [r7, #8]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d130      	bne.n	800724e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d10a      	bne.n	8007208 <prvProcessTimerOrBlockTask+0x3c>
 80071f2:	687a      	ldr	r2, [r7, #4]
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	429a      	cmp	r2, r3
 80071f8:	d806      	bhi.n	8007208 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80071fa:	f7ff f923 	bl	8006444 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80071fe:	68f9      	ldr	r1, [r7, #12]
 8007200:	6878      	ldr	r0, [r7, #4]
 8007202:	f7ff ff81 	bl	8007108 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007206:	e024      	b.n	8007252 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d008      	beq.n	8007220 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800720e:	4b13      	ldr	r3, [pc, #76]	@ (800725c <prvProcessTimerOrBlockTask+0x90>)
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d101      	bne.n	800721c <prvProcessTimerOrBlockTask+0x50>
 8007218:	2301      	movs	r3, #1
 800721a:	e000      	b.n	800721e <prvProcessTimerOrBlockTask+0x52>
 800721c:	2300      	movs	r3, #0
 800721e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007220:	4b0f      	ldr	r3, [pc, #60]	@ (8007260 <prvProcessTimerOrBlockTask+0x94>)
 8007222:	6818      	ldr	r0, [r3, #0]
 8007224:	687a      	ldr	r2, [r7, #4]
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	1ad3      	subs	r3, r2, r3
 800722a:	683a      	ldr	r2, [r7, #0]
 800722c:	4619      	mov	r1, r3
 800722e:	f7fe fe83 	bl	8005f38 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007232:	f7ff f907 	bl	8006444 <xTaskResumeAll>
 8007236:	4603      	mov	r3, r0
 8007238:	2b00      	cmp	r3, #0
 800723a:	d10a      	bne.n	8007252 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800723c:	4b09      	ldr	r3, [pc, #36]	@ (8007264 <prvProcessTimerOrBlockTask+0x98>)
 800723e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007242:	601a      	str	r2, [r3, #0]
 8007244:	f3bf 8f4f 	dsb	sy
 8007248:	f3bf 8f6f 	isb	sy
}
 800724c:	e001      	b.n	8007252 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800724e:	f7ff f8f9 	bl	8006444 <xTaskResumeAll>
}
 8007252:	bf00      	nop
 8007254:	3710      	adds	r7, #16
 8007256:	46bd      	mov	sp, r7
 8007258:	bd80      	pop	{r7, pc}
 800725a:	bf00      	nop
 800725c:	20000df4 	.word	0x20000df4
 8007260:	20000df8 	.word	0x20000df8
 8007264:	e000ed04 	.word	0xe000ed04

08007268 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007268:	b480      	push	{r7}
 800726a:	b085      	sub	sp, #20
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007270:	4b0e      	ldr	r3, [pc, #56]	@ (80072ac <prvGetNextExpireTime+0x44>)
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d101      	bne.n	800727e <prvGetNextExpireTime+0x16>
 800727a:	2201      	movs	r2, #1
 800727c:	e000      	b.n	8007280 <prvGetNextExpireTime+0x18>
 800727e:	2200      	movs	r2, #0
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d105      	bne.n	8007298 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800728c:	4b07      	ldr	r3, [pc, #28]	@ (80072ac <prvGetNextExpireTime+0x44>)
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	68db      	ldr	r3, [r3, #12]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	60fb      	str	r3, [r7, #12]
 8007296:	e001      	b.n	800729c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007298:	2300      	movs	r3, #0
 800729a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800729c:	68fb      	ldr	r3, [r7, #12]
}
 800729e:	4618      	mov	r0, r3
 80072a0:	3714      	adds	r7, #20
 80072a2:	46bd      	mov	sp, r7
 80072a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a8:	4770      	bx	lr
 80072aa:	bf00      	nop
 80072ac:	20000df0 	.word	0x20000df0

080072b0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b084      	sub	sp, #16
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80072b8:	f7ff f962 	bl	8006580 <xTaskGetTickCount>
 80072bc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80072be:	4b0b      	ldr	r3, [pc, #44]	@ (80072ec <prvSampleTimeNow+0x3c>)
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	68fa      	ldr	r2, [r7, #12]
 80072c4:	429a      	cmp	r2, r3
 80072c6:	d205      	bcs.n	80072d4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80072c8:	f000 f93a 	bl	8007540 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2201      	movs	r2, #1
 80072d0:	601a      	str	r2, [r3, #0]
 80072d2:	e002      	b.n	80072da <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2200      	movs	r2, #0
 80072d8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80072da:	4a04      	ldr	r2, [pc, #16]	@ (80072ec <prvSampleTimeNow+0x3c>)
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80072e0:	68fb      	ldr	r3, [r7, #12]
}
 80072e2:	4618      	mov	r0, r3
 80072e4:	3710      	adds	r7, #16
 80072e6:	46bd      	mov	sp, r7
 80072e8:	bd80      	pop	{r7, pc}
 80072ea:	bf00      	nop
 80072ec:	20000e00 	.word	0x20000e00

080072f0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b086      	sub	sp, #24
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	60f8      	str	r0, [r7, #12]
 80072f8:	60b9      	str	r1, [r7, #8]
 80072fa:	607a      	str	r2, [r7, #4]
 80072fc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80072fe:	2300      	movs	r3, #0
 8007300:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	68ba      	ldr	r2, [r7, #8]
 8007306:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	68fa      	ldr	r2, [r7, #12]
 800730c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800730e:	68ba      	ldr	r2, [r7, #8]
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	429a      	cmp	r2, r3
 8007314:	d812      	bhi.n	800733c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007316:	687a      	ldr	r2, [r7, #4]
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	1ad2      	subs	r2, r2, r3
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	699b      	ldr	r3, [r3, #24]
 8007320:	429a      	cmp	r2, r3
 8007322:	d302      	bcc.n	800732a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007324:	2301      	movs	r3, #1
 8007326:	617b      	str	r3, [r7, #20]
 8007328:	e01b      	b.n	8007362 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800732a:	4b10      	ldr	r3, [pc, #64]	@ (800736c <prvInsertTimerInActiveList+0x7c>)
 800732c:	681a      	ldr	r2, [r3, #0]
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	3304      	adds	r3, #4
 8007332:	4619      	mov	r1, r3
 8007334:	4610      	mov	r0, r2
 8007336:	f7fd feba 	bl	80050ae <vListInsert>
 800733a:	e012      	b.n	8007362 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800733c:	687a      	ldr	r2, [r7, #4]
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	429a      	cmp	r2, r3
 8007342:	d206      	bcs.n	8007352 <prvInsertTimerInActiveList+0x62>
 8007344:	68ba      	ldr	r2, [r7, #8]
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	429a      	cmp	r2, r3
 800734a:	d302      	bcc.n	8007352 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800734c:	2301      	movs	r3, #1
 800734e:	617b      	str	r3, [r7, #20]
 8007350:	e007      	b.n	8007362 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007352:	4b07      	ldr	r3, [pc, #28]	@ (8007370 <prvInsertTimerInActiveList+0x80>)
 8007354:	681a      	ldr	r2, [r3, #0]
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	3304      	adds	r3, #4
 800735a:	4619      	mov	r1, r3
 800735c:	4610      	mov	r0, r2
 800735e:	f7fd fea6 	bl	80050ae <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007362:	697b      	ldr	r3, [r7, #20]
}
 8007364:	4618      	mov	r0, r3
 8007366:	3718      	adds	r7, #24
 8007368:	46bd      	mov	sp, r7
 800736a:	bd80      	pop	{r7, pc}
 800736c:	20000df4 	.word	0x20000df4
 8007370:	20000df0 	.word	0x20000df0

08007374 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007374:	b580      	push	{r7, lr}
 8007376:	b08e      	sub	sp, #56	@ 0x38
 8007378:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800737a:	e0ce      	b.n	800751a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2b00      	cmp	r3, #0
 8007380:	da19      	bge.n	80073b6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007382:	1d3b      	adds	r3, r7, #4
 8007384:	3304      	adds	r3, #4
 8007386:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007388:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800738a:	2b00      	cmp	r3, #0
 800738c:	d10b      	bne.n	80073a6 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800738e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007392:	f383 8811 	msr	BASEPRI, r3
 8007396:	f3bf 8f6f 	isb	sy
 800739a:	f3bf 8f4f 	dsb	sy
 800739e:	61fb      	str	r3, [r7, #28]
}
 80073a0:	bf00      	nop
 80073a2:	bf00      	nop
 80073a4:	e7fd      	b.n	80073a2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80073a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80073ac:	6850      	ldr	r0, [r2, #4]
 80073ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80073b0:	6892      	ldr	r2, [r2, #8]
 80073b2:	4611      	mov	r1, r2
 80073b4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	f2c0 80ae 	blt.w	800751a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80073c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073c4:	695b      	ldr	r3, [r3, #20]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d004      	beq.n	80073d4 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80073ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073cc:	3304      	adds	r3, #4
 80073ce:	4618      	mov	r0, r3
 80073d0:	f7fd fea6 	bl	8005120 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80073d4:	463b      	mov	r3, r7
 80073d6:	4618      	mov	r0, r3
 80073d8:	f7ff ff6a 	bl	80072b0 <prvSampleTimeNow>
 80073dc:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	2b09      	cmp	r3, #9
 80073e2:	f200 8097 	bhi.w	8007514 <prvProcessReceivedCommands+0x1a0>
 80073e6:	a201      	add	r2, pc, #4	@ (adr r2, 80073ec <prvProcessReceivedCommands+0x78>)
 80073e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073ec:	08007415 	.word	0x08007415
 80073f0:	08007415 	.word	0x08007415
 80073f4:	08007415 	.word	0x08007415
 80073f8:	0800748b 	.word	0x0800748b
 80073fc:	0800749f 	.word	0x0800749f
 8007400:	080074eb 	.word	0x080074eb
 8007404:	08007415 	.word	0x08007415
 8007408:	08007415 	.word	0x08007415
 800740c:	0800748b 	.word	0x0800748b
 8007410:	0800749f 	.word	0x0800749f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007414:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007416:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800741a:	f043 0301 	orr.w	r3, r3, #1
 800741e:	b2da      	uxtb	r2, r3
 8007420:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007422:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007426:	68ba      	ldr	r2, [r7, #8]
 8007428:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800742a:	699b      	ldr	r3, [r3, #24]
 800742c:	18d1      	adds	r1, r2, r3
 800742e:	68bb      	ldr	r3, [r7, #8]
 8007430:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007432:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007434:	f7ff ff5c 	bl	80072f0 <prvInsertTimerInActiveList>
 8007438:	4603      	mov	r3, r0
 800743a:	2b00      	cmp	r3, #0
 800743c:	d06c      	beq.n	8007518 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800743e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007440:	6a1b      	ldr	r3, [r3, #32]
 8007442:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007444:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007446:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007448:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800744c:	f003 0304 	and.w	r3, r3, #4
 8007450:	2b00      	cmp	r3, #0
 8007452:	d061      	beq.n	8007518 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007454:	68ba      	ldr	r2, [r7, #8]
 8007456:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007458:	699b      	ldr	r3, [r3, #24]
 800745a:	441a      	add	r2, r3
 800745c:	2300      	movs	r3, #0
 800745e:	9300      	str	r3, [sp, #0]
 8007460:	2300      	movs	r3, #0
 8007462:	2100      	movs	r1, #0
 8007464:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007466:	f7ff fe01 	bl	800706c <xTimerGenericCommand>
 800746a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800746c:	6a3b      	ldr	r3, [r7, #32]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d152      	bne.n	8007518 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8007472:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007476:	f383 8811 	msr	BASEPRI, r3
 800747a:	f3bf 8f6f 	isb	sy
 800747e:	f3bf 8f4f 	dsb	sy
 8007482:	61bb      	str	r3, [r7, #24]
}
 8007484:	bf00      	nop
 8007486:	bf00      	nop
 8007488:	e7fd      	b.n	8007486 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800748a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800748c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007490:	f023 0301 	bic.w	r3, r3, #1
 8007494:	b2da      	uxtb	r2, r3
 8007496:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007498:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800749c:	e03d      	b.n	800751a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800749e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074a0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80074a4:	f043 0301 	orr.w	r3, r3, #1
 80074a8:	b2da      	uxtb	r2, r3
 80074aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074ac:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80074b0:	68ba      	ldr	r2, [r7, #8]
 80074b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074b4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80074b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074b8:	699b      	ldr	r3, [r3, #24]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d10b      	bne.n	80074d6 <prvProcessReceivedCommands+0x162>
	__asm volatile
 80074be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074c2:	f383 8811 	msr	BASEPRI, r3
 80074c6:	f3bf 8f6f 	isb	sy
 80074ca:	f3bf 8f4f 	dsb	sy
 80074ce:	617b      	str	r3, [r7, #20]
}
 80074d0:	bf00      	nop
 80074d2:	bf00      	nop
 80074d4:	e7fd      	b.n	80074d2 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80074d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074d8:	699a      	ldr	r2, [r3, #24]
 80074da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074dc:	18d1      	adds	r1, r2, r3
 80074de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80074e2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80074e4:	f7ff ff04 	bl	80072f0 <prvInsertTimerInActiveList>
					break;
 80074e8:	e017      	b.n	800751a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80074ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074ec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80074f0:	f003 0302 	and.w	r3, r3, #2
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d103      	bne.n	8007500 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80074f8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80074fa:	f000 fbe5 	bl	8007cc8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80074fe:	e00c      	b.n	800751a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007500:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007502:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007506:	f023 0301 	bic.w	r3, r3, #1
 800750a:	b2da      	uxtb	r2, r3
 800750c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800750e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007512:	e002      	b.n	800751a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8007514:	bf00      	nop
 8007516:	e000      	b.n	800751a <prvProcessReceivedCommands+0x1a6>
					break;
 8007518:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800751a:	4b08      	ldr	r3, [pc, #32]	@ (800753c <prvProcessReceivedCommands+0x1c8>)
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	1d39      	adds	r1, r7, #4
 8007520:	2200      	movs	r2, #0
 8007522:	4618      	mov	r0, r3
 8007524:	f7fe f9c4 	bl	80058b0 <xQueueReceive>
 8007528:	4603      	mov	r3, r0
 800752a:	2b00      	cmp	r3, #0
 800752c:	f47f af26 	bne.w	800737c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007530:	bf00      	nop
 8007532:	bf00      	nop
 8007534:	3730      	adds	r7, #48	@ 0x30
 8007536:	46bd      	mov	sp, r7
 8007538:	bd80      	pop	{r7, pc}
 800753a:	bf00      	nop
 800753c:	20000df8 	.word	0x20000df8

08007540 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007540:	b580      	push	{r7, lr}
 8007542:	b088      	sub	sp, #32
 8007544:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007546:	e049      	b.n	80075dc <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007548:	4b2e      	ldr	r3, [pc, #184]	@ (8007604 <prvSwitchTimerLists+0xc4>)
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	68db      	ldr	r3, [r3, #12]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007552:	4b2c      	ldr	r3, [pc, #176]	@ (8007604 <prvSwitchTimerLists+0xc4>)
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	68db      	ldr	r3, [r3, #12]
 8007558:	68db      	ldr	r3, [r3, #12]
 800755a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	3304      	adds	r3, #4
 8007560:	4618      	mov	r0, r3
 8007562:	f7fd fddd 	bl	8005120 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	6a1b      	ldr	r3, [r3, #32]
 800756a:	68f8      	ldr	r0, [r7, #12]
 800756c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007574:	f003 0304 	and.w	r3, r3, #4
 8007578:	2b00      	cmp	r3, #0
 800757a:	d02f      	beq.n	80075dc <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	699b      	ldr	r3, [r3, #24]
 8007580:	693a      	ldr	r2, [r7, #16]
 8007582:	4413      	add	r3, r2
 8007584:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007586:	68ba      	ldr	r2, [r7, #8]
 8007588:	693b      	ldr	r3, [r7, #16]
 800758a:	429a      	cmp	r2, r3
 800758c:	d90e      	bls.n	80075ac <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	68ba      	ldr	r2, [r7, #8]
 8007592:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	68fa      	ldr	r2, [r7, #12]
 8007598:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800759a:	4b1a      	ldr	r3, [pc, #104]	@ (8007604 <prvSwitchTimerLists+0xc4>)
 800759c:	681a      	ldr	r2, [r3, #0]
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	3304      	adds	r3, #4
 80075a2:	4619      	mov	r1, r3
 80075a4:	4610      	mov	r0, r2
 80075a6:	f7fd fd82 	bl	80050ae <vListInsert>
 80075aa:	e017      	b.n	80075dc <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80075ac:	2300      	movs	r3, #0
 80075ae:	9300      	str	r3, [sp, #0]
 80075b0:	2300      	movs	r3, #0
 80075b2:	693a      	ldr	r2, [r7, #16]
 80075b4:	2100      	movs	r1, #0
 80075b6:	68f8      	ldr	r0, [r7, #12]
 80075b8:	f7ff fd58 	bl	800706c <xTimerGenericCommand>
 80075bc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d10b      	bne.n	80075dc <prvSwitchTimerLists+0x9c>
	__asm volatile
 80075c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075c8:	f383 8811 	msr	BASEPRI, r3
 80075cc:	f3bf 8f6f 	isb	sy
 80075d0:	f3bf 8f4f 	dsb	sy
 80075d4:	603b      	str	r3, [r7, #0]
}
 80075d6:	bf00      	nop
 80075d8:	bf00      	nop
 80075da:	e7fd      	b.n	80075d8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80075dc:	4b09      	ldr	r3, [pc, #36]	@ (8007604 <prvSwitchTimerLists+0xc4>)
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d1b0      	bne.n	8007548 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80075e6:	4b07      	ldr	r3, [pc, #28]	@ (8007604 <prvSwitchTimerLists+0xc4>)
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80075ec:	4b06      	ldr	r3, [pc, #24]	@ (8007608 <prvSwitchTimerLists+0xc8>)
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	4a04      	ldr	r2, [pc, #16]	@ (8007604 <prvSwitchTimerLists+0xc4>)
 80075f2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80075f4:	4a04      	ldr	r2, [pc, #16]	@ (8007608 <prvSwitchTimerLists+0xc8>)
 80075f6:	697b      	ldr	r3, [r7, #20]
 80075f8:	6013      	str	r3, [r2, #0]
}
 80075fa:	bf00      	nop
 80075fc:	3718      	adds	r7, #24
 80075fe:	46bd      	mov	sp, r7
 8007600:	bd80      	pop	{r7, pc}
 8007602:	bf00      	nop
 8007604:	20000df0 	.word	0x20000df0
 8007608:	20000df4 	.word	0x20000df4

0800760c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800760c:	b580      	push	{r7, lr}
 800760e:	b082      	sub	sp, #8
 8007610:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007612:	f000 f969 	bl	80078e8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007616:	4b15      	ldr	r3, [pc, #84]	@ (800766c <prvCheckForValidListAndQueue+0x60>)
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d120      	bne.n	8007660 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800761e:	4814      	ldr	r0, [pc, #80]	@ (8007670 <prvCheckForValidListAndQueue+0x64>)
 8007620:	f7fd fcf4 	bl	800500c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007624:	4813      	ldr	r0, [pc, #76]	@ (8007674 <prvCheckForValidListAndQueue+0x68>)
 8007626:	f7fd fcf1 	bl	800500c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800762a:	4b13      	ldr	r3, [pc, #76]	@ (8007678 <prvCheckForValidListAndQueue+0x6c>)
 800762c:	4a10      	ldr	r2, [pc, #64]	@ (8007670 <prvCheckForValidListAndQueue+0x64>)
 800762e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007630:	4b12      	ldr	r3, [pc, #72]	@ (800767c <prvCheckForValidListAndQueue+0x70>)
 8007632:	4a10      	ldr	r2, [pc, #64]	@ (8007674 <prvCheckForValidListAndQueue+0x68>)
 8007634:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007636:	2300      	movs	r3, #0
 8007638:	9300      	str	r3, [sp, #0]
 800763a:	4b11      	ldr	r3, [pc, #68]	@ (8007680 <prvCheckForValidListAndQueue+0x74>)
 800763c:	4a11      	ldr	r2, [pc, #68]	@ (8007684 <prvCheckForValidListAndQueue+0x78>)
 800763e:	2110      	movs	r1, #16
 8007640:	200a      	movs	r0, #10
 8007642:	f7fd fe01 	bl	8005248 <xQueueGenericCreateStatic>
 8007646:	4603      	mov	r3, r0
 8007648:	4a08      	ldr	r2, [pc, #32]	@ (800766c <prvCheckForValidListAndQueue+0x60>)
 800764a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800764c:	4b07      	ldr	r3, [pc, #28]	@ (800766c <prvCheckForValidListAndQueue+0x60>)
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d005      	beq.n	8007660 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007654:	4b05      	ldr	r3, [pc, #20]	@ (800766c <prvCheckForValidListAndQueue+0x60>)
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	490b      	ldr	r1, [pc, #44]	@ (8007688 <prvCheckForValidListAndQueue+0x7c>)
 800765a:	4618      	mov	r0, r3
 800765c:	f7fe fc42 	bl	8005ee4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007660:	f000 f974 	bl	800794c <vPortExitCritical>
}
 8007664:	bf00      	nop
 8007666:	46bd      	mov	sp, r7
 8007668:	bd80      	pop	{r7, pc}
 800766a:	bf00      	nop
 800766c:	20000df8 	.word	0x20000df8
 8007670:	20000dc8 	.word	0x20000dc8
 8007674:	20000ddc 	.word	0x20000ddc
 8007678:	20000df0 	.word	0x20000df0
 800767c:	20000df4 	.word	0x20000df4
 8007680:	20000ea4 	.word	0x20000ea4
 8007684:	20000e04 	.word	0x20000e04
 8007688:	08007fc8 	.word	0x08007fc8

0800768c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800768c:	b480      	push	{r7}
 800768e:	b085      	sub	sp, #20
 8007690:	af00      	add	r7, sp, #0
 8007692:	60f8      	str	r0, [r7, #12]
 8007694:	60b9      	str	r1, [r7, #8]
 8007696:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	3b04      	subs	r3, #4
 800769c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80076a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	3b04      	subs	r3, #4
 80076aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80076ac:	68bb      	ldr	r3, [r7, #8]
 80076ae:	f023 0201 	bic.w	r2, r3, #1
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	3b04      	subs	r3, #4
 80076ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80076bc:	4a0c      	ldr	r2, [pc, #48]	@ (80076f0 <pxPortInitialiseStack+0x64>)
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	3b14      	subs	r3, #20
 80076c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80076c8:	687a      	ldr	r2, [r7, #4]
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	3b04      	subs	r3, #4
 80076d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	f06f 0202 	mvn.w	r2, #2
 80076da:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	3b20      	subs	r3, #32
 80076e0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80076e2:	68fb      	ldr	r3, [r7, #12]
}
 80076e4:	4618      	mov	r0, r3
 80076e6:	3714      	adds	r7, #20
 80076e8:	46bd      	mov	sp, r7
 80076ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ee:	4770      	bx	lr
 80076f0:	080076f5 	.word	0x080076f5

080076f4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80076f4:	b480      	push	{r7}
 80076f6:	b085      	sub	sp, #20
 80076f8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80076fa:	2300      	movs	r3, #0
 80076fc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80076fe:	4b13      	ldr	r3, [pc, #76]	@ (800774c <prvTaskExitError+0x58>)
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007706:	d00b      	beq.n	8007720 <prvTaskExitError+0x2c>
	__asm volatile
 8007708:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800770c:	f383 8811 	msr	BASEPRI, r3
 8007710:	f3bf 8f6f 	isb	sy
 8007714:	f3bf 8f4f 	dsb	sy
 8007718:	60fb      	str	r3, [r7, #12]
}
 800771a:	bf00      	nop
 800771c:	bf00      	nop
 800771e:	e7fd      	b.n	800771c <prvTaskExitError+0x28>
	__asm volatile
 8007720:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007724:	f383 8811 	msr	BASEPRI, r3
 8007728:	f3bf 8f6f 	isb	sy
 800772c:	f3bf 8f4f 	dsb	sy
 8007730:	60bb      	str	r3, [r7, #8]
}
 8007732:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007734:	bf00      	nop
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d0fc      	beq.n	8007736 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800773c:	bf00      	nop
 800773e:	bf00      	nop
 8007740:	3714      	adds	r7, #20
 8007742:	46bd      	mov	sp, r7
 8007744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007748:	4770      	bx	lr
 800774a:	bf00      	nop
 800774c:	2000000c 	.word	0x2000000c

08007750 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007750:	4b07      	ldr	r3, [pc, #28]	@ (8007770 <pxCurrentTCBConst2>)
 8007752:	6819      	ldr	r1, [r3, #0]
 8007754:	6808      	ldr	r0, [r1, #0]
 8007756:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800775a:	f380 8809 	msr	PSP, r0
 800775e:	f3bf 8f6f 	isb	sy
 8007762:	f04f 0000 	mov.w	r0, #0
 8007766:	f380 8811 	msr	BASEPRI, r0
 800776a:	4770      	bx	lr
 800776c:	f3af 8000 	nop.w

08007770 <pxCurrentTCBConst2>:
 8007770:	200008c8 	.word	0x200008c8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007774:	bf00      	nop
 8007776:	bf00      	nop

08007778 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007778:	4808      	ldr	r0, [pc, #32]	@ (800779c <prvPortStartFirstTask+0x24>)
 800777a:	6800      	ldr	r0, [r0, #0]
 800777c:	6800      	ldr	r0, [r0, #0]
 800777e:	f380 8808 	msr	MSP, r0
 8007782:	f04f 0000 	mov.w	r0, #0
 8007786:	f380 8814 	msr	CONTROL, r0
 800778a:	b662      	cpsie	i
 800778c:	b661      	cpsie	f
 800778e:	f3bf 8f4f 	dsb	sy
 8007792:	f3bf 8f6f 	isb	sy
 8007796:	df00      	svc	0
 8007798:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800779a:	bf00      	nop
 800779c:	e000ed08 	.word	0xe000ed08

080077a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b086      	sub	sp, #24
 80077a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80077a6:	4b47      	ldr	r3, [pc, #284]	@ (80078c4 <xPortStartScheduler+0x124>)
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	4a47      	ldr	r2, [pc, #284]	@ (80078c8 <xPortStartScheduler+0x128>)
 80077ac:	4293      	cmp	r3, r2
 80077ae:	d10b      	bne.n	80077c8 <xPortStartScheduler+0x28>
	__asm volatile
 80077b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077b4:	f383 8811 	msr	BASEPRI, r3
 80077b8:	f3bf 8f6f 	isb	sy
 80077bc:	f3bf 8f4f 	dsb	sy
 80077c0:	613b      	str	r3, [r7, #16]
}
 80077c2:	bf00      	nop
 80077c4:	bf00      	nop
 80077c6:	e7fd      	b.n	80077c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80077c8:	4b3e      	ldr	r3, [pc, #248]	@ (80078c4 <xPortStartScheduler+0x124>)
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	4a3f      	ldr	r2, [pc, #252]	@ (80078cc <xPortStartScheduler+0x12c>)
 80077ce:	4293      	cmp	r3, r2
 80077d0:	d10b      	bne.n	80077ea <xPortStartScheduler+0x4a>
	__asm volatile
 80077d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077d6:	f383 8811 	msr	BASEPRI, r3
 80077da:	f3bf 8f6f 	isb	sy
 80077de:	f3bf 8f4f 	dsb	sy
 80077e2:	60fb      	str	r3, [r7, #12]
}
 80077e4:	bf00      	nop
 80077e6:	bf00      	nop
 80077e8:	e7fd      	b.n	80077e6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80077ea:	4b39      	ldr	r3, [pc, #228]	@ (80078d0 <xPortStartScheduler+0x130>)
 80077ec:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80077ee:	697b      	ldr	r3, [r7, #20]
 80077f0:	781b      	ldrb	r3, [r3, #0]
 80077f2:	b2db      	uxtb	r3, r3
 80077f4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80077f6:	697b      	ldr	r3, [r7, #20]
 80077f8:	22ff      	movs	r2, #255	@ 0xff
 80077fa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80077fc:	697b      	ldr	r3, [r7, #20]
 80077fe:	781b      	ldrb	r3, [r3, #0]
 8007800:	b2db      	uxtb	r3, r3
 8007802:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007804:	78fb      	ldrb	r3, [r7, #3]
 8007806:	b2db      	uxtb	r3, r3
 8007808:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800780c:	b2da      	uxtb	r2, r3
 800780e:	4b31      	ldr	r3, [pc, #196]	@ (80078d4 <xPortStartScheduler+0x134>)
 8007810:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007812:	4b31      	ldr	r3, [pc, #196]	@ (80078d8 <xPortStartScheduler+0x138>)
 8007814:	2207      	movs	r2, #7
 8007816:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007818:	e009      	b.n	800782e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800781a:	4b2f      	ldr	r3, [pc, #188]	@ (80078d8 <xPortStartScheduler+0x138>)
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	3b01      	subs	r3, #1
 8007820:	4a2d      	ldr	r2, [pc, #180]	@ (80078d8 <xPortStartScheduler+0x138>)
 8007822:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007824:	78fb      	ldrb	r3, [r7, #3]
 8007826:	b2db      	uxtb	r3, r3
 8007828:	005b      	lsls	r3, r3, #1
 800782a:	b2db      	uxtb	r3, r3
 800782c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800782e:	78fb      	ldrb	r3, [r7, #3]
 8007830:	b2db      	uxtb	r3, r3
 8007832:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007836:	2b80      	cmp	r3, #128	@ 0x80
 8007838:	d0ef      	beq.n	800781a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800783a:	4b27      	ldr	r3, [pc, #156]	@ (80078d8 <xPortStartScheduler+0x138>)
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	f1c3 0307 	rsb	r3, r3, #7
 8007842:	2b04      	cmp	r3, #4
 8007844:	d00b      	beq.n	800785e <xPortStartScheduler+0xbe>
	__asm volatile
 8007846:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800784a:	f383 8811 	msr	BASEPRI, r3
 800784e:	f3bf 8f6f 	isb	sy
 8007852:	f3bf 8f4f 	dsb	sy
 8007856:	60bb      	str	r3, [r7, #8]
}
 8007858:	bf00      	nop
 800785a:	bf00      	nop
 800785c:	e7fd      	b.n	800785a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800785e:	4b1e      	ldr	r3, [pc, #120]	@ (80078d8 <xPortStartScheduler+0x138>)
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	021b      	lsls	r3, r3, #8
 8007864:	4a1c      	ldr	r2, [pc, #112]	@ (80078d8 <xPortStartScheduler+0x138>)
 8007866:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007868:	4b1b      	ldr	r3, [pc, #108]	@ (80078d8 <xPortStartScheduler+0x138>)
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007870:	4a19      	ldr	r2, [pc, #100]	@ (80078d8 <xPortStartScheduler+0x138>)
 8007872:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	b2da      	uxtb	r2, r3
 8007878:	697b      	ldr	r3, [r7, #20]
 800787a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800787c:	4b17      	ldr	r3, [pc, #92]	@ (80078dc <xPortStartScheduler+0x13c>)
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	4a16      	ldr	r2, [pc, #88]	@ (80078dc <xPortStartScheduler+0x13c>)
 8007882:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007886:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007888:	4b14      	ldr	r3, [pc, #80]	@ (80078dc <xPortStartScheduler+0x13c>)
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	4a13      	ldr	r2, [pc, #76]	@ (80078dc <xPortStartScheduler+0x13c>)
 800788e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007892:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007894:	f000 f8da 	bl	8007a4c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007898:	4b11      	ldr	r3, [pc, #68]	@ (80078e0 <xPortStartScheduler+0x140>)
 800789a:	2200      	movs	r2, #0
 800789c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800789e:	f000 f8f9 	bl	8007a94 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80078a2:	4b10      	ldr	r3, [pc, #64]	@ (80078e4 <xPortStartScheduler+0x144>)
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	4a0f      	ldr	r2, [pc, #60]	@ (80078e4 <xPortStartScheduler+0x144>)
 80078a8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80078ac:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80078ae:	f7ff ff63 	bl	8007778 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80078b2:	f7fe ff2f 	bl	8006714 <vTaskSwitchContext>
	prvTaskExitError();
 80078b6:	f7ff ff1d 	bl	80076f4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80078ba:	2300      	movs	r3, #0
}
 80078bc:	4618      	mov	r0, r3
 80078be:	3718      	adds	r7, #24
 80078c0:	46bd      	mov	sp, r7
 80078c2:	bd80      	pop	{r7, pc}
 80078c4:	e000ed00 	.word	0xe000ed00
 80078c8:	410fc271 	.word	0x410fc271
 80078cc:	410fc270 	.word	0x410fc270
 80078d0:	e000e400 	.word	0xe000e400
 80078d4:	20000ef4 	.word	0x20000ef4
 80078d8:	20000ef8 	.word	0x20000ef8
 80078dc:	e000ed20 	.word	0xe000ed20
 80078e0:	2000000c 	.word	0x2000000c
 80078e4:	e000ef34 	.word	0xe000ef34

080078e8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80078e8:	b480      	push	{r7}
 80078ea:	b083      	sub	sp, #12
 80078ec:	af00      	add	r7, sp, #0
	__asm volatile
 80078ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078f2:	f383 8811 	msr	BASEPRI, r3
 80078f6:	f3bf 8f6f 	isb	sy
 80078fa:	f3bf 8f4f 	dsb	sy
 80078fe:	607b      	str	r3, [r7, #4]
}
 8007900:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007902:	4b10      	ldr	r3, [pc, #64]	@ (8007944 <vPortEnterCritical+0x5c>)
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	3301      	adds	r3, #1
 8007908:	4a0e      	ldr	r2, [pc, #56]	@ (8007944 <vPortEnterCritical+0x5c>)
 800790a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800790c:	4b0d      	ldr	r3, [pc, #52]	@ (8007944 <vPortEnterCritical+0x5c>)
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	2b01      	cmp	r3, #1
 8007912:	d110      	bne.n	8007936 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007914:	4b0c      	ldr	r3, [pc, #48]	@ (8007948 <vPortEnterCritical+0x60>)
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	b2db      	uxtb	r3, r3
 800791a:	2b00      	cmp	r3, #0
 800791c:	d00b      	beq.n	8007936 <vPortEnterCritical+0x4e>
	__asm volatile
 800791e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007922:	f383 8811 	msr	BASEPRI, r3
 8007926:	f3bf 8f6f 	isb	sy
 800792a:	f3bf 8f4f 	dsb	sy
 800792e:	603b      	str	r3, [r7, #0]
}
 8007930:	bf00      	nop
 8007932:	bf00      	nop
 8007934:	e7fd      	b.n	8007932 <vPortEnterCritical+0x4a>
	}
}
 8007936:	bf00      	nop
 8007938:	370c      	adds	r7, #12
 800793a:	46bd      	mov	sp, r7
 800793c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007940:	4770      	bx	lr
 8007942:	bf00      	nop
 8007944:	2000000c 	.word	0x2000000c
 8007948:	e000ed04 	.word	0xe000ed04

0800794c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800794c:	b480      	push	{r7}
 800794e:	b083      	sub	sp, #12
 8007950:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007952:	4b12      	ldr	r3, [pc, #72]	@ (800799c <vPortExitCritical+0x50>)
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d10b      	bne.n	8007972 <vPortExitCritical+0x26>
	__asm volatile
 800795a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800795e:	f383 8811 	msr	BASEPRI, r3
 8007962:	f3bf 8f6f 	isb	sy
 8007966:	f3bf 8f4f 	dsb	sy
 800796a:	607b      	str	r3, [r7, #4]
}
 800796c:	bf00      	nop
 800796e:	bf00      	nop
 8007970:	e7fd      	b.n	800796e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007972:	4b0a      	ldr	r3, [pc, #40]	@ (800799c <vPortExitCritical+0x50>)
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	3b01      	subs	r3, #1
 8007978:	4a08      	ldr	r2, [pc, #32]	@ (800799c <vPortExitCritical+0x50>)
 800797a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800797c:	4b07      	ldr	r3, [pc, #28]	@ (800799c <vPortExitCritical+0x50>)
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d105      	bne.n	8007990 <vPortExitCritical+0x44>
 8007984:	2300      	movs	r3, #0
 8007986:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	f383 8811 	msr	BASEPRI, r3
}
 800798e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007990:	bf00      	nop
 8007992:	370c      	adds	r7, #12
 8007994:	46bd      	mov	sp, r7
 8007996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799a:	4770      	bx	lr
 800799c:	2000000c 	.word	0x2000000c

080079a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80079a0:	f3ef 8009 	mrs	r0, PSP
 80079a4:	f3bf 8f6f 	isb	sy
 80079a8:	4b15      	ldr	r3, [pc, #84]	@ (8007a00 <pxCurrentTCBConst>)
 80079aa:	681a      	ldr	r2, [r3, #0]
 80079ac:	f01e 0f10 	tst.w	lr, #16
 80079b0:	bf08      	it	eq
 80079b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80079b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079ba:	6010      	str	r0, [r2, #0]
 80079bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80079c0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80079c4:	f380 8811 	msr	BASEPRI, r0
 80079c8:	f3bf 8f4f 	dsb	sy
 80079cc:	f3bf 8f6f 	isb	sy
 80079d0:	f7fe fea0 	bl	8006714 <vTaskSwitchContext>
 80079d4:	f04f 0000 	mov.w	r0, #0
 80079d8:	f380 8811 	msr	BASEPRI, r0
 80079dc:	bc09      	pop	{r0, r3}
 80079de:	6819      	ldr	r1, [r3, #0]
 80079e0:	6808      	ldr	r0, [r1, #0]
 80079e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079e6:	f01e 0f10 	tst.w	lr, #16
 80079ea:	bf08      	it	eq
 80079ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80079f0:	f380 8809 	msr	PSP, r0
 80079f4:	f3bf 8f6f 	isb	sy
 80079f8:	4770      	bx	lr
 80079fa:	bf00      	nop
 80079fc:	f3af 8000 	nop.w

08007a00 <pxCurrentTCBConst>:
 8007a00:	200008c8 	.word	0x200008c8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007a04:	bf00      	nop
 8007a06:	bf00      	nop

08007a08 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b082      	sub	sp, #8
 8007a0c:	af00      	add	r7, sp, #0
	__asm volatile
 8007a0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a12:	f383 8811 	msr	BASEPRI, r3
 8007a16:	f3bf 8f6f 	isb	sy
 8007a1a:	f3bf 8f4f 	dsb	sy
 8007a1e:	607b      	str	r3, [r7, #4]
}
 8007a20:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007a22:	f7fe fdbd 	bl	80065a0 <xTaskIncrementTick>
 8007a26:	4603      	mov	r3, r0
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d003      	beq.n	8007a34 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007a2c:	4b06      	ldr	r3, [pc, #24]	@ (8007a48 <xPortSysTickHandler+0x40>)
 8007a2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007a32:	601a      	str	r2, [r3, #0]
 8007a34:	2300      	movs	r3, #0
 8007a36:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	f383 8811 	msr	BASEPRI, r3
}
 8007a3e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007a40:	bf00      	nop
 8007a42:	3708      	adds	r7, #8
 8007a44:	46bd      	mov	sp, r7
 8007a46:	bd80      	pop	{r7, pc}
 8007a48:	e000ed04 	.word	0xe000ed04

08007a4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007a4c:	b480      	push	{r7}
 8007a4e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007a50:	4b0b      	ldr	r3, [pc, #44]	@ (8007a80 <vPortSetupTimerInterrupt+0x34>)
 8007a52:	2200      	movs	r2, #0
 8007a54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007a56:	4b0b      	ldr	r3, [pc, #44]	@ (8007a84 <vPortSetupTimerInterrupt+0x38>)
 8007a58:	2200      	movs	r2, #0
 8007a5a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007a5c:	4b0a      	ldr	r3, [pc, #40]	@ (8007a88 <vPortSetupTimerInterrupt+0x3c>)
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	4a0a      	ldr	r2, [pc, #40]	@ (8007a8c <vPortSetupTimerInterrupt+0x40>)
 8007a62:	fba2 2303 	umull	r2, r3, r2, r3
 8007a66:	099b      	lsrs	r3, r3, #6
 8007a68:	4a09      	ldr	r2, [pc, #36]	@ (8007a90 <vPortSetupTimerInterrupt+0x44>)
 8007a6a:	3b01      	subs	r3, #1
 8007a6c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007a6e:	4b04      	ldr	r3, [pc, #16]	@ (8007a80 <vPortSetupTimerInterrupt+0x34>)
 8007a70:	2207      	movs	r2, #7
 8007a72:	601a      	str	r2, [r3, #0]
}
 8007a74:	bf00      	nop
 8007a76:	46bd      	mov	sp, r7
 8007a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7c:	4770      	bx	lr
 8007a7e:	bf00      	nop
 8007a80:	e000e010 	.word	0xe000e010
 8007a84:	e000e018 	.word	0xe000e018
 8007a88:	20000000 	.word	0x20000000
 8007a8c:	10624dd3 	.word	0x10624dd3
 8007a90:	e000e014 	.word	0xe000e014

08007a94 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007a94:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007aa4 <vPortEnableVFP+0x10>
 8007a98:	6801      	ldr	r1, [r0, #0]
 8007a9a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8007a9e:	6001      	str	r1, [r0, #0]
 8007aa0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007aa2:	bf00      	nop
 8007aa4:	e000ed88 	.word	0xe000ed88

08007aa8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007aa8:	b480      	push	{r7}
 8007aaa:	b085      	sub	sp, #20
 8007aac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007aae:	f3ef 8305 	mrs	r3, IPSR
 8007ab2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	2b0f      	cmp	r3, #15
 8007ab8:	d915      	bls.n	8007ae6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007aba:	4a18      	ldr	r2, [pc, #96]	@ (8007b1c <vPortValidateInterruptPriority+0x74>)
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	4413      	add	r3, r2
 8007ac0:	781b      	ldrb	r3, [r3, #0]
 8007ac2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007ac4:	4b16      	ldr	r3, [pc, #88]	@ (8007b20 <vPortValidateInterruptPriority+0x78>)
 8007ac6:	781b      	ldrb	r3, [r3, #0]
 8007ac8:	7afa      	ldrb	r2, [r7, #11]
 8007aca:	429a      	cmp	r2, r3
 8007acc:	d20b      	bcs.n	8007ae6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8007ace:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ad2:	f383 8811 	msr	BASEPRI, r3
 8007ad6:	f3bf 8f6f 	isb	sy
 8007ada:	f3bf 8f4f 	dsb	sy
 8007ade:	607b      	str	r3, [r7, #4]
}
 8007ae0:	bf00      	nop
 8007ae2:	bf00      	nop
 8007ae4:	e7fd      	b.n	8007ae2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007ae6:	4b0f      	ldr	r3, [pc, #60]	@ (8007b24 <vPortValidateInterruptPriority+0x7c>)
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007aee:	4b0e      	ldr	r3, [pc, #56]	@ (8007b28 <vPortValidateInterruptPriority+0x80>)
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	429a      	cmp	r2, r3
 8007af4:	d90b      	bls.n	8007b0e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8007af6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007afa:	f383 8811 	msr	BASEPRI, r3
 8007afe:	f3bf 8f6f 	isb	sy
 8007b02:	f3bf 8f4f 	dsb	sy
 8007b06:	603b      	str	r3, [r7, #0]
}
 8007b08:	bf00      	nop
 8007b0a:	bf00      	nop
 8007b0c:	e7fd      	b.n	8007b0a <vPortValidateInterruptPriority+0x62>
	}
 8007b0e:	bf00      	nop
 8007b10:	3714      	adds	r7, #20
 8007b12:	46bd      	mov	sp, r7
 8007b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b18:	4770      	bx	lr
 8007b1a:	bf00      	nop
 8007b1c:	e000e3f0 	.word	0xe000e3f0
 8007b20:	20000ef4 	.word	0x20000ef4
 8007b24:	e000ed0c 	.word	0xe000ed0c
 8007b28:	20000ef8 	.word	0x20000ef8

08007b2c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b08a      	sub	sp, #40	@ 0x28
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007b34:	2300      	movs	r3, #0
 8007b36:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007b38:	f7fe fc76 	bl	8006428 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007b3c:	4b5c      	ldr	r3, [pc, #368]	@ (8007cb0 <pvPortMalloc+0x184>)
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d101      	bne.n	8007b48 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007b44:	f000 f924 	bl	8007d90 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007b48:	4b5a      	ldr	r3, [pc, #360]	@ (8007cb4 <pvPortMalloc+0x188>)
 8007b4a:	681a      	ldr	r2, [r3, #0]
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	4013      	ands	r3, r2
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	f040 8095 	bne.w	8007c80 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d01e      	beq.n	8007b9a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8007b5c:	2208      	movs	r2, #8
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	4413      	add	r3, r2
 8007b62:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	f003 0307 	and.w	r3, r3, #7
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d015      	beq.n	8007b9a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	f023 0307 	bic.w	r3, r3, #7
 8007b74:	3308      	adds	r3, #8
 8007b76:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	f003 0307 	and.w	r3, r3, #7
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d00b      	beq.n	8007b9a <pvPortMalloc+0x6e>
	__asm volatile
 8007b82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b86:	f383 8811 	msr	BASEPRI, r3
 8007b8a:	f3bf 8f6f 	isb	sy
 8007b8e:	f3bf 8f4f 	dsb	sy
 8007b92:	617b      	str	r3, [r7, #20]
}
 8007b94:	bf00      	nop
 8007b96:	bf00      	nop
 8007b98:	e7fd      	b.n	8007b96 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d06f      	beq.n	8007c80 <pvPortMalloc+0x154>
 8007ba0:	4b45      	ldr	r3, [pc, #276]	@ (8007cb8 <pvPortMalloc+0x18c>)
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	687a      	ldr	r2, [r7, #4]
 8007ba6:	429a      	cmp	r2, r3
 8007ba8:	d86a      	bhi.n	8007c80 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007baa:	4b44      	ldr	r3, [pc, #272]	@ (8007cbc <pvPortMalloc+0x190>)
 8007bac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007bae:	4b43      	ldr	r3, [pc, #268]	@ (8007cbc <pvPortMalloc+0x190>)
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007bb4:	e004      	b.n	8007bc0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bb8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007bba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007bc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bc2:	685b      	ldr	r3, [r3, #4]
 8007bc4:	687a      	ldr	r2, [r7, #4]
 8007bc6:	429a      	cmp	r2, r3
 8007bc8:	d903      	bls.n	8007bd2 <pvPortMalloc+0xa6>
 8007bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d1f1      	bne.n	8007bb6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007bd2:	4b37      	ldr	r3, [pc, #220]	@ (8007cb0 <pvPortMalloc+0x184>)
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007bd8:	429a      	cmp	r2, r3
 8007bda:	d051      	beq.n	8007c80 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007bdc:	6a3b      	ldr	r3, [r7, #32]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	2208      	movs	r2, #8
 8007be2:	4413      	add	r3, r2
 8007be4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007be8:	681a      	ldr	r2, [r3, #0]
 8007bea:	6a3b      	ldr	r3, [r7, #32]
 8007bec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007bee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bf0:	685a      	ldr	r2, [r3, #4]
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	1ad2      	subs	r2, r2, r3
 8007bf6:	2308      	movs	r3, #8
 8007bf8:	005b      	lsls	r3, r3, #1
 8007bfa:	429a      	cmp	r2, r3
 8007bfc:	d920      	bls.n	8007c40 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007bfe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	4413      	add	r3, r2
 8007c04:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007c06:	69bb      	ldr	r3, [r7, #24]
 8007c08:	f003 0307 	and.w	r3, r3, #7
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d00b      	beq.n	8007c28 <pvPortMalloc+0xfc>
	__asm volatile
 8007c10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c14:	f383 8811 	msr	BASEPRI, r3
 8007c18:	f3bf 8f6f 	isb	sy
 8007c1c:	f3bf 8f4f 	dsb	sy
 8007c20:	613b      	str	r3, [r7, #16]
}
 8007c22:	bf00      	nop
 8007c24:	bf00      	nop
 8007c26:	e7fd      	b.n	8007c24 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007c28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c2a:	685a      	ldr	r2, [r3, #4]
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	1ad2      	subs	r2, r2, r3
 8007c30:	69bb      	ldr	r3, [r7, #24]
 8007c32:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007c34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c36:	687a      	ldr	r2, [r7, #4]
 8007c38:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007c3a:	69b8      	ldr	r0, [r7, #24]
 8007c3c:	f000 f90a 	bl	8007e54 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007c40:	4b1d      	ldr	r3, [pc, #116]	@ (8007cb8 <pvPortMalloc+0x18c>)
 8007c42:	681a      	ldr	r2, [r3, #0]
 8007c44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c46:	685b      	ldr	r3, [r3, #4]
 8007c48:	1ad3      	subs	r3, r2, r3
 8007c4a:	4a1b      	ldr	r2, [pc, #108]	@ (8007cb8 <pvPortMalloc+0x18c>)
 8007c4c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007c4e:	4b1a      	ldr	r3, [pc, #104]	@ (8007cb8 <pvPortMalloc+0x18c>)
 8007c50:	681a      	ldr	r2, [r3, #0]
 8007c52:	4b1b      	ldr	r3, [pc, #108]	@ (8007cc0 <pvPortMalloc+0x194>)
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	429a      	cmp	r2, r3
 8007c58:	d203      	bcs.n	8007c62 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007c5a:	4b17      	ldr	r3, [pc, #92]	@ (8007cb8 <pvPortMalloc+0x18c>)
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	4a18      	ldr	r2, [pc, #96]	@ (8007cc0 <pvPortMalloc+0x194>)
 8007c60:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007c62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c64:	685a      	ldr	r2, [r3, #4]
 8007c66:	4b13      	ldr	r3, [pc, #76]	@ (8007cb4 <pvPortMalloc+0x188>)
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	431a      	orrs	r2, r3
 8007c6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c6e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007c70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c72:	2200      	movs	r2, #0
 8007c74:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007c76:	4b13      	ldr	r3, [pc, #76]	@ (8007cc4 <pvPortMalloc+0x198>)
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	3301      	adds	r3, #1
 8007c7c:	4a11      	ldr	r2, [pc, #68]	@ (8007cc4 <pvPortMalloc+0x198>)
 8007c7e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007c80:	f7fe fbe0 	bl	8006444 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007c84:	69fb      	ldr	r3, [r7, #28]
 8007c86:	f003 0307 	and.w	r3, r3, #7
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d00b      	beq.n	8007ca6 <pvPortMalloc+0x17a>
	__asm volatile
 8007c8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c92:	f383 8811 	msr	BASEPRI, r3
 8007c96:	f3bf 8f6f 	isb	sy
 8007c9a:	f3bf 8f4f 	dsb	sy
 8007c9e:	60fb      	str	r3, [r7, #12]
}
 8007ca0:	bf00      	nop
 8007ca2:	bf00      	nop
 8007ca4:	e7fd      	b.n	8007ca2 <pvPortMalloc+0x176>
	return pvReturn;
 8007ca6:	69fb      	ldr	r3, [r7, #28]
}
 8007ca8:	4618      	mov	r0, r3
 8007caa:	3728      	adds	r7, #40	@ 0x28
 8007cac:	46bd      	mov	sp, r7
 8007cae:	bd80      	pop	{r7, pc}
 8007cb0:	20001abc 	.word	0x20001abc
 8007cb4:	20001ad0 	.word	0x20001ad0
 8007cb8:	20001ac0 	.word	0x20001ac0
 8007cbc:	20001ab4 	.word	0x20001ab4
 8007cc0:	20001ac4 	.word	0x20001ac4
 8007cc4:	20001ac8 	.word	0x20001ac8

08007cc8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b086      	sub	sp, #24
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d04f      	beq.n	8007d7a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007cda:	2308      	movs	r3, #8
 8007cdc:	425b      	negs	r3, r3
 8007cde:	697a      	ldr	r2, [r7, #20]
 8007ce0:	4413      	add	r3, r2
 8007ce2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007ce4:	697b      	ldr	r3, [r7, #20]
 8007ce6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007ce8:	693b      	ldr	r3, [r7, #16]
 8007cea:	685a      	ldr	r2, [r3, #4]
 8007cec:	4b25      	ldr	r3, [pc, #148]	@ (8007d84 <vPortFree+0xbc>)
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	4013      	ands	r3, r2
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d10b      	bne.n	8007d0e <vPortFree+0x46>
	__asm volatile
 8007cf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cfa:	f383 8811 	msr	BASEPRI, r3
 8007cfe:	f3bf 8f6f 	isb	sy
 8007d02:	f3bf 8f4f 	dsb	sy
 8007d06:	60fb      	str	r3, [r7, #12]
}
 8007d08:	bf00      	nop
 8007d0a:	bf00      	nop
 8007d0c:	e7fd      	b.n	8007d0a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007d0e:	693b      	ldr	r3, [r7, #16]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d00b      	beq.n	8007d2e <vPortFree+0x66>
	__asm volatile
 8007d16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d1a:	f383 8811 	msr	BASEPRI, r3
 8007d1e:	f3bf 8f6f 	isb	sy
 8007d22:	f3bf 8f4f 	dsb	sy
 8007d26:	60bb      	str	r3, [r7, #8]
}
 8007d28:	bf00      	nop
 8007d2a:	bf00      	nop
 8007d2c:	e7fd      	b.n	8007d2a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007d2e:	693b      	ldr	r3, [r7, #16]
 8007d30:	685a      	ldr	r2, [r3, #4]
 8007d32:	4b14      	ldr	r3, [pc, #80]	@ (8007d84 <vPortFree+0xbc>)
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	4013      	ands	r3, r2
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d01e      	beq.n	8007d7a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007d3c:	693b      	ldr	r3, [r7, #16]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d11a      	bne.n	8007d7a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007d44:	693b      	ldr	r3, [r7, #16]
 8007d46:	685a      	ldr	r2, [r3, #4]
 8007d48:	4b0e      	ldr	r3, [pc, #56]	@ (8007d84 <vPortFree+0xbc>)
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	43db      	mvns	r3, r3
 8007d4e:	401a      	ands	r2, r3
 8007d50:	693b      	ldr	r3, [r7, #16]
 8007d52:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007d54:	f7fe fb68 	bl	8006428 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007d58:	693b      	ldr	r3, [r7, #16]
 8007d5a:	685a      	ldr	r2, [r3, #4]
 8007d5c:	4b0a      	ldr	r3, [pc, #40]	@ (8007d88 <vPortFree+0xc0>)
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	4413      	add	r3, r2
 8007d62:	4a09      	ldr	r2, [pc, #36]	@ (8007d88 <vPortFree+0xc0>)
 8007d64:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007d66:	6938      	ldr	r0, [r7, #16]
 8007d68:	f000 f874 	bl	8007e54 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007d6c:	4b07      	ldr	r3, [pc, #28]	@ (8007d8c <vPortFree+0xc4>)
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	3301      	adds	r3, #1
 8007d72:	4a06      	ldr	r2, [pc, #24]	@ (8007d8c <vPortFree+0xc4>)
 8007d74:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007d76:	f7fe fb65 	bl	8006444 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007d7a:	bf00      	nop
 8007d7c:	3718      	adds	r7, #24
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	bd80      	pop	{r7, pc}
 8007d82:	bf00      	nop
 8007d84:	20001ad0 	.word	0x20001ad0
 8007d88:	20001ac0 	.word	0x20001ac0
 8007d8c:	20001acc 	.word	0x20001acc

08007d90 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007d90:	b480      	push	{r7}
 8007d92:	b085      	sub	sp, #20
 8007d94:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007d96:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8007d9a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007d9c:	4b27      	ldr	r3, [pc, #156]	@ (8007e3c <prvHeapInit+0xac>)
 8007d9e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	f003 0307 	and.w	r3, r3, #7
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d00c      	beq.n	8007dc4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	3307      	adds	r3, #7
 8007dae:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	f023 0307 	bic.w	r3, r3, #7
 8007db6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007db8:	68ba      	ldr	r2, [r7, #8]
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	1ad3      	subs	r3, r2, r3
 8007dbe:	4a1f      	ldr	r2, [pc, #124]	@ (8007e3c <prvHeapInit+0xac>)
 8007dc0:	4413      	add	r3, r2
 8007dc2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007dc8:	4a1d      	ldr	r2, [pc, #116]	@ (8007e40 <prvHeapInit+0xb0>)
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007dce:	4b1c      	ldr	r3, [pc, #112]	@ (8007e40 <prvHeapInit+0xb0>)
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	68ba      	ldr	r2, [r7, #8]
 8007dd8:	4413      	add	r3, r2
 8007dda:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007ddc:	2208      	movs	r2, #8
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	1a9b      	subs	r3, r3, r2
 8007de2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	f023 0307 	bic.w	r3, r3, #7
 8007dea:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	4a15      	ldr	r2, [pc, #84]	@ (8007e44 <prvHeapInit+0xb4>)
 8007df0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007df2:	4b14      	ldr	r3, [pc, #80]	@ (8007e44 <prvHeapInit+0xb4>)
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	2200      	movs	r2, #0
 8007df8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007dfa:	4b12      	ldr	r3, [pc, #72]	@ (8007e44 <prvHeapInit+0xb4>)
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	2200      	movs	r2, #0
 8007e00:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007e06:	683b      	ldr	r3, [r7, #0]
 8007e08:	68fa      	ldr	r2, [r7, #12]
 8007e0a:	1ad2      	subs	r2, r2, r3
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007e10:	4b0c      	ldr	r3, [pc, #48]	@ (8007e44 <prvHeapInit+0xb4>)
 8007e12:	681a      	ldr	r2, [r3, #0]
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007e18:	683b      	ldr	r3, [r7, #0]
 8007e1a:	685b      	ldr	r3, [r3, #4]
 8007e1c:	4a0a      	ldr	r2, [pc, #40]	@ (8007e48 <prvHeapInit+0xb8>)
 8007e1e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007e20:	683b      	ldr	r3, [r7, #0]
 8007e22:	685b      	ldr	r3, [r3, #4]
 8007e24:	4a09      	ldr	r2, [pc, #36]	@ (8007e4c <prvHeapInit+0xbc>)
 8007e26:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007e28:	4b09      	ldr	r3, [pc, #36]	@ (8007e50 <prvHeapInit+0xc0>)
 8007e2a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8007e2e:	601a      	str	r2, [r3, #0]
}
 8007e30:	bf00      	nop
 8007e32:	3714      	adds	r7, #20
 8007e34:	46bd      	mov	sp, r7
 8007e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3a:	4770      	bx	lr
 8007e3c:	20000efc 	.word	0x20000efc
 8007e40:	20001ab4 	.word	0x20001ab4
 8007e44:	20001abc 	.word	0x20001abc
 8007e48:	20001ac4 	.word	0x20001ac4
 8007e4c:	20001ac0 	.word	0x20001ac0
 8007e50:	20001ad0 	.word	0x20001ad0

08007e54 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007e54:	b480      	push	{r7}
 8007e56:	b085      	sub	sp, #20
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007e5c:	4b28      	ldr	r3, [pc, #160]	@ (8007f00 <prvInsertBlockIntoFreeList+0xac>)
 8007e5e:	60fb      	str	r3, [r7, #12]
 8007e60:	e002      	b.n	8007e68 <prvInsertBlockIntoFreeList+0x14>
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	60fb      	str	r3, [r7, #12]
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	687a      	ldr	r2, [r7, #4]
 8007e6e:	429a      	cmp	r2, r3
 8007e70:	d8f7      	bhi.n	8007e62 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	685b      	ldr	r3, [r3, #4]
 8007e7a:	68ba      	ldr	r2, [r7, #8]
 8007e7c:	4413      	add	r3, r2
 8007e7e:	687a      	ldr	r2, [r7, #4]
 8007e80:	429a      	cmp	r2, r3
 8007e82:	d108      	bne.n	8007e96 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	685a      	ldr	r2, [r3, #4]
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	685b      	ldr	r3, [r3, #4]
 8007e8c:	441a      	add	r2, r3
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	685b      	ldr	r3, [r3, #4]
 8007e9e:	68ba      	ldr	r2, [r7, #8]
 8007ea0:	441a      	add	r2, r3
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	429a      	cmp	r2, r3
 8007ea8:	d118      	bne.n	8007edc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	681a      	ldr	r2, [r3, #0]
 8007eae:	4b15      	ldr	r3, [pc, #84]	@ (8007f04 <prvInsertBlockIntoFreeList+0xb0>)
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	429a      	cmp	r2, r3
 8007eb4:	d00d      	beq.n	8007ed2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	685a      	ldr	r2, [r3, #4]
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	685b      	ldr	r3, [r3, #4]
 8007ec0:	441a      	add	r2, r3
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	681a      	ldr	r2, [r3, #0]
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	601a      	str	r2, [r3, #0]
 8007ed0:	e008      	b.n	8007ee4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007ed2:	4b0c      	ldr	r3, [pc, #48]	@ (8007f04 <prvInsertBlockIntoFreeList+0xb0>)
 8007ed4:	681a      	ldr	r2, [r3, #0]
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	601a      	str	r2, [r3, #0]
 8007eda:	e003      	b.n	8007ee4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	681a      	ldr	r2, [r3, #0]
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007ee4:	68fa      	ldr	r2, [r7, #12]
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	429a      	cmp	r2, r3
 8007eea:	d002      	beq.n	8007ef2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	687a      	ldr	r2, [r7, #4]
 8007ef0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007ef2:	bf00      	nop
 8007ef4:	3714      	adds	r7, #20
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efc:	4770      	bx	lr
 8007efe:	bf00      	nop
 8007f00:	20001ab4 	.word	0x20001ab4
 8007f04:	20001abc 	.word	0x20001abc

08007f08 <memset>:
 8007f08:	4402      	add	r2, r0
 8007f0a:	4603      	mov	r3, r0
 8007f0c:	4293      	cmp	r3, r2
 8007f0e:	d100      	bne.n	8007f12 <memset+0xa>
 8007f10:	4770      	bx	lr
 8007f12:	f803 1b01 	strb.w	r1, [r3], #1
 8007f16:	e7f9      	b.n	8007f0c <memset+0x4>

08007f18 <__libc_init_array>:
 8007f18:	b570      	push	{r4, r5, r6, lr}
 8007f1a:	4d0d      	ldr	r5, [pc, #52]	@ (8007f50 <__libc_init_array+0x38>)
 8007f1c:	4c0d      	ldr	r4, [pc, #52]	@ (8007f54 <__libc_init_array+0x3c>)
 8007f1e:	1b64      	subs	r4, r4, r5
 8007f20:	10a4      	asrs	r4, r4, #2
 8007f22:	2600      	movs	r6, #0
 8007f24:	42a6      	cmp	r6, r4
 8007f26:	d109      	bne.n	8007f3c <__libc_init_array+0x24>
 8007f28:	4d0b      	ldr	r5, [pc, #44]	@ (8007f58 <__libc_init_array+0x40>)
 8007f2a:	4c0c      	ldr	r4, [pc, #48]	@ (8007f5c <__libc_init_array+0x44>)
 8007f2c:	f000 f826 	bl	8007f7c <_init>
 8007f30:	1b64      	subs	r4, r4, r5
 8007f32:	10a4      	asrs	r4, r4, #2
 8007f34:	2600      	movs	r6, #0
 8007f36:	42a6      	cmp	r6, r4
 8007f38:	d105      	bne.n	8007f46 <__libc_init_array+0x2e>
 8007f3a:	bd70      	pop	{r4, r5, r6, pc}
 8007f3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f40:	4798      	blx	r3
 8007f42:	3601      	adds	r6, #1
 8007f44:	e7ee      	b.n	8007f24 <__libc_init_array+0xc>
 8007f46:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f4a:	4798      	blx	r3
 8007f4c:	3601      	adds	r6, #1
 8007f4e:	e7f2      	b.n	8007f36 <__libc_init_array+0x1e>
 8007f50:	0800808c 	.word	0x0800808c
 8007f54:	0800808c 	.word	0x0800808c
 8007f58:	0800808c 	.word	0x0800808c
 8007f5c:	08008090 	.word	0x08008090

08007f60 <memcpy>:
 8007f60:	440a      	add	r2, r1
 8007f62:	4291      	cmp	r1, r2
 8007f64:	f100 33ff 	add.w	r3, r0, #4294967295
 8007f68:	d100      	bne.n	8007f6c <memcpy+0xc>
 8007f6a:	4770      	bx	lr
 8007f6c:	b510      	push	{r4, lr}
 8007f6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007f72:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007f76:	4291      	cmp	r1, r2
 8007f78:	d1f9      	bne.n	8007f6e <memcpy+0xe>
 8007f7a:	bd10      	pop	{r4, pc}

08007f7c <_init>:
 8007f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f7e:	bf00      	nop
 8007f80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f82:	bc08      	pop	{r3}
 8007f84:	469e      	mov	lr, r3
 8007f86:	4770      	bx	lr

08007f88 <_fini>:
 8007f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f8a:	bf00      	nop
 8007f8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f8e:	bc08      	pop	{r3}
 8007f90:	469e      	mov	lr, r3
 8007f92:	4770      	bx	lr
